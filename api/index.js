Index.PACKAGES = {"zio.prelude.fx" : [{"name" : "zio.prelude.fx.ComposeState", "object" : "zio\/prelude\/fx\/ComposeState$.html", "members_object" : [{"label" : "leftIdentity", "tail" : "(): Out[Unit, Unit, S1, S2, S1, S2]", "member" : "zio.prelude.fx.ComposeState.leftIdentity", "link" : "zio\/prelude\/fx\/ComposeState$.html#leftIdentity[S1,S2]:zio.prelude.fx.ComposeState.Out[Unit,Unit,S1,S2,S1,S2]", "kind" : "implicit def"}, {"label" : "Compose", "tail" : "", "member" : "zio.prelude.fx.ComposeState.Compose", "link" : "zio\/prelude\/fx\/ComposeState$.html#Compose[S1,S2<:S3,S3,S4]extendsComposeState[S1,S2,S3,S4]withProductwithSerializable", "kind" : "final case class"}, {"label" : "RightIdentity", "tail" : "", "member" : "zio.prelude.fx.ComposeState.RightIdentity", "link" : "zio\/prelude\/fx\/ComposeState$.html#RightIdentity[S1,S2,S3]extendsComposeState[S1,S2,Unit,Unit]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LeftIdentity", "tail" : "", "member" : "zio.prelude.fx.ComposeState.LeftIdentity", "link" : "zio\/prelude\/fx\/ComposeState$.html#LeftIdentity[S1,S2]extendsComposeState[Unit,Unit,S1,S2]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Out", "tail" : "", "member" : "zio.prelude.fx.ComposeState.Out", "link" : "zio\/prelude\/fx\/ComposeState$.html#Out[S1,S2,S3,S4,In0,Out0]=zio.prelude.fx.ComposeState[S1,S2,S3,S4]{typeIn=In0;typeOut=Out0}", "kind" : "type"}, {"label" : "rightIdentity", "tail" : "(): Out[S1, S2, Unit, Unit, S1, S2]", "member" : "zio.prelude.fx.ComposeStateImplicits.rightIdentity", "link" : "zio\/prelude\/fx\/ComposeState$.html#rightIdentity[S1,S2]:zio.prelude.fx.ComposeState.Out[S1,S2,Unit,Unit,S1,S2]", "kind" : "implicit def"}, {"label" : "compose", "tail" : "(): Out[S1, S2, S3, S4, S1, S4]", "member" : "zio.prelude.fx.ComposeStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/ComposeState$.html#compose[S1,S2<:S3,S3,S4]:zio.prelude.fx.ComposeState.Out[S1,S2,S3,S4,S1,S4]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ComposeState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ComposeState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ComposeState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ComposeState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ComposeState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ComposeState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ComposeState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ComposeState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ComposeState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ComposeState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ComposeState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ComposeState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ComposeState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ComposeState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ComposeState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ComposeState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/fx\/ComposeState.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ComposeState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ComposeState.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ComposeState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ComposeState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ComposeState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ComposeState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ComposeState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ComposeState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ComposeState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ComposeState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ComposeState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ComposeState.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ComposeState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ComposeState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ComposeState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ComposeState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : "(left: (S1) => S2, right: (S3) => S4): (In) => Out", "member" : "zio.prelude.fx.ComposeState.compose", "link" : "zio\/prelude\/fx\/ComposeState.html#compose(left:S1=>S2,right:S3=>S4):ComposeState.this.In=>ComposeState.this.Out", "kind" : "abstract def"}, {"member" : "zio.prelude.fx.ComposeState.Out", "error" : "unsupported entity"}, {"member" : "zio.prelude.fx.ComposeState.In", "error" : "unsupported entity"}], "shortDescription" : "ComposeState describes the different ways that a state transition functionS1 => S2 and a state transition function S3 => S4 can be composed."}, {"name" : "zio.prelude.fx.ComposeStateImplicits", "trait" : "zio\/prelude\/fx\/ComposeStateImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "rightIdentity", "tail" : "(): Out[S1, S2, Unit, Unit, S1, S2]", "member" : "zio.prelude.fx.ComposeStateImplicits.rightIdentity", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#rightIdentity[S1,S2]:zio.prelude.fx.ComposeState.Out[S1,S2,Unit,Unit,S1,S2]", "kind" : "implicit def"}, {"label" : "compose", "tail" : "(): Out[S1, S2, S3, S4, S1, S4]", "member" : "zio.prelude.fx.ComposeStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#compose[S1,S2<:S3,S3,S4]:zio.prelude.fx.ComposeState.Out[S1,S2,S3,S4,S1,S4]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ComposeStateImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.fx.ComposeStateLowPriorityImplicits", "trait" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(): Out[S1, S2, S3, S4, S1, S4]", "member" : "zio.prelude.fx.ComposeStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#compose[S1,S2<:S3,S3,S4]:zio.prelude.fx.ComposeState.Out[S1,S2,S3,S4,S1,S4]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ComposeStateLowPriorityImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.fx.FoldState", "object" : "zio\/prelude\/fx\/FoldState$.html", "members_object" : [{"label" : "leftIdentity", "tail" : "(): Out[Unit, Unit, S1, S2, S1, S2, S1, S2]", "member" : "zio.prelude.fx.FoldState.leftIdentity", "link" : "zio\/prelude\/fx\/FoldState$.html#leftIdentity[S1,S2]:zio.prelude.fx.FoldState.Out[Unit,Unit,S1,S2,S1,S2,S1,S2]", "kind" : "implicit def"}, {"label" : "Compose", "tail" : "", "member" : "zio.prelude.fx.FoldState.Compose", "link" : "zio\/prelude\/fx\/FoldState$.html#Compose[S1,S2,S3]extendsFoldState[S1,S2,S1,S3,S2,S3]withProductwithSerializable", "kind" : "final case class"}, {"label" : "RightIdentity", "tail" : "", "member" : "zio.prelude.fx.FoldState.RightIdentity", "link" : "zio\/prelude\/fx\/FoldState$.html#RightIdentity[S1,S2]extendsFoldState[S1,S2,S1,S2,Unit,Unit]withProductwithSerializable", "kind" : "final case class"}, {"label" : "LeftIdentity", "tail" : "", "member" : "zio.prelude.fx.FoldState.LeftIdentity", "link" : "zio\/prelude\/fx\/FoldState$.html#LeftIdentity[S1,S2]extendsFoldState[Unit,Unit,S1,S2,S1,S2]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Out", "tail" : "", "member" : "zio.prelude.fx.FoldState.Out", "link" : "zio\/prelude\/fx\/FoldState$.html#Out[S1,S2,S3,S4,S5,S6,In0,Out0]=zio.prelude.fx.FoldState[S1,S2,S3,S4,S5,S6]{typeIn=In0;typeOut=Out0}", "kind" : "type"}, {"label" : "rightIdentity", "tail" : "(): Out[S1, S2, S1, S2, Unit, Unit, S1, S2]", "member" : "zio.prelude.fx.FoldStateImplicits.rightIdentity", "link" : "zio\/prelude\/fx\/FoldState$.html#rightIdentity[S1,S2]:zio.prelude.fx.FoldState.Out[S1,S2,S1,S2,Unit,Unit,S1,S2]", "kind" : "implicit def"}, {"label" : "compose", "tail" : "(): Out[S1, S2, S1, S3, S2, S3, S1, S3]", "member" : "zio.prelude.fx.FoldStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/FoldState$.html#compose[S1,S2,S3]:zio.prelude.fx.FoldState.Out[S1,S2,S1,S3,S2,S3,S1,S3]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/FoldState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/FoldState$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/FoldState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/FoldState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/FoldState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/FoldState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/FoldState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/FoldState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/FoldState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/FoldState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/FoldState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/FoldState$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/FoldState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/FoldState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/FoldState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/FoldState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/fx\/FoldState.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/FoldState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/FoldState.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/FoldState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/FoldState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/FoldState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/FoldState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/FoldState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/FoldState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/FoldState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/FoldState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/FoldState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/FoldState.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/FoldState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/FoldState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/FoldState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/FoldState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(self: (S1) => Either[E, S2], onFailure: (S3) => Either[E2, S4], onSuccess: (S5) => Either[E2, S6]): (In) => Either[E2, Out]", "member" : "zio.prelude.fx.FoldState.apply", "link" : "zio\/prelude\/fx\/FoldState.html#apply[E,E2](self:S1=>Either[E,S2],onFailure:S3=>Either[E2,S4],onSuccess:S5=>Either[E2,S6]):FoldState.this.In=>Either[E2,FoldState.this.Out]", "kind" : "abstract def"}, {"member" : "zio.prelude.fx.FoldState.Out", "error" : "unsupported entity"}, {"member" : "zio.prelude.fx.FoldState.In", "error" : "unsupported entity"}], "shortDescription" : "FoldState describes the different ways that a state transition functionS1 => S2 that can be fail can be composed with an error handler S3 => S4and a success handler S5 => S6."}, {"name" : "zio.prelude.fx.FoldStateImplicits", "trait" : "zio\/prelude\/fx\/FoldStateImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "rightIdentity", "tail" : "(): Out[S1, S2, S1, S2, Unit, Unit, S1, S2]", "member" : "zio.prelude.fx.FoldStateImplicits.rightIdentity", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#rightIdentity[S1,S2]:zio.prelude.fx.FoldState.Out[S1,S2,S1,S2,Unit,Unit,S1,S2]", "kind" : "implicit def"}, {"label" : "compose", "tail" : "(): Out[S1, S2, S1, S3, S2, S3, S1, S3]", "member" : "zio.prelude.fx.FoldStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#compose[S1,S2,S3]:zio.prelude.fx.FoldState.Out[S1,S2,S1,S3,S2,S3,S1,S3]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/FoldStateImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.fx.FoldStateLowPriorityImplicits", "trait" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(): Out[S1, S2, S1, S3, S2, S3, S1, S3]", "member" : "zio.prelude.fx.FoldStateLowPriorityImplicits.compose", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#compose[S1,S2,S3]:zio.prelude.fx.FoldState.Out[S1,S2,S1,S3,S2,S3,S1,S3]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/FoldStateLowPriorityImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.fx.ZPure", "shortDescription" : "ZPure[W, S1, S2, R, E, A] is a purely functional description of acomputation that requires an environment R and an initial state S1 andmay either fail with an E or succeed with an updated state S2 and an Aalong with in either case a log with entries of type W.", "object" : "zio\/prelude\/fx\/ZPure$.html", "members_class" : [{"label" : "unsandbox", "tail" : "(ev: <:<[E, Cause[E1]]): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.unsandbox", "link" : "zio\/prelude\/fx\/ZPure.html#unsandbox[E1](implicitev:E<:<zio.prelude.fx.Cause[E1]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "def"}, {"label" : "unit", "tail" : "(): ZPure[W, S1, S2, R, E, Unit]", "member" : "zio.prelude.fx.ZPure.unit", "link" : "zio\/prelude\/fx\/ZPure.html#unit:zio.prelude.fx.ZPure[W,S1,S2,R,E,Unit]", "kind" : "final def"}, {"label" : "toZIOWithAll", "tail" : "(s1: S1): ZIO[R, E, (Chunk[W], S2, A)]", "member" : "zio.prelude.fx.ZPure.toZIOWithAll", "link" : "zio\/prelude\/fx\/ZPure.html#toZIOWithAll(s1:S1):zio.ZIO[R,E,(zio.Chunk[W],S2,A)]", "kind" : "def"}, {"label" : "toZIOWithState", "tail" : "(s1: S1): ZIO[R, E, (S2, A)]", "member" : "zio.prelude.fx.ZPure.toZIOWithState", "link" : "zio\/prelude\/fx\/ZPure.html#toZIOWithState(s1:S1):zio.ZIO[R,E,(S2,A)]", "kind" : "def"}, {"label" : "toZIOWith", "tail" : "(s1: S1): ZIO[R, E, A]", "member" : "zio.prelude.fx.ZPure.toZIOWith", "link" : "zio\/prelude\/fx\/ZPure.html#toZIOWith(s1:S1):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "toZIO", "tail" : "(ev: <:<[Unit, S1]): ZIO[R, E, A]", "member" : "zio.prelude.fx.ZPure.toZIO", "link" : "zio\/prelude\/fx\/ZPure.html#toZIO(implicitev:Unit<:<S1):zio.ZIO[R,E,A]", "kind" : "def"}, {"label" : "someOrFailException", "tail" : "(ev: <:<[A, Option[B]], ev2: <:<[NoSuchElementException, E1]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.someOrFailException", "link" : "zio\/prelude\/fx\/ZPure.html#someOrFailException[B,E1>:E](implicitev:A<:<Option[B],implicitev2:NoSuchElementException<:<E1):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "someOrFail", "tail" : "(e: => E1)(ev: <:<[A, Option[B]]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.someOrFail", "link" : "zio\/prelude\/fx\/ZPure.html#someOrFail[B,E1>:E](e:=>E1)(implicitev:A<:<Option[B]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "someOrElse", "tail" : "(default: => B)(ev: <:<[A, Option[B]]): ZPure[W, S1, S2, R, E, B]", "member" : "zio.prelude.fx.ZPure.someOrElse", "link" : "zio\/prelude\/fx\/ZPure.html#someOrElse[B](default:=>B)(implicitev:A<:<Option[B]):zio.prelude.fx.ZPure[W,S1,S2,R,E,B]", "kind" : "final def"}, {"label" : "some", "tail" : "(ev: <:<[A, Option[B]]): ZPure[W, S1, S2, R, Option[E], B]", "member" : "zio.prelude.fx.ZPure.some", "link" : "zio\/prelude\/fx\/ZPure.html#some[B](implicitev:A<:<Option[B]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],B]", "kind" : "final def"}, {"label" : "sandbox", "tail" : "(): ZPure[W, S1, S2, R, Cause[E], A]", "member" : "zio.prelude.fx.ZPure.sandbox", "link" : "zio\/prelude\/fx\/ZPure.html#sandbox:zio.prelude.fx.ZPure[W,S1,S2,R,zio.prelude.fx.Cause[E],A]", "kind" : "final def"}, {"label" : "runValidation", "tail" : "(ev1: <:<[Unit, S1], ev2: <:<[Any, R]): ZValidation[W, E, A]", "member" : "zio.prelude.fx.ZPure.runValidation", "link" : "zio\/prelude\/fx\/ZPure.html#runValidation(implicitev1:Unit<:<S1,implicitev2:Any<:<R):zio.prelude.ZValidation[W,E,A]", "kind" : "final def"}, {"label" : "runState", "tail" : "(s: S1)(ev1: <:<[Any, R], ev2: <:<[E, Nothing]): S2", "member" : "zio.prelude.fx.ZPure.runState", "link" : "zio\/prelude\/fx\/ZPure.html#runState(s:S1)(implicitev1:Any<:<R,implicitev2:E<:<Nothing):S2", "kind" : "final def"}, {"label" : "runResult", "tail" : "(s: S1)(ev1: <:<[Any, R], ev2: <:<[E, Nothing]): A", "member" : "zio.prelude.fx.ZPure.runResult", "link" : "zio\/prelude\/fx\/ZPure.html#runResult(s:S1)(implicitev1:Any<:<R,implicitev2:E<:<Nothing):A", "kind" : "final def"}, {"label" : "runLog", "tail" : "(ev1: <:<[Unit, S1], ev2: <:<[Any, R], ev3: <:<[E, Nothing]): (Chunk[W], A)", "member" : "zio.prelude.fx.ZPure.runLog", "link" : "zio\/prelude\/fx\/ZPure.html#runLog(implicitev1:Unit<:<S1,implicitev2:Any<:<R,implicitev3:E<:<Nothing):(zio.Chunk[W],A)", "kind" : "final def"}, {"label" : "runEither", "tail" : "(ev1: <:<[Unit, S1], ev2: <:<[Any, R]): Either[E, A]", "member" : "zio.prelude.fx.ZPure.runEither", "link" : "zio\/prelude\/fx\/ZPure.html#runEither(implicitev1:Unit<:<S1,implicitev2:Any<:<R):Either[E,A]", "kind" : "final def"}, {"label" : "runAll", "tail" : "(s: S1)(ev: <:<[Any, R]): (Chunk[W], Either[Cause[E], (S2, A)])", "member" : "zio.prelude.fx.ZPure.runAll", "link" : "zio\/prelude\/fx\/ZPure.html#runAll(s:S1)(implicitev:Any<:<R):(zio.Chunk[W],Either[zio.prelude.fx.Cause[E],(S2,A)])", "kind" : "final def"}, {"label" : "run", "tail" : "(s: S1)(ev1: <:<[Any, R], ev2: <:<[E, Nothing]): (S2, A)", "member" : "zio.prelude.fx.ZPure.run", "link" : "zio\/prelude\/fx\/ZPure.html#run(s:S1)(implicitev1:Any<:<R,implicitev2:E<:<Nothing):(S2,A)", "kind" : "final def"}, {"label" : "run", "tail" : "(ev1: <:<[Unit, S1], ev2: <:<[Any, R], ev3: <:<[E, Nothing]): A", "member" : "zio.prelude.fx.ZPure.run", "link" : "zio\/prelude\/fx\/ZPure.html#run(implicitev1:Unit<:<S1,implicitev2:Any<:<R,implicitev3:E<:<Nothing):A", "kind" : "final def"}, {"label" : "rightOrFailWithException", "tail" : "(ev: <:<[A, Either[B, C]], ev2: <:<[E, E1]): ZPure[W, S1, S2, R, E1, C]", "member" : "zio.prelude.fx.ZPure.rightOrFailWithException", "link" : "zio\/prelude\/fx\/ZPure.html#rightOrFailWithException[B,C,E1>:NoSuchElementException](implicitev:A<:<Either[B,C],implicitev2:E<:<E1):zio.prelude.fx.ZPure[W,S1,S2,R,E1,C]", "kind" : "final def"}, {"label" : "rightOrFailWith", "tail" : "(e: (B) => E1)(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, E1, C]", "member" : "zio.prelude.fx.ZPure.rightOrFailWith", "link" : "zio\/prelude\/fx\/ZPure.html#rightOrFailWith[B,C,E1>:E](e:B=>E1)(implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,C]", "kind" : "final def"}, {"label" : "rightOrFail", "tail" : "(e: => E1)(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, E1, C]", "member" : "zio.prelude.fx.ZPure.rightOrFail", "link" : "zio\/prelude\/fx\/ZPure.html#rightOrFail[B,C,E1>:E](e:=>E1)(implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,C]", "kind" : "final def"}, {"label" : "right", "tail" : "(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, Option[E], C]", "member" : "zio.prelude.fx.ZPure.right", "link" : "zio\/prelude\/fx\/ZPure.html#right[B,C](implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],C]", "kind" : "final def"}, {"label" : "repeatWhileState", "tail" : "(f: (S2) => Boolean)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatWhileState", "link" : "zio\/prelude\/fx\/ZPure.html#repeatWhileState(f:S2=>Boolean)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "repeatWhileEquals", "tail" : "(a: => A1)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A1]", "member" : "zio.prelude.fx.ZPure.repeatWhileEquals", "link" : "zio\/prelude\/fx\/ZPure.html#repeatWhileEquals[A1>:A](a:=>A1)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A1]", "kind" : "final def"}, {"label" : "repeatWhile", "tail" : "(f: (A) => Boolean)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatWhile", "link" : "zio\/prelude\/fx\/ZPure.html#repeatWhile(f:A=>Boolean)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "repeatUntilStateEquals", "tail" : "(s: => S3)(ev: <:<[S2, S1]): ZPure[W, S1, S3, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatUntilStateEquals", "link" : "zio\/prelude\/fx\/ZPure.html#repeatUntilStateEquals[S3>:S2](s:=>S3)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S3,R,E,A]", "kind" : "final def"}, {"label" : "repeatUntilState", "tail" : "(f: (S2) => Boolean)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatUntilState", "link" : "zio\/prelude\/fx\/ZPure.html#repeatUntilState(f:S2=>Boolean)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "repeatUntilEquals", "tail" : "(a: => A1)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A1]", "member" : "zio.prelude.fx.ZPure.repeatUntilEquals", "link" : "zio\/prelude\/fx\/ZPure.html#repeatUntilEquals[A1>:A](a:=>A1)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A1]", "kind" : "final def"}, {"label" : "repeatUntil", "tail" : "(f: (A) => Boolean)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatUntil", "link" : "zio\/prelude\/fx\/ZPure.html#repeatUntil(f:A=>Boolean)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "repeatN", "tail" : "(n: Int)(ev: <:<[S2, S1]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.repeatN", "link" : "zio\/prelude\/fx\/ZPure.html#repeatN(n:Int)(implicitev:S2<:<S1):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "reject", "tail" : "(pf: PartialFunction[A, E1]): ZPure[W, S0, S3, R1, E1, A]", "member" : "zio.prelude.fx.ZPure.reject", "link" : "zio\/prelude\/fx\/ZPure.html#reject[S0<:S1,S3>:S2,R1<:R,E1>:E](pf:PartialFunction[A,E1]):zio.prelude.fx.ZPure[W,S0,S3,R1,E1,A]", "kind" : "final def"}, {"label" : "refineOrDieWith", "tail" : "(pf: PartialFunction[E, E1])(f: (E) => Throwable)(ev: CanFail[E]): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.refineOrDieWith", "link" : "zio\/prelude\/fx\/ZPure.html#refineOrDieWith[E1](pf:PartialFunction[E,E1])(f:E=>Throwable)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "final def"}, {"label" : "refineOrDie", "tail" : "(pf: PartialFunction[E, E1])(ev1: <:<[E, Throwable], ev2: CanFail[E]): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.refineOrDie", "link" : "zio\/prelude\/fx\/ZPure.html#refineOrDie[E1](pf:PartialFunction[E,E1])(implicitev1:E<:<Throwable,implicitev2:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "final def"}, {"label" : "provideState", "tail" : "(s: S1): ZPure[W, Any, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.provideState", "link" : "zio\/prelude\/fx\/ZPure.html#provideState(s:S1):zio.prelude.fx.ZPure[W,Any,S2,R,E,A]", "kind" : "final def"}, {"label" : "provideSome", "tail" : "(f: (R0) => R): ZPure[W, S1, S2, R0, E, A]", "member" : "zio.prelude.fx.ZPure.provideSome", "link" : "zio\/prelude\/fx\/ZPure.html#provideSome[R0](f:R0=>R):zio.prelude.fx.ZPure[W,S1,S2,R0,E,A]", "kind" : "final def"}, {"label" : "provide", "tail" : "(r: R)(ev: NeedsEnv[R]): ZPure[W, S1, S2, Any, E, A]", "member" : "zio.prelude.fx.ZPure.provide", "link" : "zio\/prelude\/fx\/ZPure.html#provide(r:R)(implicitev:zio.NeedsEnv[R]):zio.prelude.fx.ZPure[W,S1,S2,Any,E,A]", "kind" : "final def"}, {"label" : "orElseFallback", "tail" : "(a1: => A1, s3: => S3)(ev: CanFail[E]): ZPure[W, S1, S3, R, Nothing, A1]", "member" : "zio.prelude.fx.ZPure.orElseFallback", "link" : "zio\/prelude\/fx\/ZPure.html#orElseFallback[A1>:A,S3>:S2](a1:=>A1,s3:=>S3)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S3,R,Nothing,A1]", "kind" : "final def"}, {"label" : "orElseSucceed", "tail" : "(a1: => A1)(ev: CanFail[E]): ZPure[W, S1, Any, R, Nothing, A1]", "member" : "zio.prelude.fx.ZPure.orElseSucceed", "link" : "zio\/prelude\/fx\/ZPure.html#orElseSucceed[A1>:A](a1:=>A1)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,Any,R,Nothing,A1]", "kind" : "final def"}, {"label" : "orElseOptional", "tail" : "(that: => ZPure[W1, S0, S3, R1, Option[E1], A1])(ev: <:<[E, Option[E1]]): ZPure[W1, S0, S3, R1, Option[E1], A1]", "member" : "zio.prelude.fx.ZPure.orElseOptional", "link" : "zio\/prelude\/fx\/ZPure.html#orElseOptional[W1>:W,S0<:S1,S3>:S2,R1<:R,E1,A1>:A](that:=>zio.prelude.fx.ZPure[W1,S0,S3,R1,Option[E1],A1])(implicitev:E<:<Option[E1]):zio.prelude.fx.ZPure[W1,S0,S3,R1,Option[E1],A1]", "kind" : "final def"}, {"label" : "orElseFail", "tail" : "(e1: => E1)(ev: CanFail[E]): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.orElseFail", "link" : "zio\/prelude\/fx\/ZPure.html#orElseFail[E1](e1:=>E1)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "final def"}, {"label" : "orElseEither", "tail" : "(that: => ZPure[W1, S0, S3, R1, E1, B])(ev: CanFail[E]): ZPure[W1, S0, S3, R1, E1, Either[A, B]]", "member" : "zio.prelude.fx.ZPure.orElseEither", "link" : "zio\/prelude\/fx\/ZPure.html#orElseEither[W1>:W,S0<:S1,S3>:S2,R1<:R,E1,B](that:=>zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,B])(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => ZPure[W1, S0, S3, R1, E1, A1])(ev: CanFail[E]): ZPure[W1, S0, S3, R1, E1, A1]", "member" : "zio.prelude.fx.ZPure.orElse", "link" : "zio\/prelude\/fx\/ZPure.html#orElse[W1>:W,S0<:S1,S3>:S2,R1<:R,E1,A1>:A](that:=>zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1])(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1]", "kind" : "final def"}, {"label" : "none", "tail" : "(ev: <:<[A, Option[B]]): ZPure[W, S1, S2, R, Option[E], Unit]", "member" : "zio.prelude.fx.ZPure.none", "link" : "zio\/prelude\/fx\/ZPure.html#none[B](implicitev:A<:<Option[B]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],Unit]", "kind" : "final def"}, {"label" : "negate", "tail" : "(ev: <:<[A, Boolean]): ZPure[W, S1, S2, R, E, Boolean]", "member" : "zio.prelude.fx.ZPure.negate", "link" : "zio\/prelude\/fx\/ZPure.html#negate(implicitev:A<:<Boolean):zio.prelude.fx.ZPure[W,S1,S2,R,E,Boolean]", "kind" : "final def"}, {"label" : "mapState", "tail" : "(f: (S2) => S3): ZPure[W, S1, S3, R, E, A]", "member" : "zio.prelude.fx.ZPure.mapState", "link" : "zio\/prelude\/fx\/ZPure.html#mapState[S3](f:S2=>S3):zio.prelude.fx.ZPure[W,S1,S3,R,E,A]", "kind" : "final def"}, {"label" : "mapErrorCause", "tail" : "(f: (Cause[E]) => Cause[E2]): ZPure[W, S1, S2, R, E2, A]", "member" : "zio.prelude.fx.ZPure.mapErrorCause", "link" : "zio\/prelude\/fx\/ZPure.html#mapErrorCause[E2](f:zio.prelude.fx.Cause[E]=>zio.prelude.fx.Cause[E2]):zio.prelude.fx.ZPure[W,S1,S2,R,E2,A]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1)(ev: CanFail[E]): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.mapError", "link" : "zio\/prelude\/fx\/ZPure.html#mapError[E1](f:E=>E1)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): ZPure[W, S1, S2, R, E, B]", "member" : "zio.prelude.fx.ZPure.map", "link" : "zio\/prelude\/fx\/ZPure.html#map[B](f:A=>B):zio.prelude.fx.ZPure[W,S1,S2,R,E,B]", "kind" : "final def"}, {"label" : "log", "tail" : "(w: W1): ZPure[W1, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.log", "link" : "zio\/prelude\/fx\/ZPure.html#log[W1>:W](w:W1):zio.prelude.fx.ZPure[W1,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "leftOrFailWithException", "tail" : "(ev: <:<[A, Either[B, C]], ev2: <:<[E, E1]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.leftOrFailWithException", "link" : "zio\/prelude\/fx\/ZPure.html#leftOrFailWithException[B,C,E1>:NoSuchElementException](implicitev:A<:<Either[B,C],implicitev2:E<:<E1):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "leftOrFailWith", "tail" : "(e: (C) => E1)(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.leftOrFailWith", "link" : "zio\/prelude\/fx\/ZPure.html#leftOrFailWith[B,C,E1>:E](e:C=>E1)(implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "leftOrFail", "tail" : "(e: => E1)(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.leftOrFail", "link" : "zio\/prelude\/fx\/ZPure.html#leftOrFail[B,C,E1>:E](e:=>E1)(implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "left", "tail" : "(ev: <:<[A, Either[B, C]]): ZPure[W, S1, S2, R, Option[E], B]", "member" : "zio.prelude.fx.ZPure.left", "link" : "zio\/prelude\/fx\/ZPure.html#left[B,C](implicitev:A<:<Either[B,C]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],B]", "kind" : "final def"}, {"label" : "keepLogOnError", "tail" : "(): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.keepLogOnError", "link" : "zio\/prelude\/fx\/ZPure.html#keepLogOnError:zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "join", "tail" : "(that: ZPure[W1, S0, S3, R1, E1, A1]): ZPure[W1, S0, S3, Either[R, R1], E1, A1]", "member" : "zio.prelude.fx.ZPure.join", "link" : "zio\/prelude\/fx\/ZPure.html#join[W1>:W,S0<:S1,S3>:S2,R1,B,E1>:E,A1>:A](that:zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1]):zio.prelude.fx.ZPure[W1,S0,S3,Either[R,R1],E1,A1]", "kind" : "final def"}, {"label" : "head", "tail" : "(ev: <:<[A, List[B]]): ZPure[W, S1, S2, R, Option[E], B]", "member" : "zio.prelude.fx.ZPure.head", "link" : "zio\/prelude\/fx\/ZPure.html#head[B](implicitev:A<:<List[B]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],B]", "kind" : "final def"}, {"label" : "getState", "tail" : "(): ZPure[W, S1, S2, R, E, (S2, A)]", "member" : "zio.prelude.fx.ZPure.getState", "link" : "zio\/prelude\/fx\/ZPure.html#getState:zio.prelude.fx.ZPure[W,S1,S2,R,E,(S2,A)]", "kind" : "final def"}, {"label" : "fold", "tail" : "(failure: (E) => B, success: (A) => B)(ev: CanFail[E]): ZPure[W, S3, S3, R, Nothing, B]", "member" : "zio.prelude.fx.ZPure.fold", "link" : "zio\/prelude\/fx\/ZPure.html#fold[S3>:S2<:S1,B](failure:E=>B,success:A=>B)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S3,S3,R,Nothing,B]", "kind" : "final def"}, {"label" : "flip", "tail" : "(): ZPure[W, S3, S3, R, A, E]", "member" : "zio.prelude.fx.ZPure.flip", "link" : "zio\/prelude\/fx\/ZPure.html#flip[S3>:S2<:S1]:zio.prelude.fx.ZPure[W,S3,S3,R,A,E]", "kind" : "final def"}, {"label" : "filterOrFail", "tail" : "(p: (A) => Boolean)(e: => E1): ZPure[W, S1, S2, R, E1, A]", "member" : "zio.prelude.fx.ZPure.filterOrFail", "link" : "zio\/prelude\/fx\/ZPure.html#filterOrFail[E1>:E](p:A=>Boolean)(e:=>E1):zio.prelude.fx.ZPure[W,S1,S2,R,E1,A]", "kind" : "final def"}, {"label" : "either", "tail" : "(ev: CanFail[E]): ZPure[W, S3, S3, R, Nothing, Either[E, A]]", "member" : "zio.prelude.fx.ZPure.either", "link" : "zio\/prelude\/fx\/ZPure.html#either[S3>:S2<:S1](implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S3,S3,R,Nothing,Either[E,A]]", "kind" : "final def"}, {"label" : "contramapState", "tail" : "(f: (S0) => S1): ZPure[W, S0, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.contramapState", "link" : "zio\/prelude\/fx\/ZPure.html#contramapState[S0](f:S0=>S1):zio.prelude.fx.ZPure[W,S0,S2,R,E,A]", "kind" : "final def"}, {"label" : "collect", "tail" : "(e: => E1)(pf: PartialFunction[A, B]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.collect", "link" : "zio\/prelude\/fx\/ZPure.html#collect[E1>:E,B](e:=>E1)(pf:PartialFunction[A,B]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "clearLogOnError", "tail" : "(): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.clearLogOnError", "link" : "zio\/prelude\/fx\/ZPure.html#clearLogOnError:zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (E) => E1, g: (A) => B)(ev: CanFail[E]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.bimap", "link" : "zio\/prelude\/fx\/ZPure.html#bimap[E1,B](f:E=>E1,g:A=>B)(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "asState", "tail" : "(s: S3): ZPure[W, S1, S3, R, E, A]", "member" : "zio.prelude.fx.ZPure.asState", "link" : "zio\/prelude\/fx\/ZPure.html#asState[S3](s:S3):zio.prelude.fx.ZPure[W,S1,S3,R,E,A]", "kind" : "final def"}, {"label" : "asSomeError", "tail" : "(ev: CanFail[E]): ZPure[W, S1, S2, R, Option[E], A]", "member" : "zio.prelude.fx.ZPure.asSomeError", "link" : "zio\/prelude\/fx\/ZPure.html#asSomeError(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W,S1,S2,R,Option[E],A]", "kind" : "final def"}, {"label" : "asSome", "tail" : "(): ZPure[W, S1, S2, R, E, Option[A]]", "member" : "zio.prelude.fx.ZPure.asSome", "link" : "zio\/prelude\/fx\/ZPure.html#asSome:zio.prelude.fx.ZPure[W,S1,S2,R,E,Option[A]]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: => B): ZPure[W, S1, S2, R, E, B]", "member" : "zio.prelude.fx.ZPure.as", "link" : "zio\/prelude\/fx\/ZPure.html#as[B](b:=>B):zio.prelude.fx.ZPure[W,S1,S2,R,E,B]", "kind" : "final def"}, {"label" : "absolve", "tail" : "(ev: <:<[A, Either[E1, B]]): ZPure[W, S1, S2, R, E1, B]", "member" : "zio.prelude.fx.ZPure.absolve", "link" : "zio\/prelude\/fx\/ZPure.html#absolve[E1>:E,B](implicitev:A<:<Either[E1,B]):zio.prelude.fx.ZPure[W,S1,S2,R,E1,B]", "kind" : "final def"}, {"label" : "|||", "tail" : "(that: ZPure[W1, S0, S3, R1, E1, A1]): ZPure[W1, S0, S3, Either[R, R1], E1, A1]", "member" : "zio.prelude.fx.ZPure.|||", "link" : "zio\/prelude\/fx\/ZPure.html#|||[W1>:W,S0<:S1,S3>:S2,R1,B,E1>:E,A1>:A](that:zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1]):zio.prelude.fx.ZPure[W1,S0,S3,Either[R,R1],E1,A1]", "kind" : "final def"}, {"label" : "??", "tail" : "(w: W1): ZPure[W1, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.??", "link" : "zio\/prelude\/fx\/ZPure.html#??[W1>:W](w:W1):zio.prelude.fx.ZPure[W1,S1,S2,R,E,A]", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => ZPure[W1, S0, S3, R1, E1, A1])(ev: CanFail[E]): ZPure[W1, S0, S3, R1, E1, A1]", "member" : "zio.prelude.fx.ZPure.<>", "link" : "zio\/prelude\/fx\/ZPure.html#<>[W1>:W,S0<:S1,S3>:S2,R1<:R,E1,A1>:A](that:=>zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1])(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,A1]", "kind" : "final def"}, {"label" : "<+>", "tail" : "(that: => ZPure[W1, S0, S3, R1, E1, B])(ev: CanFail[E]): ZPure[W1, S0, S3, R1, E1, Either[A, B]]", "member" : "zio.prelude.fx.ZPure.<+>", "link" : "zio\/prelude\/fx\/ZPure.html#<+>[W1>:W,S0<:S1,S3>:S2,R1<:R,E1,B](that:=>zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,B])(implicitev:zio.CanFail[E]):zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,Either[A,B]]", "kind" : "final def"}, {"label" : "+++", "tail" : "(that: ZPure[W1, S0, S3, R1, E1, B]): ZPure[W1, S0, S3, Either[R, R1], E1, Either[A, B]]", "member" : "zio.prelude.fx.ZPure.+++", "link" : "zio\/prelude\/fx\/ZPure.html#+++[W1>:W,S0<:S1,S3>:S2,R1,B,E1>:E](that:zio.prelude.fx.ZPure[W1,S0,S3,R1,E1,B]):zio.prelude.fx.ZPure[W1,S0,S3,Either[R,R1],E1,Either[A,B]]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ZPure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ZPure.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ZPure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ZPure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ZPure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ZPure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ZPure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ZPure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ZPure.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ZPure.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ZPure.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ZPure.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ZPure.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ZPure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ZPure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ZPure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tag", "tail" : "(): Int", "member" : "zio.prelude.fx.ZPure.tag", "link" : "zio\/prelude\/fx\/ZPure.html#tag:Int", "kind" : "abstract def"}], "members_object" : [{"label" : "FlagType", "tail" : "", "member" : "zio.prelude.fx.ZPure.FlagType", "link" : "zio\/prelude\/fx\/ZPure$.html#FlagType", "kind" : "object"}, {"label" : "FlagType", "tail" : "", "member" : "zio.prelude.fx.ZPure.FlagType", "link" : "zio\/prelude\/fx\/ZPure$.html#FlagTypeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "ZPureWithFilterOps", "tail" : "", "member" : "zio.prelude.fx.ZPure.ZPureWithFilterOps", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureWithFilterOps[W,S1,S2,R,E,A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "ZPureRefineToOrDieOps", "tail" : "", "member" : "zio.prelude.fx.ZPure.ZPureRefineToOrDieOps", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureRefineToOrDieOps[W,S1,S2,R,E<:Throwable,A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "ZPureIdentityFlatten", "tail" : "(): IdentityFlatten[[+A]ZPure[W, S, S, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureIdentityFlatten", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureIdentityFlatten[W,S,R,E]:zio.prelude.IdentityFlatten[[+A]zio.prelude.fx.ZPure[W,S,S,R,E,A]]", "kind" : "implicit def"}, {"label" : "ZPureIdentityBoth", "tail" : "(): IdentityBoth[[+A]ZPure[W, S, S, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureIdentityBoth", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureIdentityBoth[W,S,R,E]:zio.prelude.IdentityBoth[[+A]zio.prelude.fx.ZPure[W,S,S,R,E,A]]", "kind" : "implicit def"}, {"label" : "ZPureCovariant", "tail" : "(): Covariant[[+A]ZPure[W, S1, S2, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureCovariant", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureCovariant[W,S1,S2,R,E]:zio.prelude.Covariant[[+A]zio.prelude.fx.ZPure[W,S1,S2,R,E,A]]", "kind" : "implicit def"}, {"label" : "ZPureCustomAssociativeBothSyntax", "tail" : "(): CustomAssociativeBothSyntax[ZPure[W, S1, S2, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureCustomAssociativeBothSyntax", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureCustomAssociativeBothSyntax[W,S1,S2,R,E,A]:zio.prelude.CustomAssociativeBothSyntax[zio.prelude.fx.ZPure[W,S1,S2,R,E,A]]", "kind" : "implicit def"}, {"label" : "ZPureCustomAssociativeFlattenSyntax", "tail" : "(): CustomAssociativeFlattenSyntax[ZPure[W, S1, S2, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureCustomAssociativeFlattenSyntax", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureCustomAssociativeFlattenSyntax[W,S1,S2,R,E,A]:zio.prelude.CustomAssociativeFlattenSyntax[zio.prelude.fx.ZPure[W,S1,S2,R,E,A]]", "kind" : "implicit def"}, {"label" : "ZPureCustomCovariantSyntax", "tail" : "(): CustomCovariantSyntax[ZPure[W, S1, S2, R, E, A]]", "member" : "zio.prelude.fx.ZPure.ZPureCustomCovariantSyntax", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureCustomCovariantSyntax[W,S1,S2,R,E,A]:zio.prelude.CustomCovariantSyntax[zio.prelude.fx.ZPure[W,S1,S2,R,E,A]]", "kind" : "implicit def"}, {"label" : "CanFilter", "tail" : "", "member" : "zio.prelude.fx.ZPure.CanFilter", "link" : "zio\/prelude\/fx\/ZPure$.html#CanFilter", "kind" : "object"}, {"label" : "CanFilter", "tail" : "", "member" : "zio.prelude.fx.ZPure.CanFilter", "link" : "zio\/prelude\/fx\/ZPure$.html#CanFilter[+E]extendsAnyRef", "kind" : "abstract class"}, {"label" : "AccessMPartiallyApplied", "tail" : "", "member" : "zio.prelude.fx.ZPure.AccessMPartiallyApplied", "link" : "zio\/prelude\/fx\/ZPure$.html#AccessMPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "AccessPartiallyApplied", "tail" : "", "member" : "zio.prelude.fx.ZPure.AccessPartiallyApplied", "link" : "zio\/prelude\/fx\/ZPure$.html#AccessPartiallyApplied[R]extendsAnyVal", "kind" : "final class"}, {"label" : "ZPureSyntax", "tail" : "", "member" : "zio.prelude.fx.ZPure.ZPureSyntax", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureSyntax[+W,S1,S2,-R,+E,+A]extendsAnyVal", "kind" : "implicit final class"}, {"label" : "update", "tail" : "(f: (S1) => S2): ZPure[Nothing, S1, S2, Any, Nothing, Unit]", "member" : "zio.prelude.fx.ZPure.update", "link" : "zio\/prelude\/fx\/ZPure$.html#update[S1,S2](f:S1=>S2):zio.prelude.fx.ZPure[Nothing,S1,S2,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "unit", "tail" : ": ZPure[Nothing, Unit, Unit, Any, Nothing, Unit]", "member" : "zio.prelude.fx.ZPure.unit", "link" : "zio\/prelude\/fx\/ZPure$.html#unit:zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,Nothing,Unit]", "kind" : "val"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1]): ZPure[W, S, S, R, E, (A0, A1)]", "member" : "zio.prelude.fx.ZPure.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(left: ZPure[W, S, S, R, E, A], right: ZPure[W, S, S, R, E, B]): ZPure[W, S, S, R, E, (A, B)]", "member" : "zio.prelude.fx.ZPure.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A,B](left:zio.prelude.fx.ZPure[W,S,S,R,E,A],right:zio.prelude.fx.ZPure[W,S,S,R,E,B]):zio.prelude.fx.ZPure[W,S,S,R,E,(A,B)]", "kind" : "def"}, {"label" : "suspend", "tail" : "(pure: => ZPure[W, S1, S2, R, E, A]): ZPure[W, S1, S2, R, E, A]", "member" : "zio.prelude.fx.ZPure.suspend", "link" : "zio\/prelude\/fx\/ZPure$.html#suspend[W,S1,S2,R,E,A](pure:=>zio.prelude.fx.ZPure[W,S1,S2,R,E,A]):zio.prelude.fx.ZPure[W,S1,S2,R,E,A]", "kind" : "def"}, {"label" : "succeed", "tail" : "(a: A): ZPure[Nothing, Unit, Unit, Any, Nothing, A]", "member" : "zio.prelude.fx.ZPure.succeed", "link" : "zio\/prelude\/fx\/ZPure$.html#succeed[A](a:A):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,Nothing,A]", "kind" : "def"}, {"label" : "set", "tail" : "(s: S): ZPure[Nothing, Any, S, Any, Nothing, Unit]", "member" : "zio.prelude.fx.ZPure.set", "link" : "zio\/prelude\/fx\/ZPure$.html#set[S](s:S):zio.prelude.fx.ZPure[Nothing,Any,S,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "second", "tail" : "(): ZPure[Nothing, Unit, Unit, (Any, A), Nothing, A]", "member" : "zio.prelude.fx.ZPure.second", "link" : "zio\/prelude\/fx\/ZPure$.html#second[A]:zio.prelude.fx.ZPure[Nothing,Unit,Unit,(Any,A),Nothing,A]", "kind" : "def"}, {"label" : "modifyEither", "tail" : "(f: (S1) => Either[E, (A, S2)]): ZPure[Nothing, S1, S2, Any, E, A]", "member" : "zio.prelude.fx.ZPure.modifyEither", "link" : "zio\/prelude\/fx\/ZPure$.html#modifyEither[S1,S2,E,A](f:S1=>Either[E,(A,S2)]):zio.prelude.fx.ZPure[Nothing,S1,S2,Any,E,A]", "kind" : "def"}, {"label" : "modify", "tail" : "(f: (S1) => (A, S2)): ZPure[Nothing, S1, S2, Any, Nothing, A]", "member" : "zio.prelude.fx.ZPure.modify", "link" : "zio\/prelude\/fx\/ZPure$.html#modify[S1,S2,A](f:S1=>(A,S2)):zio.prelude.fx.ZPure[Nothing,S1,S2,Any,Nothing,A]", "kind" : "def"}, {"label" : "mapN", "tail" : "(left: ZPure[W, S, S, R, E, A], right: ZPure[W, S, S, R, E, B])(f: (A, B) => C): ZPure[W, S, S, R, E, C]", "member" : "zio.prelude.fx.ZPure.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A,B,C](left:zio.prelude.fx.ZPure[W,S,S,R,E,A],right:zio.prelude.fx.ZPure[W,S,S,R,E,B])(f:(A,B)=>C):zio.prelude.fx.ZPure[W,S,S,R,E,C]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(left: ZPure[W, S, S, R, E, A], right: ZPure[W, S, S, R, E, B])(f: (A, B) => C): ZPure[W, S, S, R, E, C]", "member" : "zio.prelude.fx.ZPure.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A,B,C](left:zio.prelude.fx.ZPure[W,S,S,R,E,A],right:zio.prelude.fx.ZPure[W,S,S,R,E,B])(f:(A,B)=>C):zio.prelude.fx.ZPure[W,S,S,R,E,C]", "kind" : "def"}, {"label" : "log", "tail" : "(w: W): ZPure[W, Unit, Unit, Any, Nothing, Unit]", "member" : "zio.prelude.fx.ZPure.log", "link" : "zio\/prelude\/fx\/ZPure$.html#log[W](w:W):zio.prelude.fx.ZPure[W,Unit,Unit,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "halt0", "tail" : "(cause: Cause[E]): ZPure[Nothing, Any, Nothing, Any, E, Nothing]", "member" : "zio.prelude.fx.ZPure.halt0", "link" : "zio\/prelude\/fx\/ZPure$.html#halt0[E](cause:zio.prelude.fx.Cause[E]):zio.prelude.fx.ZPure[Nothing,Any,Nothing,Any,E,Nothing]", "kind" : "def"}, {"label" : "halt", "tail" : "(cause: Cause[E]): ZPure[Nothing, Unit, Unit, Any, E, Nothing]", "member" : "zio.prelude.fx.ZPure.halt", "link" : "zio\/prelude\/fx\/ZPure$.html#halt[E](cause:zio.prelude.fx.Cause[E]):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,E,Nothing]", "kind" : "def"}, {"label" : "get", "tail" : "(): ZPure[Nothing, S, S, Any, Nothing, S]", "member" : "zio.prelude.fx.ZPure.get", "link" : "zio\/prelude\/fx\/ZPure$.html#get[S]:zio.prelude.fx.ZPure[Nothing,S,S,Any,Nothing,S]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A]): ZPure[Nothing, Unit, Unit, Any, Throwable, A]", "member" : "zio.prelude.fx.ZPure.fromTry", "link" : "zio\/prelude\/fx\/ZPure$.html#fromTry[A](t:scala.util.Try[A]):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,Throwable,A]", "kind" : "def"}, {"label" : "fromPredicateWith", "tail" : "(error: => E)(value: A)(f: (A) => Boolean): Validation[E, A]", "member" : "zio.prelude.fx.ZPure.fromPredicateWith", "link" : "zio\/prelude\/fx\/ZPure$.html#fromPredicateWith[E,A](error:=>E)(value:A)(f:A=>Boolean):zio.prelude.Validation[E,A]", "kind" : "def"}, {"label" : "fromPredicate", "tail" : "(value: A)(f: (A) => Boolean): Validation[None.type, A]", "member" : "zio.prelude.fx.ZPure.fromPredicate", "link" : "zio\/prelude\/fx\/ZPure$.html#fromPredicate[A](value:A)(f:A=>Boolean):zio.prelude.Validation[None.type,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(option: Option[A]): ZPure[Nothing, Unit, Unit, Any, Unit, A]", "member" : "zio.prelude.fx.ZPure.fromOption", "link" : "zio\/prelude\/fx\/ZPure$.html#fromOption[A](option:Option[A]):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,Unit,A]", "kind" : "def"}, {"label" : "fromFunction", "tail" : "(f: (R) => A): ZPure[Nothing, Unit, Unit, R, Nothing, A]", "member" : "zio.prelude.fx.ZPure.fromFunction", "link" : "zio\/prelude\/fx\/ZPure$.html#fromFunction[R,A](f:R=>A):zio.prelude.fx.ZPure[Nothing,Unit,Unit,R,Nothing,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(either: Either[L, R]): ZPure[Nothing, Unit, Unit, Any, L, R]", "member" : "zio.prelude.fx.ZPure.fromEither", "link" : "zio\/prelude\/fx\/ZPure$.html#fromEither[L,R](either:Either[L,R]):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,L,R]", "kind" : "def"}, {"label" : "forEach", "tail" : "(fa: F[A])(f: (A) => ZPure[W, S, S, R, E, B])(arg0: ForEach[F]): ZPure[W, S, S, R, E, F[B]]", "member" : "zio.prelude.fx.ZPure.forEach", "link" : "zio\/prelude\/fx\/ZPure$.html#forEach[F[+_],W,S,R,E,A,B](fa:F[A])(f:A=>zio.prelude.fx.ZPure[W,S,S,R,E,B])(implicitevidence$2:zio.prelude.ForEach[F]):zio.prelude.fx.ZPure[W,S,S,R,E,F[B]]", "kind" : "def"}, {"label" : "first", "tail" : "(): ZPure[Nothing, Unit, Unit, (A, Any), Nothing, A]", "member" : "zio.prelude.fx.ZPure.first", "link" : "zio\/prelude\/fx\/ZPure$.html#first[A]:zio.prelude.fx.ZPure[Nothing,Unit,Unit,(A,Any),Nothing,A]", "kind" : "def"}, {"label" : "fail0", "tail" : "(e: E): ZPure[Nothing, Any, Nothing, Any, E, Nothing]", "member" : "zio.prelude.fx.ZPure.fail0", "link" : "zio\/prelude\/fx\/ZPure$.html#fail0[E](e:E):zio.prelude.fx.ZPure[Nothing,Any,Nothing,Any,E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(e: E): ZPure[Nothing, Unit, Unit, Any, E, Nothing]", "member" : "zio.prelude.fx.ZPure.fail", "link" : "zio\/prelude\/fx\/ZPure$.html#fail[E](e:E):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,E,Nothing]", "kind" : "def"}, {"label" : "environment", "tail" : "(): ZPure[Nothing, Unit, Unit, R, Nothing, R]", "member" : "zio.prelude.fx.ZPure.environment", "link" : "zio\/prelude\/fx\/ZPure$.html#environment[R]:zio.prelude.fx.ZPure[Nothing,Unit,Unit,R,Nothing,R]", "kind" : "def"}, {"label" : "const", "tail" : "(): ZPure[Nothing, S, S, Any, Nothing, Unit]", "member" : "zio.prelude.fx.ZPure.const", "link" : "zio\/prelude\/fx\/ZPure$.html#const[S]:zio.prelude.fx.ZPure[Nothing,S,S,Any,Nothing,Unit]", "kind" : "def"}, {"label" : "collectAll", "tail" : "(fa: F[ZPure[W, S, S, R, E, A]])(arg0: ForEach[F]): ZPure[W, S, S, R, E, F[A]]", "member" : "zio.prelude.fx.ZPure.collectAll", "link" : "zio\/prelude\/fx\/ZPure$.html#collectAll[F[+_],W,S,R,E,A](fa:F[zio.prelude.fx.ZPure[W,S,S,R,E,A]])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.fx.ZPure[W,S,S,R,E,F[A]]", "kind" : "def"}, {"label" : "attempt", "tail" : "(a: => A): ZPure[Nothing, Unit, Unit, Any, Throwable, A]", "member" : "zio.prelude.fx.ZPure.attempt", "link" : "zio\/prelude\/fx\/ZPure$.html#attempt[A](a:=>A):zio.prelude.fx.ZPure[Nothing,Unit,Unit,Any,Throwable,A]", "kind" : "def"}, {"label" : "accessM", "tail" : "(): AccessMPartiallyApplied[R]", "member" : "zio.prelude.fx.ZPure.accessM", "link" : "zio\/prelude\/fx\/ZPure$.html#accessM[R]:zio.prelude.fx.ZPure.AccessMPartiallyApplied[R]", "kind" : "def"}, {"label" : "access", "tail" : "(): AccessPartiallyApplied[R]", "member" : "zio.prelude.fx.ZPure.access", "link" : "zio\/prelude\/fx\/ZPure$.html#access[R]:zio.prelude.fx.ZPure.AccessPartiallyApplied[R]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3]): ZPure[W, S, S, R, E, (A0, A1, A2, A3)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2,A3](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2]): ZPure[W, S, S, R, E, (A0, A1, A2)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPure$.html#tupledPar[W,S,R,E,A0,A1,A2](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3,A4](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3]): ZPure[W, S, S, R, E, (A0, A1, A2, A3)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2,A3](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2]): ZPure[W, S, S, R, E, (A0, A1, A2)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPure$.html#tupled[W,S,R,E,A0,A1,A2](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5])(f: (A0, A1, A2, A3, A4, A5) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5])(f:(A0,A1,A2,A3,A4,A5)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4])(f: (A0, A1, A2, A3, A4) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4])(f:(A0,A1,A2,A3,A4)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3])(f: (A0, A1, A2, A3) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,A3,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3])(f:(A0,A1,A2,A3)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2])(f: (A0, A1, A2) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapParN[W,S,R,E,A0,A1,A2,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2])(f:(A0,A1,A2)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5])(f: (A0, A1, A2, A3, A4, A5) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5])(f:(A0,A1,A2,A3,A4,A5)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4])(f: (A0, A1, A2, A3, A4) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4])(f:(A0,A1,A2,A3,A4)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3])(f: (A0, A1, A2, A3) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,A3,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3])(f:(A0,A1,A2,A3)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2])(f: (A0, A1, A2) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPure$.html#mapN[W,S,R,E,A0,A1,A2,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2])(f:(A0,A1,A2)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "ZPureCommutativeBoth", "tail" : "(): CommutativeBoth[[+A]ZPure[W, S, S, R, E, A]]", "member" : "zio.prelude.fx.ZPureLowPriorityImplicits.ZPureCommutativeBoth", "link" : "zio\/prelude\/fx\/ZPure$.html#ZPureCommutativeBoth[W,S,R,E]:zio.prelude.CommutativeBoth[[+A]zio.prelude.fx.ZPure[W,S,S,R,E,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ZPure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ZPure$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ZPure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ZPure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ZPure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ZPure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ZPure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ZPure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ZPure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ZPure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ZPure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ZPure$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ZPure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ZPure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ZPure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ZPure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/fx\/ZPure.html", "kind" : "class"}, {"name" : "zio.prelude.fx.ZPureArities", "trait" : "zio\/prelude\/fx\/ZPureArities.html", "kind" : "trait", "members_trait" : [{"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5,A6](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4,A5](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3,A4](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3]): ZPure[W, S, S, R, E, (A0, A1, A2, A3)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2,A3](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupledPar", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2]): ZPure[W, S, S, R, E, (A0, A1, A2)]", "member" : "zio.prelude.fx.ZPureArities.tupledPar", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupledPar[W,S,R,E,A0,A1,A2](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5,A6](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4,A5](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4]): ZPure[W, S, S, R, E, (A0, A1, A2, A3, A4)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3,A4](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3]): ZPure[W, S, S, R, E, (A0, A1, A2, A3)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2,A3](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupled", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2]): ZPure[W, S, S, R, E, (A0, A1, A2)]", "member" : "zio.prelude.fx.ZPureArities.tupled", "link" : "zio\/prelude\/fx\/ZPureArities.html#tupled[W,S,R,E,A0,A1,A2](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2]):zio.prelude.fx.ZPure[W,S,S,R,E,(A0,A1,A2)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5])(f: (A0, A1, A2, A3, A4, A5) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,A5,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5])(f:(A0,A1,A2,A3,A4,A5)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4])(f: (A0, A1, A2, A3, A4) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,A4,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4])(f:(A0,A1,A2,A3,A4)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3])(f: (A0, A1, A2, A3) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,A3,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3])(f:(A0,A1,A2,A3)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2])(f: (A0, A1, A2) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapParN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapParN[W,S,R,E,A0,A1,A2,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2])(f:(A0,A1,A2)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20], zPure22: ZPure[W, S, S, R, E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20],zPure22:zio.prelude.fx.ZPure[W,S,S,R,E,A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19], zPure21: ZPure[W, S, S, R, E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19],zPure21:zio.prelude.fx.ZPure[W,S,S,R,E,A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18], zPure20: ZPure[W, S, S, R, E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18],zPure20:zio.prelude.fx.ZPure[W,S,S,R,E,A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17], zPure19: ZPure[W, S, S, R, E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17],zPure19:zio.prelude.fx.ZPure[W,S,S,R,E,A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16], zPure18: ZPure[W, S, S, R, E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16],zPure18:zio.prelude.fx.ZPure[W,S,S,R,E,A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15], zPure17: ZPure[W, S, S, R, E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15],zPure17:zio.prelude.fx.ZPure[W,S,S,R,E,A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14], zPure16: ZPure[W, S, S, R, E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14],zPure16:zio.prelude.fx.ZPure[W,S,S,R,E,A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13], zPure15: ZPure[W, S, S, R, E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13],zPure15:zio.prelude.fx.ZPure[W,S,S,R,E,A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12], zPure14: ZPure[W, S, S, R, E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12],zPure14:zio.prelude.fx.ZPure[W,S,S,R,E,A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11], zPure13: ZPure[W, S, S, R, E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11],zPure13:zio.prelude.fx.ZPure[W,S,S,R,E,A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10], zPure12: ZPure[W, S, S, R, E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10],zPure12:zio.prelude.fx.ZPure[W,S,S,R,E,A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9], zPure11: ZPure[W, S, S, R, E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9],zPure11:zio.prelude.fx.ZPure[W,S,S,R,E,A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8], zPure10: ZPure[W, S, S, R, E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8],zPure10:zio.prelude.fx.ZPure[W,S,S,R,E,A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7], zPure9: ZPure[W, S, S, R, E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7],zPure9:zio.prelude.fx.ZPure[W,S,S,R,E,A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6], zPure8: ZPure[W, S, S, R, E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,A7,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6],zPure8:zio.prelude.fx.ZPure[W,S,S,R,E,A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5], zPure7: ZPure[W, S, S, R, E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,A6,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5],zPure7:zio.prelude.fx.ZPure[W,S,S,R,E,A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4], zPure6: ZPure[W, S, S, R, E, A5])(f: (A0, A1, A2, A3, A4, A5) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,A5,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4],zPure6:zio.prelude.fx.ZPure[W,S,S,R,E,A5])(f:(A0,A1,A2,A3,A4,A5)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3], zPure5: ZPure[W, S, S, R, E, A4])(f: (A0, A1, A2, A3, A4) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,A4,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3],zPure5:zio.prelude.fx.ZPure[W,S,S,R,E,A4])(f:(A0,A1,A2,A3,A4)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2], zPure4: ZPure[W, S, S, R, E, A3])(f: (A0, A1, A2, A3) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,A3,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2],zPure4:zio.prelude.fx.ZPure[W,S,S,R,E,A3])(f:(A0,A1,A2,A3)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(zPure1: ZPure[W, S, S, R, E, A0], zPure2: ZPure[W, S, S, R, E, A1], zPure3: ZPure[W, S, S, R, E, A2])(f: (A0, A1, A2) => B): ZPure[W, S, S, R, E, B]", "member" : "zio.prelude.fx.ZPureArities.mapN", "link" : "zio\/prelude\/fx\/ZPureArities.html#mapN[W,S,R,E,A0,A1,A2,B](zPure1:zio.prelude.fx.ZPure[W,S,S,R,E,A0],zPure2:zio.prelude.fx.ZPure[W,S,S,R,E,A1],zPure3:zio.prelude.fx.ZPure[W,S,S,R,E,A2])(f:(A0,A1,A2)=>B):zio.prelude.fx.ZPure[W,S,S,R,E,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ZPureArities.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ZPureArities.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ZPureArities.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ZPureArities.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ZPureArities.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ZPureArities.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ZPureArities.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureArities.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureArities.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureArities.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ZPureArities.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ZPureArities.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ZPureArities.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ZPureArities.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ZPureArities.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ZPureArities.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ZPureArities.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ZPureArities.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ZPureArities.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.fx.ZPureLowPriorityImplicits", "trait" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "ZPureCommutativeBoth", "tail" : "(): CommutativeBoth[[+A]ZPure[W, S, S, R, E, A]]", "member" : "zio.prelude.fx.ZPureLowPriorityImplicits.ZPureCommutativeBoth", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#ZPureCommutativeBoth[W,S,R,E]:zio.prelude.CommutativeBoth[[+A]zio.prelude.fx.ZPure[W,S,S,R,E,A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/fx\/ZPureLowPriorityImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}], "zio.prelude.experimental" : [{"name" : "zio.prelude.experimental.ApplicationCompose", "object" : "zio\/prelude\/experimental\/ApplicationCompose$.html", "members_object" : [{"label" : "Aux", "tail" : "", "member" : "zio.prelude.experimental.ApplicationCompose.Aux", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#Aux[=>:[-_,+_],Product[+_,+_],Arrow[-_,+_]]=zio.prelude.experimental.ApplicationCompose[=>:]{type:*:[+f,+s]=Product[f,s];type-->:[-t,+r]=Arrow[t,r]}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationCompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/experimental\/ApplicationCompose.html", "kind" : "trait", "members_trait" : [{"label" : "applicationCompose", "tail" : "(f: =>:[:*:[A, B], C], g: =>:[A, -->:[B, C]])(eqF: Equal[=>:[:*:[A, B], C]], eqG: Equal[=>:[A, -->:[B, C]]]): Boolean", "member" : "zio.prelude.experimental.ApplicationCompose.applicationCompose", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#applicationCompose[A,B,C](f:(A:*:B)=>:C,g:A=>:B-->:C)(impliciteqF:zio.prelude.Equal[(A:*:B)=>:C],impliciteqG:zio.prelude.Equal[A=>:B-->:C]):Boolean", "kind" : "def"}, {"label" : "bothCompose", "tail" : "(a2b: =>:[A, B], a2c: =>:[A, C], a2bc: =>:[A, :*:[B, C]])(eqA2B: Equal[=>:[A, B]], eqA2C: Equal[=>:[A, C]], eqA2BC: Equal[=>:[A, :*:[B, C]]]): Boolean", "member" : "zio.prelude.experimental.BothCompose.bothCompose", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#bothCompose[A,B,C](a2b:A=>:B,a2c:A=>:C,a2bc:A=>:B:*:C)(impliciteqA2B:zio.prelude.Equal[A=>:B],impliciteqA2C:zio.prelude.Equal[A=>:C],impliciteqA2BC:zio.prelude.Equal[A=>:B:*:C]):Boolean", "kind" : "def"}, {"label" : "associativeCompose", "tail" : "(ab: =>:[A, B], bc: =>:[B, C], cd: =>:[C, D])(eq: Equal[=>:[A, D]]): Boolean", "member" : "zio.prelude.AssociativeCompose.associativeCompose", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#associativeCompose[A,B,C,D](ab:A=>:B,bc:B=>:C,cd:C=>:D)(impliciteq:zio.prelude.Equal[A=>:D]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "uncurry", "tail" : "(g: =>:[A, -->:[B, C]]): =>:[:*:[A, B], C]", "member" : "zio.prelude.experimental.ApplicationCompose.uncurry", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#uncurry[A,B,C](g:A=>:B-->:C):(A:*:B)=>:C", "kind" : "abstract def"}, {"label" : "curry", "tail" : "(f: =>:[:*:[A, B], C]): =>:[A, -->:[B, C]]", "member" : "zio.prelude.experimental.ApplicationCompose.curry", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#curry[A,B,C](f:(A:*:B)=>:C):A=>:B-->:C", "kind" : "abstract def"}, {"label" : "application", "tail" : "(): =>:[:*:[-->:[A, B], A], B]", "member" : "zio.prelude.experimental.ApplicationCompose.application", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#application[A,B]:((A-->:B):*:A)=>:B", "kind" : "abstract def"}, {"member" : "zio.prelude.experimental.ApplicationCompose.-->:", "error" : "unsupported entity"}, {"label" : "toBoth", "tail" : "(a2b: =>:[A, B])(a2c: =>:[A, C]): =>:[A, :*:[B, C]]", "member" : "zio.prelude.experimental.BothCompose.toBoth", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#toBoth[A,B,C](a2b:A=>:B)(a2c:A=>:C):A=>:B:*:C", "kind" : "abstract def"}, {"label" : "fromSecond", "tail" : "(): =>:[:*:[Any, B], B]", "member" : "zio.prelude.experimental.BothCompose.fromSecond", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#fromSecond[B]:(Any:*:B)=>:B", "kind" : "abstract def"}, {"label" : "fromFirst", "tail" : "(): =>:[:*:[A, Any], A]", "member" : "zio.prelude.experimental.BothCompose.fromFirst", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#fromFirst[A]:(A:*:Any)=>:A", "kind" : "abstract def"}, {"member" : "zio.prelude.experimental.BothCompose.:*:", "error" : "unsupported entity"}, {"label" : "compose", "tail" : "(bc: =>:[B, C], ab: =>:[A, B]): =>:[A, C]", "member" : "zio.prelude.AssociativeCompose.compose", "link" : "zio\/prelude\/experimental\/ApplicationCompose.html#compose[A,B,C](bc:B=>:C,ab:A=>:B):A=>:C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.ApplicationComposeSyntax", "trait" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "ApplicationComposeUncurryOps", "tail" : "", "member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeUncurryOps", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#ApplicationComposeUncurryOps[A,B,C,=>:[-_,+_],:*:[+_,+_],-->:[-_,+_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ApplicationComposeCurryOps", "tail" : "", "member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeCurryOps", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#ApplicationComposeCurryOps[A,B,C,=>:[-_,+_],:*:[+_,+_],-->:[-_,+_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeCurryOps", "shortDescription" : "", "members_class" : [{"label" : "curry", "tail" : "(applicationCompose: Aux[=>:, :*:, -->:]): =>:[A, -->:[B, C]]", "member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeCurryOps.curry", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#curry(implicitapplicationCompose:zio.prelude.experimental.ApplicationCompose.Aux[=>:,:*:,-->:]):A=>:B-->:C", "kind" : "def"}, {"member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeCurryOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeCurryOps.html", "kind" : "class"}, {"name" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeUncurryOps", "shortDescription" : "", "members_class" : [{"label" : "uncurry", "tail" : "(applicationCompose: Aux[=>:, :*:, -->:]): =>:[:*:[A, B], C]", "member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeUncurryOps.uncurry", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#uncurry(implicitapplicationCompose:zio.prelude.experimental.ApplicationCompose.Aux[=>:,:*:,-->:]):(A:*:B)=>:C", "kind" : "def"}, {"member" : "zio.prelude.experimental.ApplicationComposeSyntax.ApplicationComposeUncurryOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/experimental\/ApplicationComposeSyntax$ApplicationComposeUncurryOps.html", "kind" : "class"}, {"name" : "zio.prelude.experimental.BothCompose", "object" : "zio\/prelude\/experimental\/BothCompose$.html", "members_object" : [{"label" : "URManagedApplicationCompose", "tail" : ": BothCompose[URManaged]", "member" : "zio.prelude.experimental.BothCompose.URManagedApplicationCompose", "link" : "zio\/prelude\/experimental\/BothCompose$.html#URManagedApplicationCompose:zio.prelude.experimental.BothCompose[zio.URManaged]", "kind" : "implicit val"}, {"label" : "URLayerApplicationCompose", "tail" : ": BothCompose[URLayer]", "member" : "zio.prelude.experimental.BothCompose.URLayerApplicationCompose", "link" : "zio\/prelude\/experimental\/BothCompose$.html#URLayerApplicationCompose:zio.prelude.experimental.BothCompose[zio.URLayer]", "kind" : "implicit val"}, {"label" : "URIOApplicationCompose", "tail" : ": BothCompose[URIO]", "member" : "zio.prelude.experimental.BothCompose.URIOApplicationCompose", "link" : "zio\/prelude\/experimental\/BothCompose$.html#URIOApplicationCompose:zio.prelude.experimental.BothCompose[zio.URIO]", "kind" : "implicit val"}, {"label" : "FunctionApplicationCompose", "tail" : ": ApplicationCompose[Function]", "member" : "zio.prelude.experimental.BothCompose.FunctionApplicationCompose", "link" : "zio\/prelude\/experimental\/BothCompose$.html#FunctionApplicationCompose:zio.prelude.experimental.ApplicationCompose[Function]", "kind" : "implicit val"}, {"label" : "Aux", "tail" : "", "member" : "zio.prelude.experimental.BothCompose.Aux", "link" : "zio\/prelude\/experimental\/BothCompose$.html#Aux[=>:[-_,+_],Product[+_,+_]]=zio.prelude.experimental.BothCompose[=>:]{type:*:[+f,+s]=Product[f,s]}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/BothCompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/BothCompose$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/BothCompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/BothCompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/BothCompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/BothCompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/BothCompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/BothCompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/BothCompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/BothCompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/BothCompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/BothCompose$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/BothCompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/BothCompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/BothCompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/BothCompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/experimental\/BothCompose.html", "kind" : "trait", "members_trait" : [{"label" : "bothCompose", "tail" : "(a2b: =>:[A, B], a2c: =>:[A, C], a2bc: =>:[A, :*:[B, C]])(eqA2B: Equal[=>:[A, B]], eqA2C: Equal[=>:[A, C]], eqA2BC: Equal[=>:[A, :*:[B, C]]]): Boolean", "member" : "zio.prelude.experimental.BothCompose.bothCompose", "link" : "zio\/prelude\/experimental\/BothCompose.html#bothCompose[A,B,C](a2b:A=>:B,a2c:A=>:C,a2bc:A=>:B:*:C)(impliciteqA2B:zio.prelude.Equal[A=>:B],impliciteqA2C:zio.prelude.Equal[A=>:C],impliciteqA2BC:zio.prelude.Equal[A=>:B:*:C]):Boolean", "kind" : "def"}, {"label" : "associativeCompose", "tail" : "(ab: =>:[A, B], bc: =>:[B, C], cd: =>:[C, D])(eq: Equal[=>:[A, D]]): Boolean", "member" : "zio.prelude.AssociativeCompose.associativeCompose", "link" : "zio\/prelude\/experimental\/BothCompose.html#associativeCompose[A,B,C,D](ab:A=>:B,bc:B=>:C,cd:C=>:D)(impliciteq:zio.prelude.Equal[A=>:D]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/BothCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/BothCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/BothCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/BothCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/BothCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/BothCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/BothCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/BothCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/BothCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/BothCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/BothCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/BothCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/BothCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/BothCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/BothCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/BothCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toBoth", "tail" : "(a2b: =>:[A, B])(a2c: =>:[A, C]): =>:[A, :*:[B, C]]", "member" : "zio.prelude.experimental.BothCompose.toBoth", "link" : "zio\/prelude\/experimental\/BothCompose.html#toBoth[A,B,C](a2b:A=>:B)(a2c:A=>:C):A=>:B:*:C", "kind" : "abstract def"}, {"label" : "fromSecond", "tail" : "(): =>:[:*:[Any, B], B]", "member" : "zio.prelude.experimental.BothCompose.fromSecond", "link" : "zio\/prelude\/experimental\/BothCompose.html#fromSecond[B]:(Any:*:B)=>:B", "kind" : "abstract def"}, {"label" : "fromFirst", "tail" : "(): =>:[:*:[A, Any], A]", "member" : "zio.prelude.experimental.BothCompose.fromFirst", "link" : "zio\/prelude\/experimental\/BothCompose.html#fromFirst[A]:(A:*:Any)=>:A", "kind" : "abstract def"}, {"member" : "zio.prelude.experimental.BothCompose.:*:", "error" : "unsupported entity"}, {"label" : "compose", "tail" : "(bc: =>:[B, C], ab: =>:[A, B]): =>:[A, C]", "member" : "zio.prelude.AssociativeCompose.compose", "link" : "zio\/prelude\/experimental\/BothCompose.html#compose[A,B,C](bc:B=>:C,ab:A=>:B):A=>:C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.BothComposeSyntax", "trait" : "zio\/prelude\/experimental\/BothComposeSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "BothComposeOps", "tail" : "", "member" : "zio.prelude.experimental.BothComposeSyntax.BothComposeOps", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#BothComposeOps[A,B,=>:[-_,+_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/BothComposeSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.BothComposeSyntax.BothComposeOps", "shortDescription" : "", "members_class" : [{"label" : "toBoth", "tail" : "(both: Aux[=>:, :*:]): (=>:[A, C]) => =>:[A, :*:[B, C]]", "member" : "zio.prelude.experimental.BothComposeSyntax.BothComposeOps.toBoth", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#toBoth[C,:*:[+_,+_]](implicitboth:zio.prelude.experimental.BothCompose.Aux[=>:,:*:]):A=>:C=>A=>:B:*:C", "kind" : "def"}, {"label" : "&&&", "tail" : "(both: Aux[=>:, :*:]): (=>:[A, C]) => =>:[A, :*:[B, C]]", "member" : "zio.prelude.experimental.BothComposeSyntax.BothComposeOps.&&&", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#&&&[C,:*:[+_,+_]](implicitboth:zio.prelude.experimental.BothCompose.Aux[=>:,:*:]):A=>:C=>A=>:B:*:C", "kind" : "def"}, {"member" : "zio.prelude.experimental.BothComposeSyntax.BothComposeOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/experimental\/BothComposeSyntax$BothComposeOps.html", "kind" : "class"}, {"name" : "zio.prelude.experimental.BuildInfo", "case object" : "zio\/prelude\/experimental\/BuildInfo$.html", "shortDescription" : "This object was generated by sbt-buildinfo.", "members_case object" : [{"label" : "toString", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.toString", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": Boolean", "member" : "zio.prelude.experimental.BuildInfo.isSnapshot", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#isSnapshot:Boolean", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.sbtVersion", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#sbtVersion:String", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.scalaVersion", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#scalaVersion:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.version", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.name", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#name:String", "kind" : "val"}, {"label" : "moduleName", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.moduleName", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#moduleName:String", "kind" : "val"}, {"label" : "organization", "tail" : ": String", "member" : "zio.prelude.experimental.BuildInfo.organization", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#organization:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/BuildInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "zio.prelude.experimental.classic", "shortDescription" : "", "object" : "zio\/prelude\/experimental\/package$$classic$.html", "members_object" : [{"label" : "CoCartesianCategory", "tail" : "", "member" : "zio.prelude.experimental.classic.CoCartesianCategory", "link" : "zio\/prelude\/experimental\/package$$classic$.html#CoCartesianCategory[=>:[-_,+_],:+:[+_,+_]]=zio.prelude.classic.Category[=>:]withzio.prelude.experimental.EitherCompose.Aux[=>:,:+:]", "kind" : "type"}, {"label" : "ClosedCartesianCategory", "tail" : "", "member" : "zio.prelude.experimental.classic.ClosedCartesianCategory", "link" : "zio\/prelude\/experimental\/package$$classic$.html#ClosedCartesianCategory[=>:[-_,+_],:*:[+_,+_],-->:[-_,+_]]=zio.prelude.experimental.classic.CartesianCategory[=>:,:*:]withzio.prelude.experimental.ApplicationCompose.Aux[=>:,:*:,-->:]", "kind" : "type"}, {"label" : "CartesianCategory", "tail" : "", "member" : "zio.prelude.experimental.classic.CartesianCategory", "link" : "zio\/prelude\/experimental\/package$$classic$.html#CartesianCategory[=>:[-_,+_],:*:[+_,+_]]=zio.prelude.classic.Category[=>:]withzio.prelude.experimental.BothCompose.Aux[=>:,:*:]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/package$$classic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/package$$classic$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/package$$classic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/package$$classic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/package$$classic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/package$$classic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/package$$classic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/package$$classic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/package$$classic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/package$$classic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/package$$classic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/package$$classic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/package$$classic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/package$$classic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/package$$classic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/package$$classic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/package$$classic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/package$$classic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/package$$classic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.experimental.EitherCompose", "object" : "zio\/prelude\/experimental\/EitherCompose$.html", "members_object" : [{"label" : "URManagedEitherCompose", "tail" : ": EitherCompose[URManaged]", "member" : "zio.prelude.experimental.EitherCompose.URManagedEitherCompose", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#URManagedEitherCompose:zio.prelude.experimental.EitherCompose[zio.URManaged]", "kind" : "implicit val"}, {"label" : "URLayerEitherCompose", "tail" : ": EitherCompose[URLayer]", "member" : "zio.prelude.experimental.EitherCompose.URLayerEitherCompose", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#URLayerEitherCompose:zio.prelude.experimental.EitherCompose[zio.URLayer]", "kind" : "implicit val"}, {"label" : "URIOEitherCompose", "tail" : ": EitherCompose[URIO]", "member" : "zio.prelude.experimental.EitherCompose.URIOEitherCompose", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#URIOEitherCompose:zio.prelude.experimental.EitherCompose[zio.URIO]", "kind" : "implicit val"}, {"label" : "FunctionEitherCompose", "tail" : ": EitherCompose[Function]", "member" : "zio.prelude.experimental.EitherCompose.FunctionEitherCompose", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#FunctionEitherCompose:zio.prelude.experimental.EitherCompose[Function]", "kind" : "implicit val"}, {"label" : "Aux", "tail" : "", "member" : "zio.prelude.experimental.EitherCompose.Aux", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#Aux[=>:[-_,+_],Sum[+_,+_]]=zio.prelude.experimental.EitherCompose[=>:]{type:+:[+l,+r]=Sum[l,r]}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/EitherCompose$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/EitherCompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/experimental\/EitherCompose.html", "kind" : "trait", "members_trait" : [{"label" : "eitherCompose", "tail" : "(a2c: =>:[A, C], b2c: =>:[B, C], ab2c: =>:[:+:[A, B], C])(eqA2C: Equal[=>:[A, C]], eqB2C: Equal[=>:[B, C]], eqA2BC: Equal[=>:[:+:[A, B], C]]): Boolean", "member" : "zio.prelude.experimental.EitherCompose.eitherCompose", "link" : "zio\/prelude\/experimental\/EitherCompose.html#eitherCompose[A,B,C](a2c:A=>:C,b2c:B=>:C,ab2c:(A:+:B)=>:C)(impliciteqA2C:zio.prelude.Equal[A=>:C],impliciteqB2C:zio.prelude.Equal[B=>:C],impliciteqA2BC:zio.prelude.Equal[(A:+:B)=>:C]):Boolean", "kind" : "def"}, {"label" : "associativeCompose", "tail" : "(ab: =>:[A, B], bc: =>:[B, C], cd: =>:[C, D])(eq: Equal[=>:[A, D]]): Boolean", "member" : "zio.prelude.AssociativeCompose.associativeCompose", "link" : "zio\/prelude\/experimental\/EitherCompose.html#associativeCompose[A,B,C,D](ab:A=>:B,bc:B=>:C,cd:C=>:D)(impliciteq:zio.prelude.Equal[A=>:D]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/EitherCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/EitherCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/EitherCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/EitherCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/EitherCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/EitherCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/EitherCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/EitherCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/EitherCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/EitherCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/EitherCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/EitherCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/EitherCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/EitherCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/EitherCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/EitherCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fromEither", "tail" : "(a2c: => =>:[A, C])(b2c: => =>:[B, C]): =>:[:+:[A, B], C]", "member" : "zio.prelude.experimental.EitherCompose.fromEither", "link" : "zio\/prelude\/experimental\/EitherCompose.html#fromEither[A,B,C](a2c:=>A=>:C)(b2c:=>B=>:C):(A:+:B)=>:C", "kind" : "abstract def"}, {"label" : "toRight", "tail" : "(): =>:[B, :+:[Nothing, B]]", "member" : "zio.prelude.experimental.EitherCompose.toRight", "link" : "zio\/prelude\/experimental\/EitherCompose.html#toRight[B]:B=>:Nothing:+:B", "kind" : "abstract def"}, {"label" : "toLeft", "tail" : "(): =>:[A, :+:[A, Nothing]]", "member" : "zio.prelude.experimental.EitherCompose.toLeft", "link" : "zio\/prelude\/experimental\/EitherCompose.html#toLeft[A]:A=>:A:+:Nothing", "kind" : "abstract def"}, {"member" : "zio.prelude.experimental.EitherCompose.:+:", "error" : "unsupported entity"}, {"label" : "compose", "tail" : "(bc: =>:[B, C], ab: =>:[A, B]): =>:[A, C]", "member" : "zio.prelude.AssociativeCompose.compose", "link" : "zio\/prelude\/experimental\/EitherCompose.html#compose[A,B,C](bc:B=>:C,ab:A=>:B):A=>:C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.EitherComposeSyntax", "trait" : "zio\/prelude\/experimental\/EitherComposeSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "EitherComposeOps", "tail" : "", "member" : "zio.prelude.experimental.EitherComposeSyntax.EitherComposeOps", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#EitherComposeOps[A,C,=>:[-_,+_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.experimental.EitherComposeSyntax.EitherComposeOps", "shortDescription" : "", "members_class" : [{"label" : "fromEither", "tail" : "(eitherCompose: Aux[=>:, :+:]): (=> =>:[B, C]) => =>:[:+:[A, B], C]", "member" : "zio.prelude.experimental.EitherComposeSyntax.EitherComposeOps.fromEither", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#fromEither[B,:+:[+_,+_]](impliciteitherCompose:zio.prelude.experimental.EitherCompose.Aux[=>:,:+:]):(=>B=>:C)=>(A:+:B)=>:C", "kind" : "def"}, {"label" : "|||", "tail" : "(eitherCompose: Aux[=>:, :+:]): (=> =>:[B, C]) => =>:[:+:[A, B], C]", "member" : "zio.prelude.experimental.EitherComposeSyntax.EitherComposeOps.|||", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#|||[B,:+:[+_,+_]](impliciteitherCompose:zio.prelude.experimental.EitherCompose.Aux[=>:,:+:]):(=>B=>:C)=>(A:+:B)=>:C", "kind" : "def"}, {"member" : "zio.prelude.experimental.EitherComposeSyntax.EitherComposeOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/experimental\/EitherComposeSyntax$EitherComposeOps.html", "kind" : "class"}], "zio" : [], "zio.prelude.coherent" : [{"name" : "zio.prelude.coherent.AssociativeBothDeriveEqualInvariant", "object" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(associativeBoth0: AssociativeBoth[F], deriveEqual0: DeriveEqual[F], invariant0: Invariant[F]): AssociativeBothDeriveEqualInvariant[F]", "member" : "zio.prelude.coherent.AssociativeBothDeriveEqualInvariant.derive", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#derive[F[_]](implicitassociativeBoth0:zio.prelude.AssociativeBoth[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.AssociativeBothDeriveEqualInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/coherent\/AssociativeBothDeriveEqualInvariant.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.AssociativeEitherDeriveEqualInvariant", "object" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(associativeEither0: AssociativeEither[F], deriveEqual0: DeriveEqual[F], invariant0: Invariant[F]): AssociativeEitherDeriveEqualInvariant[F]", "member" : "zio.prelude.coherent.AssociativeEitherDeriveEqualInvariant.derive", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#derive[F[_]](implicitassociativeEither0:zio.prelude.AssociativeEither[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.AssociativeEitherDeriveEqualInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/coherent\/AssociativeEitherDeriveEqualInvariant.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.AssociativeEqual", "object" : "zio\/prelude\/coherent\/AssociativeEqual$.html", "members_object" : [{"label" : "derive", "tail" : "(associative0: Associative[A], equal0: Equal[A]): AssociativeEqual[A]", "member" : "zio.prelude.coherent.AssociativeEqual.derive", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#derive[A](implicitassociative0:zio.prelude.Associative[A],implicitequal0:zio.prelude.Equal[A]):zio.prelude.coherent.AssociativeEqual[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEqual$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/AssociativeEqual.html", "kind" : "trait", "members_trait" : [{"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/AssociativeEqual.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.AssociativeFlattenCovariantDeriveEqual", "object" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html", "members_object" : [{"label" : "derive", "tail" : "(associativeFlatten0: AssociativeFlatten[F], covariant0: Covariant[F], deriveEqual0: DeriveEqual[F]): AssociativeFlattenCovariantDeriveEqual[F]", "member" : "zio.prelude.coherent.AssociativeFlattenCovariantDeriveEqual.derive", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#derive[F[+_]](implicitassociativeFlatten0:zio.prelude.AssociativeFlatten[F],implicitcovariant0:zio.prelude.Covariant[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F]):zio.prelude.coherent.AssociativeFlattenCovariantDeriveEqual[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.map", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "abstract def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "zio.prelude.AssociativeFlatten.flatten", "link" : "zio\/prelude\/coherent\/AssociativeFlattenCovariantDeriveEqual.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CommutativeBothDeriveEqualInvariant", "object" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(commutativeBoth0: CommutativeBoth[F], deriveEqual0: DeriveEqual[F], invariant0: Invariant[F]): CommutativeBothDeriveEqualInvariant[F]", "member" : "zio.prelude.coherent.CommutativeBothDeriveEqualInvariant.derive", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#derive[F[_]](implicitcommutativeBoth0:zio.prelude.CommutativeBoth[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.CommutativeBothDeriveEqualInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/coherent\/CommutativeBothDeriveEqualInvariant.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CommutativeEitherDeriveEqualInvariant", "object" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(commutativeEither0: CommutativeEither[F], deriveEqual0: DeriveEqual[F], invariant0: Invariant[F]): CommutativeEitherDeriveEqualInvariant[F]", "member" : "zio.prelude.coherent.CommutativeEitherDeriveEqualInvariant.derive", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#derive[F[_]](implicitcommutativeEither0:zio.prelude.CommutativeEither[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.CommutativeEitherDeriveEqualInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/coherent\/CommutativeEitherDeriveEqualInvariant.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CommutativeEqual", "object" : "zio\/prelude\/coherent\/CommutativeEqual$.html", "members_object" : [{"label" : "derive", "tail" : "(commutative0: Commutative[A], equal0: Equal[A]): CommutativeEqual[A]", "member" : "zio.prelude.coherent.CommutativeEqual.derive", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#derive[A](implicitcommutative0:zio.prelude.Commutative[A],implicitequal0:zio.prelude.Equal[A]):zio.prelude.coherent.CommutativeEqual[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEqual$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CommutativeEqual.html", "kind" : "trait", "members_trait" : [{"label" : "commute", "tail" : "(): Commutative[A]", "member" : "zio.prelude.Commutative.commute", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#commute:zio.prelude.Commutative[A]", "kind" : "final def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/CommutativeEqual.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CommutativeIdentity", "object" : "zio\/prelude\/coherent\/CommutativeIdentity$.html", "members_object" : [{"label" : "derive", "tail" : "(commutative0: Commutative[A], identity0: Identity[A]): CommutativeIdentity[A]", "member" : "zio.prelude.coherent.CommutativeIdentity.derive", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#derive[A](implicitcommutative0:zio.prelude.Commutative[A],implicitidentity0:zio.prelude.Identity[A]):zio.prelude.coherent.CommutativeIdentity[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeIdentity$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CommutativeIdentity.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Identity.multiplyOption", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "commute", "tail" : "(): Commutative[A]", "member" : "zio.prelude.Commutative.commute", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#commute:zio.prelude.Commutative[A]", "kind" : "final def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "identity", "tail" : "(): A", "member" : "zio.prelude.Identity.identity", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#identity:A", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/CommutativeIdentity.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.ContravariantDeriveEqual", "object" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html", "members_object" : [{"label" : "derive", "tail" : "(contravariant0: Contravariant[F], deriveEqual0: DeriveEqual[F]): ContravariantDeriveEqual[F]", "member" : "zio.prelude.coherent.ContravariantDeriveEqual.derive", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#derive[F[-_]](implicitcontravariant0:zio.prelude.Contravariant[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F]):zio.prelude.coherent.ContravariantDeriveEqual[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Covariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Contravariant.compose", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Contravariant.compose", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Contravariant.invmap", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "contramapSubset", "tail" : "(f: (B) => A)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Contravariant.contramapSubset", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#contramapSubset[A,B](f:B=>A)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "contramap", "tail" : "(f: (B) => A): (F[A]) => F[B]", "member" : "zio.prelude.Contravariant.contramap", "link" : "zio\/prelude\/coherent\/ContravariantDeriveEqual.html#contramap[A,B](f:B=>A):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CovariantDeriveEqual", "object" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html", "members_object" : [{"label" : "derive", "tail" : "(covariant0: Covariant[F], deriveEqual0: DeriveEqual[F]): CovariantDeriveEqual[F]", "member" : "zio.prelude.coherent.CovariantDeriveEqual.derive", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#derive[F[+_]](implicitcovariant0:zio.prelude.Covariant[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F]):zio.prelude.coherent.CovariantDeriveEqual[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.map", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqual.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.CovariantDeriveEqualIdentityFlatten", "object" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html", "members_object" : [{"label" : "derive", "tail" : "(covariant0: Covariant[F], deriveEqual0: DeriveEqual[F], identityFlatten0: IdentityFlatten[F]): CovariantDeriveEqualIdentityFlatten[F]", "member" : "zio.prelude.coherent.CovariantDeriveEqualIdentityFlatten.derive", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#derive[F[+_]](implicitcovariant0:zio.prelude.Covariant[F],implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitidentityFlatten0:zio.prelude.IdentityFlatten[F]):zio.prelude.coherent.CovariantDeriveEqualIdentityFlatten[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.map", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "abstract def"}, {"label" : "any", "tail" : "(): F[Any]", "member" : "zio.prelude.IdentityFlatten.any", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#any:F[Any]", "kind" : "abstract def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "zio.prelude.AssociativeFlatten.flatten", "link" : "zio\/prelude\/coherent\/CovariantDeriveEqualIdentityFlatten.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.DeriveEqualForEach", "object" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html", "members_object" : [{"label" : "derive", "tail" : "(deriveEqual0: DeriveEqual[F], forEach0: ForEach[F]): DeriveEqualForEach[F]", "member" : "zio.prelude.coherent.DeriveEqualForEach.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#derive[F[+_]](implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitforEach0:zio.prelude.ForEach[F]):zio.prelude.coherent.DeriveEqualForEach[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/DeriveEqualForEach.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(arg0: ForEach[G]): ForEach[[+A]F[G[A]]]", "member" : "zio.prelude.ForEach.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#compose[G[+_]](implicitevidence$29:zio.prelude.ForEach[G]):zio.prelude.ForEach[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(fa: F[A]): F[(A, Int)]", "member" : "zio.prelude.ForEach.zipWithIndex", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#zipWithIndex[A](fa:F[A]):F[(A,Int)]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(fa: F[A], fb: F[B])(f: (These[A, B]) => C)(both: IdentityBoth[F], either: IdentityEither[F]): F[C]", "member" : "zio.prelude.ForEach.zipAllWith", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#zipAllWith[A,B,C](fa:F[A],fb:F[B])(f:zio.prelude.These[A,B]=>C)(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(fa: F[A], fb: F[B])(both: IdentityBoth[F], either: IdentityEither[F]): F[These[A, B]]", "member" : "zio.prelude.ForEach.zipAll", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#zipAll[A,B,C](fa:F[A],fb:F[B])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[zio.prelude.These[A,B]]", "kind" : "def"}, {"label" : "toList", "tail" : "(fa: F[A]): List[A]", "member" : "zio.prelude.ForEach.toList", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#toList[A](fa:F[A]):List[A]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(fa: F[A]): Chunk[A]", "member" : "zio.prelude.ForEach.toChunk", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#toChunk[A](fa:F[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A])(ev: Identity[Sum[A]]): A", "member" : "zio.prelude.ForEach.sum", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#sum[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[A]]):A", "kind" : "def"}, {"label" : "size", "tail" : "(fa: F[A]): Int", "member" : "zio.prelude.ForEach.size", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#size[A](fa:F[A]):Int", "kind" : "def"}, {"label" : "reverse", "tail" : "(fa: F[A]): F[A]", "member" : "zio.prelude.ForEach.reverse", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reverse[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(fa: F[A])(f: (A, A) => A): Option[A]", "member" : "zio.prelude.ForEach.reduceOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reduceOption[A](fa:F[A])(f:(A,A)=>A):Option[A]", "kind" : "def"}, {"label" : "reduceMapOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): Option[B]", "member" : "zio.prelude.ForEach.reduceMapOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reduceMapOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$28:zio.prelude.Associative[B]):Option[B]", "kind" : "def"}, {"label" : "reduceIdentity", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.reduceIdentity", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reduceIdentity[A](fa:F[A])(implicitevidence$27:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "reduceIdempotent", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceIdempotent", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reduceIdempotent[A](fa:F[A])(implicitevidence$25:zio.prelude.Idempotent[A],implicitevidence$26:zio.prelude.Equal[A]):Option[A]", "kind" : "def"}, {"label" : "reduceAssociative", "tail" : "(fa: F[A])(arg0: Associative[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceAssociative", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#reduceAssociative[A](fa:F[A])(implicitevidence$24:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A])(ev: Identity[Prod[A]]): A", "member" : "zio.prelude.ForEach.product", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#product[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Prod[A]]):A", "kind" : "def"}, {"label" : "partitionMapM", "tail" : "(fa: F[A])(f: (A) => G[Either[B, C]])(arg0: IdentityFlatten[G], arg1: Covariant[G], both: IdentityBoth[F], either: IdentityEither[F]): G[(F[B], F[C])]", "member" : "zio.prelude.ForEach.partitionMapM", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#partitionMapM[G[+_],A,B,C](fa:F[A])(f:A=>G[Either[B,C]])(implicitevidence$22:zio.prelude.IdentityFlatten[G],implicitevidence$23:zio.prelude.Covariant[G],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):G[(F[B],F[C])]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(fa: F[A])(f: (A) => Either[B, C])(both: IdentityBoth[F], either: IdentityEither[F]): (F[B], F[C])", "member" : "zio.prelude.ForEach.partitionMap", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#partitionMap[A,B,C](fa:F[A])(f:A=>Either[B,C])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):(F[B],F[C])", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.nonEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#nonEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "minByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.minByOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#minByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$21:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "minOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.minOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#minOption[A](fa:F[A])(implicitevidence$20:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.maxByOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#maxByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$19:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.maxOption", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#maxOption[A](fa:F[A])(implicitevidence$18:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(fa: F[A])(s: S)(f: (S, A) => (S, B)): (S, F[B])", "member" : "zio.prelude.ForEach.mapAccum", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#mapAccum[S,A,B](fa:F[A])(s:S)(f:(S,A)=>(S,B)):(S,F[B])", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.ForEach.map", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.isEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#isEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "groupByNonEmptyM", "tail" : "(fa: F[V])(f: (V) => G[K])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Map[K, NonEmptyChunk[V]]]", "member" : "zio.prelude.ForEach.groupByNonEmptyM", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#groupByNonEmptyM[G[+_],V,K](fa:F[V])(f:V=>G[K])(implicitevidence$16:zio.prelude.IdentityBoth[G],implicitevidence$17:zio.prelude.Covariant[G]):G[Map[K,zio.NonEmptyChunk[V]]]", "kind" : "def"}, {"label" : "groupByNonEmpty", "tail" : "(fa: F[V])(f: (V) => K): Map[K, NonEmptyChunk[V]]", "member" : "zio.prelude.ForEach.groupByNonEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#groupByNonEmpty[V,K](fa:F[V])(f:V=>K):Map[K,zio.NonEmptyChunk[V]]", "kind" : "def"}, {"label" : "forEach_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.ForEach.forEach_", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#forEach_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$14:zio.prelude.IdentityBoth[G],implicitevidence$15:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forall", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.forall", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#forall[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foldRightM", "tail" : "(fa: F[A])(s: S)(f: (A, S) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldRightM", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldRightM[G[+_],S,A](fa:F[A])(s:S)(f:(A,S)=>G[S])(implicitevidence$12:zio.prelude.IdentityFlatten[G],implicitevidence$13:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(fa: F[A])(s: S)(f: (A, S) => S): S", "member" : "zio.prelude.ForEach.foldRight", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldRight[S,A](fa:F[A])(s:S)(f:(A,S)=>S):S", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: Covariant[G], arg1: IdentityFlatten[G], arg2: Identity[B]): G[B]", "member" : "zio.prelude.ForEach.foldMapM", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldMapM[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$9:zio.prelude.Covariant[G],implicitevidence$10:zio.prelude.IdentityFlatten[G],implicitevidence$11:zio.prelude.Identity[B]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Identity[B]): B", "member" : "zio.prelude.ForEach.foldMap", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$8:zio.prelude.Identity[B]):B", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(fa: F[A])(s: S)(f: (S, A) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldLeftM", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldLeftM[G[+_],S,A](fa:F[A])(s:S)(f:(S,A)=>G[S])(implicitevidence$6:zio.prelude.IdentityFlatten[G],implicitevidence$7:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(fa: F[A])(s: S)(f: (S, A) => S): S", "member" : "zio.prelude.ForEach.foldLeft", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#foldLeft[S,A](fa:F[A])(s:S)(f:(S,A)=>S):S", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.fold", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#fold[A](fa:F[A])(implicitevidence$5:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "flip", "tail" : "(fa: F[G[A]])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.ForEach.flip", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#flip[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.IdentityBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(fa: F[A])(f: (A) => Boolean): Option[A]", "member" : "zio.prelude.ForEach.find", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#find[A](fa:F[A])(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.exists", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#exists[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(fa: F[A])(f: (A) => Boolean): Int", "member" : "zio.prelude.ForEach.count", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#count[A](fa:F[A])(f:A=>Boolean):Int", "kind" : "def"}, {"label" : "contains", "tail" : "(fa: F[A])(a: A1)(A: Equal[A1]): Boolean", "member" : "zio.prelude.ForEach.contains", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#contains[A,A1>:A](fa:F[A])(a:A1)(implicitA:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forEach", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.ForEach.forEach", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#forEach[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$1:zio.prelude.IdentityBoth[G],implicitevidence$2:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualForEach.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.DeriveEqualIdentityBothInvariant", "object" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(deriveEqual0: DeriveEqual[F], identityBoth0: IdentityBoth[F], invariant0: Invariant[F]): DeriveEqualIdentityBothInvariant[F]", "member" : "zio.prelude.coherent.DeriveEqualIdentityBothInvariant.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#derive[F[_]](implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitidentityBoth0:zio.prelude.IdentityBoth[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.DeriveEqualIdentityBothInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "any", "tail" : "(): F[Any]", "member" : "zio.prelude.IdentityBoth.any", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#any:F[Any]", "kind" : "abstract def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityBothInvariant.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.DeriveEqualIdentityEitherInvariant", "object" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html", "members_object" : [{"label" : "derive", "tail" : "(deriveEqual0: DeriveEqual[F], identityEither0: IdentityEither[F], invariant0: Invariant[F]): DeriveEqualIdentityEitherInvariant[F]", "member" : "zio.prelude.coherent.DeriveEqualIdentityEitherInvariant.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#derive[F[_]](implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitidentityEither0:zio.prelude.IdentityEither[F],implicitinvariant0:zio.prelude.Invariant[F]):zio.prelude.coherent.DeriveEqualIdentityEitherInvariant[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "none", "tail" : "(): F[Nothing]", "member" : "zio.prelude.IdentityEither.none", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#none:F[Nothing]", "kind" : "abstract def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/coherent\/DeriveEqualIdentityEitherInvariant.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.DeriveEqualNonEmptyForEach", "object" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html", "members_object" : [{"label" : "derive", "tail" : "(deriveEqual0: DeriveEqual[F], nonEmptyForEach0: NonEmptyForEach[F]): DeriveEqualNonEmptyForEach[F]", "member" : "zio.prelude.coherent.DeriveEqualNonEmptyForEach.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#derive[F[+_]](implicitderiveEqual0:zio.prelude.DeriveEqual[F],implicitnonEmptyForEach0:zio.prelude.NonEmptyForEach[F]):zio.prelude.coherent.DeriveEqualNonEmptyForEach[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html", "kind" : "trait", "members_trait" : [{"label" : "toNonEmptyList", "tail" : "(fa: F[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyForEach.toNonEmptyList", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#toNonEmptyList[A](fa:F[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "toNonEmptyChunk", "tail" : "(fa: F[A]): NonEmptyChunk[A]", "member" : "zio.prelude.NonEmptyForEach.toNonEmptyChunk", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#toNonEmptyChunk[A](fa:F[A]):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "reduceMapRight", "tail" : "(fa: F[A])(map: (A) => B)(reduce: (A, B) => B): B", "member" : "zio.prelude.NonEmptyForEach.reduceMapRight", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceMapRight[A,B](fa:F[A])(map:A=>B)(reduce:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceMapLeft", "tail" : "(fa: F[A])(map: (A) => B)(reduce: (B, A) => B): B", "member" : "zio.prelude.NonEmptyForEach.reduceMapLeft", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceMapLeft[A,B](fa:F[A])(map:A=>B)(reduce:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): B", "member" : "zio.prelude.NonEmptyForEach.reduceMap", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$16:zio.prelude.Associative[B]):B", "kind" : "def"}, {"label" : "reduceIdempotent1", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): A", "member" : "zio.prelude.NonEmptyForEach.reduceIdempotent1", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceIdempotent1[A](fa:F[A])(implicitevidence$14:zio.prelude.Idempotent[A],implicitevidence$15:zio.prelude.Equal[A]):A", "kind" : "def"}, {"label" : "reduce1", "tail" : "(fa: F[A])(arg0: Associative[A]): A", "member" : "zio.prelude.NonEmptyForEach.reduce1", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduce1[A](fa:F[A])(implicitevidence$13:zio.prelude.Associative[A]):A", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(fa: F[A])(f: (A, A) => A): A", "member" : "zio.prelude.NonEmptyForEach.reduceAll", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceAll[A](fa:F[A])(f:(A,A)=>A):A", "kind" : "def"}, {"label" : "minBy", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): A", "member" : "zio.prelude.NonEmptyForEach.minBy", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#minBy[A,B](fa:F[A])(f:A=>B)(implicitevidence$12:zio.prelude.Ord[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(fa: F[A])(arg0: Ord[A]): A", "member" : "zio.prelude.NonEmptyForEach.min", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#min[A](fa:F[A])(implicitevidence$11:zio.prelude.Ord[A]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): A", "member" : "zio.prelude.NonEmptyForEach.maxBy", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#maxBy[A,B](fa:F[A])(f:A=>B)(implicitevidence$10:zio.prelude.Ord[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(fa: F[A])(arg0: Ord[A]): A", "member" : "zio.prelude.NonEmptyForEach.max", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#max[A](fa:F[A])(implicitevidence$9:zio.prelude.Ord[A]):A", "kind" : "def"}, {"label" : "forEach1_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.NonEmptyForEach.forEach1_", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#forEach1_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$7:zio.prelude.AssociativeBoth[G],implicitevidence$8:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forEach", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.NonEmptyForEach.forEach", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#forEach[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$5:zio.prelude.IdentityBoth[G],implicitevidence$6:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "def"}, {"label" : "flip1", "tail" : "(fa: F[G[A]])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.NonEmptyForEach.flip1", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#flip1[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.AssociativeBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: ForEach[G]): ForEach[[+A]F[G[A]]]", "member" : "zio.prelude.ForEach.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#compose[G[+_]](implicitevidence$29:zio.prelude.ForEach[G]):zio.prelude.ForEach[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(fa: F[A]): F[(A, Int)]", "member" : "zio.prelude.ForEach.zipWithIndex", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#zipWithIndex[A](fa:F[A]):F[(A,Int)]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(fa: F[A], fb: F[B])(f: (These[A, B]) => C)(both: IdentityBoth[F], either: IdentityEither[F]): F[C]", "member" : "zio.prelude.ForEach.zipAllWith", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#zipAllWith[A,B,C](fa:F[A],fb:F[B])(f:zio.prelude.These[A,B]=>C)(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(fa: F[A], fb: F[B])(both: IdentityBoth[F], either: IdentityEither[F]): F[These[A, B]]", "member" : "zio.prelude.ForEach.zipAll", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#zipAll[A,B,C](fa:F[A],fb:F[B])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[zio.prelude.These[A,B]]", "kind" : "def"}, {"label" : "toList", "tail" : "(fa: F[A]): List[A]", "member" : "zio.prelude.ForEach.toList", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#toList[A](fa:F[A]):List[A]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(fa: F[A]): Chunk[A]", "member" : "zio.prelude.ForEach.toChunk", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#toChunk[A](fa:F[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A])(ev: Identity[Sum[A]]): A", "member" : "zio.prelude.ForEach.sum", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#sum[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[A]]):A", "kind" : "def"}, {"label" : "size", "tail" : "(fa: F[A]): Int", "member" : "zio.prelude.ForEach.size", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#size[A](fa:F[A]):Int", "kind" : "def"}, {"label" : "reverse", "tail" : "(fa: F[A]): F[A]", "member" : "zio.prelude.ForEach.reverse", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reverse[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(fa: F[A])(f: (A, A) => A): Option[A]", "member" : "zio.prelude.ForEach.reduceOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceOption[A](fa:F[A])(f:(A,A)=>A):Option[A]", "kind" : "def"}, {"label" : "reduceMapOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): Option[B]", "member" : "zio.prelude.ForEach.reduceMapOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceMapOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$28:zio.prelude.Associative[B]):Option[B]", "kind" : "def"}, {"label" : "reduceIdentity", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.reduceIdentity", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceIdentity[A](fa:F[A])(implicitevidence$27:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "reduceIdempotent", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceIdempotent", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceIdempotent[A](fa:F[A])(implicitevidence$25:zio.prelude.Idempotent[A],implicitevidence$26:zio.prelude.Equal[A]):Option[A]", "kind" : "def"}, {"label" : "reduceAssociative", "tail" : "(fa: F[A])(arg0: Associative[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceAssociative", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#reduceAssociative[A](fa:F[A])(implicitevidence$24:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A])(ev: Identity[Prod[A]]): A", "member" : "zio.prelude.ForEach.product", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#product[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Prod[A]]):A", "kind" : "def"}, {"label" : "partitionMapM", "tail" : "(fa: F[A])(f: (A) => G[Either[B, C]])(arg0: IdentityFlatten[G], arg1: Covariant[G], both: IdentityBoth[F], either: IdentityEither[F]): G[(F[B], F[C])]", "member" : "zio.prelude.ForEach.partitionMapM", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#partitionMapM[G[+_],A,B,C](fa:F[A])(f:A=>G[Either[B,C]])(implicitevidence$22:zio.prelude.IdentityFlatten[G],implicitevidence$23:zio.prelude.Covariant[G],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):G[(F[B],F[C])]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(fa: F[A])(f: (A) => Either[B, C])(both: IdentityBoth[F], either: IdentityEither[F]): (F[B], F[C])", "member" : "zio.prelude.ForEach.partitionMap", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#partitionMap[A,B,C](fa:F[A])(f:A=>Either[B,C])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):(F[B],F[C])", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.nonEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#nonEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "minByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.minByOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#minByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$21:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "minOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.minOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#minOption[A](fa:F[A])(implicitevidence$20:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.maxByOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#maxByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$19:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.maxOption", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#maxOption[A](fa:F[A])(implicitevidence$18:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(fa: F[A])(s: S)(f: (S, A) => (S, B)): (S, F[B])", "member" : "zio.prelude.ForEach.mapAccum", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#mapAccum[S,A,B](fa:F[A])(s:S)(f:(S,A)=>(S,B)):(S,F[B])", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.ForEach.map", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.isEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#isEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "groupByNonEmptyM", "tail" : "(fa: F[V])(f: (V) => G[K])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Map[K, NonEmptyChunk[V]]]", "member" : "zio.prelude.ForEach.groupByNonEmptyM", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#groupByNonEmptyM[G[+_],V,K](fa:F[V])(f:V=>G[K])(implicitevidence$16:zio.prelude.IdentityBoth[G],implicitevidence$17:zio.prelude.Covariant[G]):G[Map[K,zio.NonEmptyChunk[V]]]", "kind" : "def"}, {"label" : "groupByNonEmpty", "tail" : "(fa: F[V])(f: (V) => K): Map[K, NonEmptyChunk[V]]", "member" : "zio.prelude.ForEach.groupByNonEmpty", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#groupByNonEmpty[V,K](fa:F[V])(f:V=>K):Map[K,zio.NonEmptyChunk[V]]", "kind" : "def"}, {"label" : "forEach_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.ForEach.forEach_", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#forEach_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$14:zio.prelude.IdentityBoth[G],implicitevidence$15:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forall", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.forall", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#forall[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foldRightM", "tail" : "(fa: F[A])(s: S)(f: (A, S) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldRightM", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldRightM[G[+_],S,A](fa:F[A])(s:S)(f:(A,S)=>G[S])(implicitevidence$12:zio.prelude.IdentityFlatten[G],implicitevidence$13:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(fa: F[A])(s: S)(f: (A, S) => S): S", "member" : "zio.prelude.ForEach.foldRight", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldRight[S,A](fa:F[A])(s:S)(f:(A,S)=>S):S", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: Covariant[G], arg1: IdentityFlatten[G], arg2: Identity[B]): G[B]", "member" : "zio.prelude.ForEach.foldMapM", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldMapM[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$9:zio.prelude.Covariant[G],implicitevidence$10:zio.prelude.IdentityFlatten[G],implicitevidence$11:zio.prelude.Identity[B]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Identity[B]): B", "member" : "zio.prelude.ForEach.foldMap", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$8:zio.prelude.Identity[B]):B", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(fa: F[A])(s: S)(f: (S, A) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldLeftM", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldLeftM[G[+_],S,A](fa:F[A])(s:S)(f:(S,A)=>G[S])(implicitevidence$6:zio.prelude.IdentityFlatten[G],implicitevidence$7:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(fa: F[A])(s: S)(f: (S, A) => S): S", "member" : "zio.prelude.ForEach.foldLeft", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#foldLeft[S,A](fa:F[A])(s:S)(f:(S,A)=>S):S", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.fold", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#fold[A](fa:F[A])(implicitevidence$5:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "flip", "tail" : "(fa: F[G[A]])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.ForEach.flip", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#flip[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.IdentityBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(fa: F[A])(f: (A) => Boolean): Option[A]", "member" : "zio.prelude.ForEach.find", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#find[A](fa:F[A])(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.exists", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#exists[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(fa: F[A])(f: (A) => Boolean): Int", "member" : "zio.prelude.ForEach.count", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#count[A](fa:F[A])(f:A=>Boolean):Int", "kind" : "def"}, {"label" : "contains", "tail" : "(fa: F[A])(a: A1)(A: Equal[A1]): Boolean", "member" : "zio.prelude.ForEach.contains", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#contains[A,A1>:A](fa:F[A])(a:A1)(implicitA:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forEach1", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.NonEmptyForEach.forEach1", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#forEach1[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$1:zio.prelude.AssociativeBoth[G],implicitevidence$2:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "abstract def"}, {"label" : "derive", "tail" : "(arg0: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/coherent\/DeriveEqualNonEmptyForEach.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.EqualIdempotent", "object" : "zio\/prelude\/coherent\/EqualIdempotent$.html", "members_object" : [{"label" : "derive", "tail" : "(idempotent0: Idempotent[A], equal0: Equal[A]): EqualIdempotent[A]", "member" : "zio.prelude.coherent.EqualIdempotent.derive", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#derive[A](implicitidempotent0:zio.prelude.Idempotent[A],implicitequal0:zio.prelude.Equal[A]):zio.prelude.coherent.EqualIdempotent[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdempotent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/EqualIdempotent.html", "kind" : "trait", "members_trait" : [{"label" : "idempotent", "tail" : "(A: Equal[A]): Idempotent[A]", "member" : "zio.prelude.Idempotent.idempotent", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#idempotent(implicitA:zio.prelude.Equal[A]):zio.prelude.Idempotent[A]", "kind" : "def"}, {"label" : "combineIdempotent", "tail" : "(l: => A, r: => A)(A: Equal[A]): A", "member" : "zio.prelude.Idempotent.combineIdempotent", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#combineIdempotent(l:=>A,r:=>A)(implicitA:zio.prelude.Equal[A]):A", "kind" : "final def"}, {"label" : "combineNormal", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Idempotent.combineNormal", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#combineNormal(l:=>A,r:=>A):A", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/EqualIdempotent.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.EqualIdentity", "object" : "zio\/prelude\/coherent\/EqualIdentity$.html", "members_object" : [{"label" : "derive", "tail" : "(identity0: Identity[A], equal0: Equal[A]): EqualIdentity[A]", "member" : "zio.prelude.coherent.EqualIdentity.derive", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#derive[A](implicitidentity0:zio.prelude.Identity[A],implicitequal0:zio.prelude.Equal[A]):zio.prelude.coherent.EqualIdentity[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdentity$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/EqualIdentity.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Identity.multiplyOption", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualIdentity.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "identity", "tail" : "(): A", "member" : "zio.prelude.Identity.identity", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#identity:A", "kind" : "abstract def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/EqualIdentity.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.EqualInverse", "object" : "zio\/prelude\/coherent\/EqualInverse$.html", "members_object" : [{"label" : "derive", "tail" : "(equal0: Equal[A], inverse0: Inverse[A]): EqualInverse[A]", "member" : "zio.prelude.coherent.EqualInverse.derive", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#derive[A](implicitequal0:zio.prelude.Equal[A],implicitinverse0:zio.prelude.Inverse[A]):zio.prelude.coherent.EqualInverse[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualInverse$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualInverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/EqualInverse.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Some[A]", "member" : "zio.prelude.Inverse.multiplyOption", "link" : "zio\/prelude\/coherent\/EqualInverse.html#multiplyOption(n:Int)(a:A):Some[A]", "kind" : "def"}, {"label" : "multiply", "tail" : "(n: Int)(a: A): A", "member" : "zio.prelude.Inverse.multiply", "link" : "zio\/prelude\/coherent\/EqualInverse.html#multiply(n:Int)(a:A):A", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/EqualInverse.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/EqualInverse.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/EqualInverse.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/EqualInverse.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/coherent\/EqualInverse.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/EqualInverse.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/EqualInverse.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/EqualInverse.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/coherent\/EqualInverse.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/EqualInverse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/EqualInverse.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/EqualInverse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/EqualInverse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/EqualInverse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/EqualInverse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/EqualInverse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/EqualInverse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/EqualInverse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/EqualInverse.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/EqualInverse.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/EqualInverse.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/EqualInverse.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/EqualInverse.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/EqualInverse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/EqualInverse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/EqualInverse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inverse", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Inverse.inverse", "link" : "zio\/prelude\/coherent\/EqualInverse.html#inverse(l:=>A,r:=>A):A", "kind" : "abstract def"}, {"label" : "identity", "tail" : "(): A", "member" : "zio.prelude.Identity.identity", "link" : "zio\/prelude\/coherent\/EqualInverse.html#identity:A", "kind" : "abstract def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/coherent\/EqualInverse.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/coherent\/EqualInverse.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.HashOrd", "object" : "zio\/prelude\/coherent\/HashOrd$.html", "members_object" : [{"label" : "default", "tail" : "(ord: scala.math.Ordering[A]): Hash[A] with Ord[A]", "member" : "zio.prelude.coherent.HashOrd.default", "link" : "zio\/prelude\/coherent\/HashOrd$.html#default[A](implicitord:scala.math.Ordering[A]):zio.prelude.Hash[A]withzio.prelude.Ord[A]", "kind" : "def"}, {"label" : "make", "tail" : "(hash0: (A) => Int, ord: (A, A) => Ordering): Hash[A] with Ord[A]", "member" : "zio.prelude.coherent.HashOrd.make", "link" : "zio\/prelude\/coherent\/HashOrd$.html#make[A](hash0:A=>Int,ord:(A,A)=>zio.prelude.Ordering):zio.prelude.Hash[A]withzio.prelude.Ord[A]", "kind" : "def"}, {"label" : "make", "tail" : "(hash0: (A) => Int, ord: (A, A) => Ordering, equal0: (A, A) => Boolean): Hash[A] with Ord[A]", "member" : "zio.prelude.coherent.HashOrd.make", "link" : "zio\/prelude\/coherent\/HashOrd$.html#make[A](hash0:A=>Int,ord:(A,A)=>zio.prelude.Ordering,equal0:(A,A)=>Boolean):zio.prelude.Hash[A]withzio.prelude.Ord[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(hash0: Hash[A], ord0: Ord[A]): HashOrd[A]", "member" : "zio.prelude.coherent.HashOrd.derive", "link" : "zio\/prelude\/coherent\/HashOrd$.html#derive[A](implicithash0:zio.prelude.Hash[A],implicitord0:zio.prelude.Ord[A]):zio.prelude.coherent.HashOrd[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/HashOrd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/HashOrd$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/HashOrd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/HashOrd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/HashOrd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/HashOrd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/HashOrd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/HashOrd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/HashOrd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/HashOrd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/HashOrd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/HashOrd$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/HashOrd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/HashOrd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/HashOrd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/HashOrd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/HashOrd.html", "kind" : "trait", "members_trait" : [{"label" : "contramap", "tail" : "(f: (B) => A): Hash[B] with Ord[B]", "member" : "zio.prelude.coherent.HashOrd.contramap", "link" : "zio\/prelude\/coherent\/HashOrd.html#contramap[B](f:B=>A):zio.prelude.Hash[B]withzio.prelude.Ord[B]", "kind" : "final def"}, {"label" : "toScala", "tail" : "(): scala.math.Ordering[A1]", "member" : "zio.prelude.Ord.toScala", "link" : "zio\/prelude\/coherent\/HashOrd.html#toScala[A1<:A]:scala.math.Ordering[A1]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Ord[A]", "member" : "zio.prelude.Ord.reverse", "link" : "zio\/prelude\/coherent\/HashOrd.html#reverse:zio.prelude.Ord[A]", "kind" : "final def"}, {"label" : "min", "tail" : "(l: A1, r: A1): A1", "member" : "zio.prelude.Ord.min", "link" : "zio\/prelude\/coherent\/HashOrd.html#min[A1<:A](l:A1,r:A1):A1", "kind" : "final def"}, {"label" : "max", "tail" : "(l: A1, r: A1): A1", "member" : "zio.prelude.Ord.max", "link" : "zio\/prelude\/coherent\/HashOrd.html#max[A1<:A](l:A1,r:A1):A1", "kind" : "final def"}, {"label" : "mapOrdering", "tail" : "(f: (Ordering) => Ordering): Ord[A]", "member" : "zio.prelude.Ord.mapOrdering", "link" : "zio\/prelude\/coherent\/HashOrd.html#mapOrdering(f:zio.prelude.Ordering=>zio.prelude.Ordering):zio.prelude.Ord[A]", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Ord[B])(f: (C) => Either[A, B]): Ord[C]", "member" : "zio.prelude.Ord.eitherWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#eitherWith[B,C](that:=>zio.prelude.Ord[B])(f:C=>Either[A,B]):zio.prelude.Ord[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Ord[B]): Ord[Either[A, B]]", "member" : "zio.prelude.Ord.either", "link" : "zio\/prelude\/coherent\/HashOrd.html#either[B](that:=>zio.prelude.Ord[B]):zio.prelude.Ord[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Ord[B])(f: (C) => (A, B)): Ord[C]", "member" : "zio.prelude.Ord.bothWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#bothWith[B,C](that:=>zio.prelude.Ord[B])(f:C=>(A,B)):zio.prelude.Ord[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Ord[B]): Ord[(A, B)]", "member" : "zio.prelude.Ord.both", "link" : "zio\/prelude\/coherent\/HashOrd.html#both[B](that:=>zio.prelude.Ord[B]):zio.prelude.Ord[(A,B)]", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Ord.checkEqual", "link" : "zio\/prelude\/coherent\/HashOrd.html#checkEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(l: A, r: A): Ordering", "member" : "zio.prelude.Ord.compare", "link" : "zio\/prelude\/coherent\/HashOrd.html#compare(l:A,r:A):zio.prelude.Ordering", "kind" : "final def"}, {"label" : "mapPartialOrdering", "tail" : "(f: (PartialOrdering) => PartialOrdering): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.mapPartialOrdering", "link" : "zio\/prelude\/coherent\/HashOrd.html#mapPartialOrdering(f:zio.prelude.PartialOrdering=>zio.prelude.PartialOrdering):zio.prelude.PartialOrd[A]", "kind" : "final def"}, {"label" : "lessOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.lessOrEqual", "link" : "zio\/prelude\/coherent\/HashOrd.html#lessOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "less", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.less", "link" : "zio\/prelude\/coherent\/HashOrd.html#less(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greaterOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greaterOrEqual", "link" : "zio\/prelude\/coherent\/HashOrd.html#greaterOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greater", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greater", "link" : "zio\/prelude\/coherent\/HashOrd.html#greater(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "eitherWith", "tail" : "(that: => PartialOrd[B])(f: (C) => Either[A, B]): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.eitherWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#eitherWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>Either[A,B]):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => PartialOrd[B]): PartialOrd[Either[A, B]]", "member" : "zio.prelude.PartialOrd.either", "link" : "zio\/prelude\/coherent\/HashOrd.html#either[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => PartialOrd[B])(f: (C) => (A, B)): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.bothWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#bothWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>(A,B)):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => PartialOrd[B]): PartialOrd[(A, B)]", "member" : "zio.prelude.PartialOrd.both", "link" : "zio\/prelude\/coherent\/HashOrd.html#both[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[(A,B)]", "kind" : "final def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/HashOrd.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/HashOrd.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/HashOrd.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/HashOrd.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/HashOrd.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/HashOrd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/HashOrd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/HashOrd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/HashOrd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/HashOrd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/HashOrd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/HashOrd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashOrd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/HashOrd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/HashOrd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/HashOrd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/HashOrd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/HashOrd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/HashOrd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/HashOrd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/HashOrd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/HashOrd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkCompare", "tail" : "(l: A, r: A): Ordering", "member" : "zio.prelude.Ord.checkCompare", "link" : "zio\/prelude\/coherent\/HashOrd.html#checkCompare(l:A,r:A):zio.prelude.Ordering", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(a: A): Int", "member" : "zio.prelude.Hash.hash", "link" : "zio\/prelude\/coherent\/HashOrd.html#hash(a:A):Int", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.coherent.HashPartialOrd", "object" : "zio\/prelude\/coherent\/HashPartialOrd$.html", "members_object" : [{"label" : "make", "tail" : "(hash0: (A) => Int, ord: (A, A) => PartialOrdering): Hash[A] with PartialOrd[A]", "member" : "zio.prelude.coherent.HashPartialOrd.make", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#make[A](hash0:A=>Int,ord:(A,A)=>zio.prelude.PartialOrdering):zio.prelude.Hash[A]withzio.prelude.PartialOrd[A]", "kind" : "def"}, {"label" : "make", "tail" : "(hash0: (A) => Int, ord: (A, A) => PartialOrdering, equal0: (A, A) => Boolean): Hash[A] with PartialOrd[A]", "member" : "zio.prelude.coherent.HashPartialOrd.make", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#make[A](hash0:A=>Int,ord:(A,A)=>zio.prelude.PartialOrdering,equal0:(A,A)=>Boolean):zio.prelude.Hash[A]withzio.prelude.PartialOrd[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(hash0: Hash[A], ord0: PartialOrd[A]): HashPartialOrd[A]", "member" : "zio.prelude.coherent.HashPartialOrd.derive", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#derive[A](implicithash0:zio.prelude.Hash[A],implicitord0:zio.prelude.PartialOrd[A]):zio.prelude.coherent.HashPartialOrd[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/HashPartialOrd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/coherent\/HashPartialOrd.html", "kind" : "trait", "members_trait" : [{"label" : "contramap", "tail" : "(f: (B) => A): Hash[B] with PartialOrd[B]", "member" : "zio.prelude.coherent.HashPartialOrd.contramap", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#contramap[B](f:B=>A):zio.prelude.Hash[B]withzio.prelude.PartialOrd[B]", "kind" : "def"}, {"label" : "mapPartialOrdering", "tail" : "(f: (PartialOrdering) => PartialOrdering): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.mapPartialOrdering", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#mapPartialOrdering(f:zio.prelude.PartialOrdering=>zio.prelude.PartialOrdering):zio.prelude.PartialOrd[A]", "kind" : "final def"}, {"label" : "lessOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.lessOrEqual", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#lessOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "less", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.less", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#less(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greaterOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greaterOrEqual", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#greaterOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greater", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greater", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#greater(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "eitherWith", "tail" : "(that: => PartialOrd[B])(f: (C) => Either[A, B]): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.eitherWith", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#eitherWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>Either[A,B]):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => PartialOrd[B]): PartialOrd[Either[A, B]]", "member" : "zio.prelude.PartialOrd.either", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#either[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => PartialOrd[B])(f: (C) => (A, B)): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.bothWith", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#bothWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>(A,B)):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => PartialOrd[B]): PartialOrd[(A, B)]", "member" : "zio.prelude.PartialOrd.both", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#both[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[(A,B)]", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.checkEqual", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#checkEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(l: A, r: A): PartialOrdering", "member" : "zio.prelude.PartialOrd.compare", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#compare(l:A,r:A):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkCompare", "tail" : "(l: A, r: A): PartialOrdering", "member" : "zio.prelude.PartialOrd.checkCompare", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#checkCompare(l:A,r:A):zio.prelude.PartialOrdering", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(a: A): Int", "member" : "zio.prelude.Hash.hash", "link" : "zio\/prelude\/coherent\/HashPartialOrd.html#hash(a:A):Int", "kind" : "abstract def"}], "shortDescription" : ""}], "zio.prelude.newtypes" : [{"name" : "zio.prelude.newtypes.And", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$And$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Tag", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#TagextendsAny", "kind" : "trait"}, {"label" : "unwrapAll", "tail" : "(value: F[Type]): F[Boolean]", "member" : "zio.prelude.NewtypeExports.Subtype.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$And$.html#unwrapAll[F[_]](value:F[Subtype.this.Type]):F[A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(value: Type): Boolean", "member" : "zio.prelude.NewtypeExports.Subtype.unwrap", "link" : "zio\/prelude\/newtypes\/package$$And$.html#unwrap(value:Subtype.this.Type):A", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Type", "link" : "zio\/prelude\/newtypes\/package$$And$.html#Type=Subtype.this.subtype.TypewithSubtype.this.Tag", "kind" : "type"}, {"label" : "subtype", "tail" : ": NewtypeModule.Subtype[Boolean]", "member" : "zio.prelude.NewtypeExports.Subtype.subtype", "link" : "zio\/prelude\/newtypes\/package$$And$.html#subtype:zio.prelude.NewtypeModule.instance.Subtype[A]", "kind" : "val"}, {"label" : "wrap", "tail" : "(value: Boolean): Type", "member" : "zio.prelude.NewtypeModule.Newtype.wrap", "link" : "zio\/prelude\/newtypes\/package$$And$.html#wrap(value:A):Newtype.this.Type", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type): Some[Boolean]", "member" : "zio.prelude.NewtypeModule.Newtype.unapply", "link" : "zio\/prelude\/newtypes\/package$$And$.html#unapply(value:Newtype.this.Type):Some[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(instance: TypeClass[Boolean]): TypeClass[Type]", "member" : "zio.prelude.NewtypeModule.Newtype.derive", "link" : "zio\/prelude\/newtypes\/package$$And$.html#derive[TypeClass[_]](implicitinstance:TypeClass[A]):TypeClass[Newtype.this.Type]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[Boolean]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$And$.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[Boolean]): QuotedAssertion[Boolean]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/newtypes\/package$$And$.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[Boolean])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/newtypes\/package$$And$.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: Boolean): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/newtypes\/package$$And$.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Boolean, values: Boolean*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$And$.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Boolean): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$And$.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$And$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$And$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$And$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$And$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$And$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$And$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$And$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$And$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$And$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$And$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$And$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$And$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$And$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$And$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$And$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$And$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$And$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$And$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$And$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.AndF", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$AndF$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$AndF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Failure", "shortDescription" : "A newtype representing another type in a failed state", "object" : "zio\/prelude\/newtypes\/package$$Failure$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Failure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.FailureIn", "shortDescription" : "A newtype representing an input error in another type", "object" : "zio\/prelude\/newtypes\/package$$FailureIn$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$FailureIn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.FailureOut", "shortDescription" : "A newtype representing an output error in another type", "object" : "zio\/prelude\/newtypes\/package$$FailureOut$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$FailureOut$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.First", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$First$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$First$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$First$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$First$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$First$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$First$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$First$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$First$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$First$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$First$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$First$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$First$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$First$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$First$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$First$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$First$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$First$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$First$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$First$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$First$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$First$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$First$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$First$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$First$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$First$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$First$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$First$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$First$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Last", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Last$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Last$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Last$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Max", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Max$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Max$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Max$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Min", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Min$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Min$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Min$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Natural", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Natural$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Tag", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#TagextendsAny", "kind" : "trait"}, {"label" : "minus", "tail" : "(x: Natural, y: Natural): Natural", "member" : "zio.prelude.newtypes.Natural.minus", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#minus(x:zio.prelude.newtypes.package.Natural,y:zio.prelude.newtypes.package.Natural):zio.prelude.newtypes.package.Natural", "kind" : "def"}, {"label" : "plus", "tail" : "(x: Natural, y: Natural): Natural", "member" : "zio.prelude.newtypes.Natural.plus", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#plus(x:zio.prelude.newtypes.package.Natural,y:zio.prelude.newtypes.package.Natural):zio.prelude.newtypes.package.Natural", "kind" : "def"}, {"label" : "times", "tail" : "(x: Natural, y: Natural): Natural", "member" : "zio.prelude.newtypes.Natural.times", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#times(x:zio.prelude.newtypes.package.Natural,y:zio.prelude.newtypes.package.Natural):zio.prelude.newtypes.package.Natural", "kind" : "def"}, {"label" : "successor", "tail" : "(n: Natural): Natural", "member" : "zio.prelude.newtypes.Natural.successor", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#successor(n:zio.prelude.newtypes.package.Natural):zio.prelude.newtypes.package.Natural", "kind" : "def"}, {"label" : "zero", "tail" : ": Natural", "member" : "zio.prelude.newtypes.Natural.zero", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#zero:zio.prelude.newtypes.package.Natural", "kind" : "val"}, {"label" : "one", "tail" : ": Natural", "member" : "zio.prelude.newtypes.Natural.one", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#one:zio.prelude.newtypes.package.Natural", "kind" : "val"}, {"label" : "assertion", "tail" : "(): QuotedAssertion[Int] { def magic: Int }", "member" : "zio.prelude.newtypes.Natural.assertion", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#assertion:zio.prelude.QuotedAssertion[Int]{defmagic:Int}", "kind" : "def"}, {"label" : "unwrapAll", "tail" : "(value: F[Type]): F[Int]", "member" : "zio.prelude.NewtypeExports.Subtype.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#unwrapAll[F[_]](value:F[Subtype.this.Type]):F[A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(value: Type): Int", "member" : "zio.prelude.NewtypeExports.Subtype.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#unwrap(value:Subtype.this.Type):A", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Type", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#Type=Subtype.this.subtype.TypewithSubtype.this.Tag", "kind" : "type"}, {"label" : "subtype", "tail" : ": NewtypeModule.Subtype[Int]", "member" : "zio.prelude.NewtypeExports.Subtype.subtype", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#subtype:zio.prelude.NewtypeModule.instance.Subtype[A]", "kind" : "val"}, {"label" : "wrap", "tail" : "(value: Int): Type", "member" : "zio.prelude.NewtypeModule.Newtype.wrap", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#wrap(value:A):Newtype.this.Type", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type): Some[Int]", "member" : "zio.prelude.NewtypeModule.Newtype.unapply", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#unapply(value:Newtype.this.Type):Some[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(instance: TypeClass[Int]): TypeClass[Type]", "member" : "zio.prelude.NewtypeModule.Newtype.derive", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#derive[TypeClass[_]](implicitinstance:TypeClass[A]):TypeClass[Newtype.this.Type]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[Int]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[Int]): QuotedAssertion[Int]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[Int])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: Int): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Int, values: Int*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Int): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Natural$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Or", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Or$.html", "members_object" : [{"label" : "Tag", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Tag", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#TagextendsAny", "kind" : "trait"}, {"label" : "unwrapAll", "tail" : "(value: F[Type]): F[Boolean]", "member" : "zio.prelude.NewtypeExports.Subtype.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#unwrapAll[F[_]](value:F[Subtype.this.Type]):F[A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(value: Type): Boolean", "member" : "zio.prelude.NewtypeExports.Subtype.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#unwrap(value:Subtype.this.Type):A", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Type", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#Type=Subtype.this.subtype.TypewithSubtype.this.Tag", "kind" : "type"}, {"label" : "subtype", "tail" : ": NewtypeModule.Subtype[Boolean]", "member" : "zio.prelude.NewtypeExports.Subtype.subtype", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#subtype:zio.prelude.NewtypeModule.instance.Subtype[A]", "kind" : "val"}, {"label" : "wrap", "tail" : "(value: Boolean): Type", "member" : "zio.prelude.NewtypeModule.Newtype.wrap", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#wrap(value:A):Newtype.this.Type", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type): Some[Boolean]", "member" : "zio.prelude.NewtypeModule.Newtype.unapply", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#unapply(value:Newtype.this.Type):Some[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(instance: TypeClass[Boolean]): TypeClass[Type]", "member" : "zio.prelude.NewtypeModule.Newtype.derive", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#derive[TypeClass[_]](implicitinstance:TypeClass[A]):TypeClass[Newtype.this.Type]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[Boolean]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[Boolean]): QuotedAssertion[Boolean]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[Boolean])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: Boolean): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Boolean, values: Boolean*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: Boolean): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Or$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Or$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.OrF", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$OrF$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$OrF$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Prod", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Prod$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Prod$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.newtypes.Sum", "shortDescription" : "", "object" : "zio\/prelude\/newtypes\/package$$Sum$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/newtypes\/package$$Sum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "zio.prelude" : [{"name" : "zio.prelude.AnySyntax", "shortDescription" : "", "members_class" : [{"label" : "tap", "tail" : "(f: (A) => Any): A", "member" : "zio.prelude.AnySyntax.tap", "link" : "zio\/prelude\/package$$AnySyntax.html#tap(f:A=>Any):A", "kind" : "def"}, {"label" : "|>", "tail" : "(f: (A) => B): B", "member" : "zio.prelude.AnySyntax.|>", "link" : "zio\/prelude\/package$$AnySyntax.html#|>[B](f:A=>B):B", "kind" : "def"}, {"label" : "ignore", "tail" : "(): Unit", "member" : "zio.prelude.AnySyntax.ignore", "link" : "zio\/prelude\/package$$AnySyntax.html#ignore:Unit", "kind" : "def"}, {"member" : "zio.prelude.AnySyntax#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/prelude\/package$$AnySyntax.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/prelude\/package$$AnySyntax.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/package$$AnySyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/package$$AnySyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/prelude\/package$$AnySyntax.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/prelude\/package$$AnySyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/prelude\/package$$AnySyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/package$$AnySyntax.html", "kind" : "class"}, {"name" : "zio.prelude.AnyType", "object" : "zio\/prelude\/AnyType$.html", "members_object" : [{"label" : "apply", "tail" : "(): AnyType[A]", "member" : "zio.prelude.AnyType.apply", "link" : "zio\/prelude\/AnyType$.html#apply[A]:zio.prelude.AnyType[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AnyType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AnyType$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AnyType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AnyType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AnyType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AnyType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AnyType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AnyType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AnyType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AnyType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AnyType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AnyType$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AnyType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AnyType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AnyType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AnyType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/AnyType.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AnyType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AnyType.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AnyType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AnyType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AnyType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AnyType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AnyType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AnyType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AnyType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AnyType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AnyType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AnyType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AnyType.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AnyType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AnyType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AnyType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AnyType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.Associative", "object" : "zio\/prelude\/Associative$.html", "members_object" : [{"label" : "VectorIdentity", "tail" : "(): Identity[Vector[A]]", "member" : "zio.prelude.Associative.VectorIdentity", "link" : "zio\/prelude\/Associative$.html#VectorIdentity[A]:zio.prelude.Identity[Vector[A]]", "kind" : "implicit def"}, {"label" : "Tuple22Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q], arg17: Associative[R], arg18: Associative[S], arg19: Associative[T], arg20: Associative[U], arg21: Associative[V]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Associative.Tuple22Associative", "link" : "zio\/prelude\/Associative$.html#Tuple22Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$236:zio.prelude.Associative[A],implicitevidence$237:zio.prelude.Associative[B],implicitevidence$238:zio.prelude.Associative[C],implicitevidence$239:zio.prelude.Associative[D],implicitevidence$240:zio.prelude.Associative[E],implicitevidence$241:zio.prelude.Associative[F],implicitevidence$242:zio.prelude.Associative[G],implicitevidence$243:zio.prelude.Associative[H],implicitevidence$244:zio.prelude.Associative[I],implicitevidence$245:zio.prelude.Associative[J],implicitevidence$246:zio.prelude.Associative[K],implicitevidence$247:zio.prelude.Associative[L],implicitevidence$248:zio.prelude.Associative[M],implicitevidence$249:zio.prelude.Associative[N],implicitevidence$250:zio.prelude.Associative[O],implicitevidence$251:zio.prelude.Associative[P],implicitevidence$252:zio.prelude.Associative[Q],implicitevidence$253:zio.prelude.Associative[R],implicitevidence$254:zio.prelude.Associative[S],implicitevidence$255:zio.prelude.Associative[T],implicitevidence$256:zio.prelude.Associative[U],implicitevidence$257:zio.prelude.Associative[V]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q], arg17: Associative[R], arg18: Associative[S], arg19: Associative[T], arg20: Associative[U]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Associative.Tuple21Associative", "link" : "zio\/prelude\/Associative$.html#Tuple21Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$215:zio.prelude.Associative[A],implicitevidence$216:zio.prelude.Associative[B],implicitevidence$217:zio.prelude.Associative[C],implicitevidence$218:zio.prelude.Associative[D],implicitevidence$219:zio.prelude.Associative[E],implicitevidence$220:zio.prelude.Associative[F],implicitevidence$221:zio.prelude.Associative[G],implicitevidence$222:zio.prelude.Associative[H],implicitevidence$223:zio.prelude.Associative[I],implicitevidence$224:zio.prelude.Associative[J],implicitevidence$225:zio.prelude.Associative[K],implicitevidence$226:zio.prelude.Associative[L],implicitevidence$227:zio.prelude.Associative[M],implicitevidence$228:zio.prelude.Associative[N],implicitevidence$229:zio.prelude.Associative[O],implicitevidence$230:zio.prelude.Associative[P],implicitevidence$231:zio.prelude.Associative[Q],implicitevidence$232:zio.prelude.Associative[R],implicitevidence$233:zio.prelude.Associative[S],implicitevidence$234:zio.prelude.Associative[T],implicitevidence$235:zio.prelude.Associative[U]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q], arg17: Associative[R], arg18: Associative[S], arg19: Associative[T]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Associative.Tuple20Associative", "link" : "zio\/prelude\/Associative$.html#Tuple20Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$195:zio.prelude.Associative[A],implicitevidence$196:zio.prelude.Associative[B],implicitevidence$197:zio.prelude.Associative[C],implicitevidence$198:zio.prelude.Associative[D],implicitevidence$199:zio.prelude.Associative[E],implicitevidence$200:zio.prelude.Associative[F],implicitevidence$201:zio.prelude.Associative[G],implicitevidence$202:zio.prelude.Associative[H],implicitevidence$203:zio.prelude.Associative[I],implicitevidence$204:zio.prelude.Associative[J],implicitevidence$205:zio.prelude.Associative[K],implicitevidence$206:zio.prelude.Associative[L],implicitevidence$207:zio.prelude.Associative[M],implicitevidence$208:zio.prelude.Associative[N],implicitevidence$209:zio.prelude.Associative[O],implicitevidence$210:zio.prelude.Associative[P],implicitevidence$211:zio.prelude.Associative[Q],implicitevidence$212:zio.prelude.Associative[R],implicitevidence$213:zio.prelude.Associative[S],implicitevidence$214:zio.prelude.Associative[T]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q], arg17: Associative[R], arg18: Associative[S]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Associative.Tuple19Associative", "link" : "zio\/prelude\/Associative$.html#Tuple19Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$176:zio.prelude.Associative[A],implicitevidence$177:zio.prelude.Associative[B],implicitevidence$178:zio.prelude.Associative[C],implicitevidence$179:zio.prelude.Associative[D],implicitevidence$180:zio.prelude.Associative[E],implicitevidence$181:zio.prelude.Associative[F],implicitevidence$182:zio.prelude.Associative[G],implicitevidence$183:zio.prelude.Associative[H],implicitevidence$184:zio.prelude.Associative[I],implicitevidence$185:zio.prelude.Associative[J],implicitevidence$186:zio.prelude.Associative[K],implicitevidence$187:zio.prelude.Associative[L],implicitevidence$188:zio.prelude.Associative[M],implicitevidence$189:zio.prelude.Associative[N],implicitevidence$190:zio.prelude.Associative[O],implicitevidence$191:zio.prelude.Associative[P],implicitevidence$192:zio.prelude.Associative[Q],implicitevidence$193:zio.prelude.Associative[R],implicitevidence$194:zio.prelude.Associative[S]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q], arg17: Associative[R]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Associative.Tuple18Associative", "link" : "zio\/prelude\/Associative$.html#Tuple18Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$158:zio.prelude.Associative[A],implicitevidence$159:zio.prelude.Associative[B],implicitevidence$160:zio.prelude.Associative[C],implicitevidence$161:zio.prelude.Associative[D],implicitevidence$162:zio.prelude.Associative[E],implicitevidence$163:zio.prelude.Associative[F],implicitevidence$164:zio.prelude.Associative[G],implicitevidence$165:zio.prelude.Associative[H],implicitevidence$166:zio.prelude.Associative[I],implicitevidence$167:zio.prelude.Associative[J],implicitevidence$168:zio.prelude.Associative[K],implicitevidence$169:zio.prelude.Associative[L],implicitevidence$170:zio.prelude.Associative[M],implicitevidence$171:zio.prelude.Associative[N],implicitevidence$172:zio.prelude.Associative[O],implicitevidence$173:zio.prelude.Associative[P],implicitevidence$174:zio.prelude.Associative[Q],implicitevidence$175:zio.prelude.Associative[R]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P], arg16: Associative[Q]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Associative.Tuple17Associative", "link" : "zio\/prelude\/Associative$.html#Tuple17Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$141:zio.prelude.Associative[A],implicitevidence$142:zio.prelude.Associative[B],implicitevidence$143:zio.prelude.Associative[C],implicitevidence$144:zio.prelude.Associative[D],implicitevidence$145:zio.prelude.Associative[E],implicitevidence$146:zio.prelude.Associative[F],implicitevidence$147:zio.prelude.Associative[G],implicitevidence$148:zio.prelude.Associative[H],implicitevidence$149:zio.prelude.Associative[I],implicitevidence$150:zio.prelude.Associative[J],implicitevidence$151:zio.prelude.Associative[K],implicitevidence$152:zio.prelude.Associative[L],implicitevidence$153:zio.prelude.Associative[M],implicitevidence$154:zio.prelude.Associative[N],implicitevidence$155:zio.prelude.Associative[O],implicitevidence$156:zio.prelude.Associative[P],implicitevidence$157:zio.prelude.Associative[Q]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O], arg15: Associative[P]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Associative.Tuple16Associative", "link" : "zio\/prelude\/Associative$.html#Tuple16Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$125:zio.prelude.Associative[A],implicitevidence$126:zio.prelude.Associative[B],implicitevidence$127:zio.prelude.Associative[C],implicitevidence$128:zio.prelude.Associative[D],implicitevidence$129:zio.prelude.Associative[E],implicitevidence$130:zio.prelude.Associative[F],implicitevidence$131:zio.prelude.Associative[G],implicitevidence$132:zio.prelude.Associative[H],implicitevidence$133:zio.prelude.Associative[I],implicitevidence$134:zio.prelude.Associative[J],implicitevidence$135:zio.prelude.Associative[K],implicitevidence$136:zio.prelude.Associative[L],implicitevidence$137:zio.prelude.Associative[M],implicitevidence$138:zio.prelude.Associative[N],implicitevidence$139:zio.prelude.Associative[O],implicitevidence$140:zio.prelude.Associative[P]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N], arg14: Associative[O]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Associative.Tuple15Associative", "link" : "zio\/prelude\/Associative$.html#Tuple15Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$110:zio.prelude.Associative[A],implicitevidence$111:zio.prelude.Associative[B],implicitevidence$112:zio.prelude.Associative[C],implicitevidence$113:zio.prelude.Associative[D],implicitevidence$114:zio.prelude.Associative[E],implicitevidence$115:zio.prelude.Associative[F],implicitevidence$116:zio.prelude.Associative[G],implicitevidence$117:zio.prelude.Associative[H],implicitevidence$118:zio.prelude.Associative[I],implicitevidence$119:zio.prelude.Associative[J],implicitevidence$120:zio.prelude.Associative[K],implicitevidence$121:zio.prelude.Associative[L],implicitevidence$122:zio.prelude.Associative[M],implicitevidence$123:zio.prelude.Associative[N],implicitevidence$124:zio.prelude.Associative[O]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M], arg13: Associative[N]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Associative.Tuple14Associative", "link" : "zio\/prelude\/Associative$.html#Tuple14Associative[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$96:zio.prelude.Associative[A],implicitevidence$97:zio.prelude.Associative[B],implicitevidence$98:zio.prelude.Associative[C],implicitevidence$99:zio.prelude.Associative[D],implicitevidence$100:zio.prelude.Associative[E],implicitevidence$101:zio.prelude.Associative[F],implicitevidence$102:zio.prelude.Associative[G],implicitevidence$103:zio.prelude.Associative[H],implicitevidence$104:zio.prelude.Associative[I],implicitevidence$105:zio.prelude.Associative[J],implicitevidence$106:zio.prelude.Associative[K],implicitevidence$107:zio.prelude.Associative[L],implicitevidence$108:zio.prelude.Associative[M],implicitevidence$109:zio.prelude.Associative[N]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L], arg12: Associative[M]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Associative.Tuple13Associative", "link" : "zio\/prelude\/Associative$.html#Tuple13Associative[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$83:zio.prelude.Associative[A],implicitevidence$84:zio.prelude.Associative[B],implicitevidence$85:zio.prelude.Associative[C],implicitevidence$86:zio.prelude.Associative[D],implicitevidence$87:zio.prelude.Associative[E],implicitevidence$88:zio.prelude.Associative[F],implicitevidence$89:zio.prelude.Associative[G],implicitevidence$90:zio.prelude.Associative[H],implicitevidence$91:zio.prelude.Associative[I],implicitevidence$92:zio.prelude.Associative[J],implicitevidence$93:zio.prelude.Associative[K],implicitevidence$94:zio.prelude.Associative[L],implicitevidence$95:zio.prelude.Associative[M]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K], arg11: Associative[L]): Associative[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Associative.Tuple12Associative", "link" : "zio\/prelude\/Associative$.html#Tuple12Associative[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$71:zio.prelude.Associative[A],implicitevidence$72:zio.prelude.Associative[B],implicitevidence$73:zio.prelude.Associative[C],implicitevidence$74:zio.prelude.Associative[D],implicitevidence$75:zio.prelude.Associative[E],implicitevidence$76:zio.prelude.Associative[F],implicitevidence$77:zio.prelude.Associative[G],implicitevidence$78:zio.prelude.Associative[H],implicitevidence$79:zio.prelude.Associative[I],implicitevidence$80:zio.prelude.Associative[J],implicitevidence$81:zio.prelude.Associative[K],implicitevidence$82:zio.prelude.Associative[L]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J], arg10: Associative[K]): Associative[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Associative.Tuple11Associative", "link" : "zio\/prelude\/Associative$.html#Tuple11Associative[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$60:zio.prelude.Associative[A],implicitevidence$61:zio.prelude.Associative[B],implicitevidence$62:zio.prelude.Associative[C],implicitevidence$63:zio.prelude.Associative[D],implicitevidence$64:zio.prelude.Associative[E],implicitevidence$65:zio.prelude.Associative[F],implicitevidence$66:zio.prelude.Associative[G],implicitevidence$67:zio.prelude.Associative[H],implicitevidence$68:zio.prelude.Associative[I],implicitevidence$69:zio.prelude.Associative[J],implicitevidence$70:zio.prelude.Associative[K]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I], arg9: Associative[J]): Associative[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Associative.Tuple10Associative", "link" : "zio\/prelude\/Associative$.html#Tuple10Associative[A,B,C,D,E,F,G,H,I,J](implicitevidence$50:zio.prelude.Associative[A],implicitevidence$51:zio.prelude.Associative[B],implicitevidence$52:zio.prelude.Associative[C],implicitevidence$53:zio.prelude.Associative[D],implicitevidence$54:zio.prelude.Associative[E],implicitevidence$55:zio.prelude.Associative[F],implicitevidence$56:zio.prelude.Associative[G],implicitevidence$57:zio.prelude.Associative[H],implicitevidence$58:zio.prelude.Associative[I],implicitevidence$59:zio.prelude.Associative[J]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H], arg8: Associative[I]): Associative[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Associative.Tuple9Associative", "link" : "zio\/prelude\/Associative$.html#Tuple9Associative[A,B,C,D,E,F,G,H,I](implicitevidence$41:zio.prelude.Associative[A],implicitevidence$42:zio.prelude.Associative[B],implicitevidence$43:zio.prelude.Associative[C],implicitevidence$44:zio.prelude.Associative[D],implicitevidence$45:zio.prelude.Associative[E],implicitevidence$46:zio.prelude.Associative[F],implicitevidence$47:zio.prelude.Associative[G],implicitevidence$48:zio.prelude.Associative[H],implicitevidence$49:zio.prelude.Associative[I]):zio.prelude.Associative[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G], arg7: Associative[H]): Associative[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Associative.Tuple8Associative", "link" : "zio\/prelude\/Associative$.html#Tuple8Associative[A,B,C,D,E,F,G,H](implicitevidence$33:zio.prelude.Associative[A],implicitevidence$34:zio.prelude.Associative[B],implicitevidence$35:zio.prelude.Associative[C],implicitevidence$36:zio.prelude.Associative[D],implicitevidence$37:zio.prelude.Associative[E],implicitevidence$38:zio.prelude.Associative[F],implicitevidence$39:zio.prelude.Associative[G],implicitevidence$40:zio.prelude.Associative[H]):zio.prelude.Associative[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F], arg6: Associative[G]): Associative[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Associative.Tuple7Associative", "link" : "zio\/prelude\/Associative$.html#Tuple7Associative[A,B,C,D,E,F,G](implicitevidence$26:zio.prelude.Associative[A],implicitevidence$27:zio.prelude.Associative[B],implicitevidence$28:zio.prelude.Associative[C],implicitevidence$29:zio.prelude.Associative[D],implicitevidence$30:zio.prelude.Associative[E],implicitevidence$31:zio.prelude.Associative[F],implicitevidence$32:zio.prelude.Associative[G]):zio.prelude.Associative[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E], arg5: Associative[F]): Associative[(A, B, C, D, E, F)]", "member" : "zio.prelude.Associative.Tuple6Associative", "link" : "zio\/prelude\/Associative$.html#Tuple6Associative[A,B,C,D,E,F](implicitevidence$20:zio.prelude.Associative[A],implicitevidence$21:zio.prelude.Associative[B],implicitevidence$22:zio.prelude.Associative[C],implicitevidence$23:zio.prelude.Associative[D],implicitevidence$24:zio.prelude.Associative[E],implicitevidence$25:zio.prelude.Associative[F]):zio.prelude.Associative[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D], arg4: Associative[E]): Associative[(A, B, C, D, E)]", "member" : "zio.prelude.Associative.Tuple5Associative", "link" : "zio\/prelude\/Associative$.html#Tuple5Associative[A,B,C,D,E](implicitevidence$15:zio.prelude.Associative[A],implicitevidence$16:zio.prelude.Associative[B],implicitevidence$17:zio.prelude.Associative[C],implicitevidence$18:zio.prelude.Associative[D],implicitevidence$19:zio.prelude.Associative[E]):zio.prelude.Associative[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C], arg3: Associative[D]): Associative[(A, B, C, D)]", "member" : "zio.prelude.Associative.Tuple4Associative", "link" : "zio\/prelude\/Associative$.html#Tuple4Associative[A,B,C,D](implicitevidence$11:zio.prelude.Associative[A],implicitevidence$12:zio.prelude.Associative[B],implicitevidence$13:zio.prelude.Associative[C],implicitevidence$14:zio.prelude.Associative[D]):zio.prelude.Associative[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B], arg2: Associative[C]): Associative[(A, B, C)]", "member" : "zio.prelude.Associative.Tuple3Associative", "link" : "zio\/prelude\/Associative$.html#Tuple3Associative[A,B,C](implicitevidence$8:zio.prelude.Associative[A],implicitevidence$9:zio.prelude.Associative[B],implicitevidence$10:zio.prelude.Associative[C]):zio.prelude.Associative[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Associative", "tail" : "(arg0: Associative[A], arg1: Associative[B]): Associative[(A, B)]", "member" : "zio.prelude.Associative.Tuple2Associative", "link" : "zio\/prelude\/Associative$.html#Tuple2Associative[A,B](implicitevidence$6:zio.prelude.Associative[A],implicitevidence$7:zio.prelude.Associative[B]):zio.prelude.Associative[(A,B)]", "kind" : "implicit def"}, {"label" : "StringIdentity", "tail" : ": Identity[String]", "member" : "zio.prelude.Associative.StringIdentity", "link" : "zio\/prelude\/Associative$.html#StringIdentity:zio.prelude.Identity[String]", "kind" : "implicit val"}, {"label" : "ShortSumCommutativeIdentity", "tail" : ": Commutative[Sum[Short]] with Inverse[Sum[Short]]", "member" : "zio.prelude.Associative.ShortSumCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#ShortSumCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Short]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Short]]", "kind" : "implicit val"}, {"label" : "ShortProdCommutativeIdentity", "tail" : ": Commutative[Prod[Short]] with Identity[Prod[Short]]", "member" : "zio.prelude.Associative.ShortProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#ShortProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Short]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Short]]", "kind" : "implicit val"}, {"label" : "ShortMinIdempotentIdentity", "tail" : ": Commutative[Min[Short]] with Idempotent[Min[Short]]", "member" : "zio.prelude.Associative.ShortMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#ShortMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Short]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Short]]", "kind" : "implicit val"}, {"label" : "ShortMaxIdempotentIdentity", "tail" : ": Commutative[Max[Short]] with Idempotent[Max[Short]]", "member" : "zio.prelude.Associative.ShortMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#ShortMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Short]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Short]]", "kind" : "implicit val"}, {"label" : "SetIdempotentInverse", "tail" : "(): Commutative[Set[A]] with Idempotent[Set[A]] with Inverse[Set[A]]", "member" : "zio.prelude.Associative.SetIdempotentInverse", "link" : "zio\/prelude\/Associative$.html#SetIdempotentInverse[A]:zio.prelude.Commutative[Set[A]]withzio.prelude.Idempotent[Set[A]]withzio.prelude.Inverse[Set[A]]", "kind" : "implicit def"}, {"label" : "OptionIdentity", "tail" : "(arg0: Associative[A]): Identity[Option[A]]", "member" : "zio.prelude.Associative.OptionIdentity", "link" : "zio\/prelude\/Associative$.html#OptionIdentity[A](implicitevidence$5:zio.prelude.Associative[A]):zio.prelude.Identity[Option[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyChunkAssociative", "tail" : "(): Associative[NonEmptyChunk[A]]", "member" : "zio.prelude.Associative.NonEmptyChunkAssociative", "link" : "zio\/prelude\/Associative$.html#NonEmptyChunkAssociative[A]:zio.prelude.Associative[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "NaturalSumCommutativeInverse", "tail" : ": Commutative[Sum[Natural]] with Inverse[Sum[Natural]]", "member" : "zio.prelude.Associative.NaturalSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#NaturalSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[zio.prelude.newtypes.Natural]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[zio.prelude.newtypes.Natural]]", "kind" : "implicit val"}, {"label" : "NaturalProdCommutativeIdentity", "tail" : ": Commutative[Prod[Natural]] with Identity[Prod[Natural]]", "member" : "zio.prelude.Associative.NaturalProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#NaturalProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[zio.prelude.newtypes.Natural]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[zio.prelude.newtypes.Natural]]", "kind" : "implicit val"}, {"label" : "MinCommutative", "tail" : "(arg0: Ord[A]): Commutative[Min[A]]", "member" : "zio.prelude.Associative.MinCommutative", "link" : "zio\/prelude\/Associative$.html#MinCommutative[A](implicitevidence$4:zio.prelude.Ord[A]):zio.prelude.Commutative[zio.prelude.newtypes.Min[A]]", "kind" : "implicit def"}, {"label" : "MaxCommutative", "tail" : "(arg0: Ord[A]): Commutative[Max[A]]", "member" : "zio.prelude.Associative.MaxCommutative", "link" : "zio\/prelude\/Associative$.html#MaxCommutative[A](implicitevidence$3:zio.prelude.Ord[A]):zio.prelude.Commutative[zio.prelude.newtypes.Max[A]]", "kind" : "implicit def"}, {"label" : "MapIdentity", "tail" : "(arg0: Associative[V]): Identity[Map[K, V]]", "member" : "zio.prelude.Associative.MapIdentity", "link" : "zio\/prelude\/Associative$.html#MapIdentity[K,V](implicitevidence$2:zio.prelude.Associative[V]):zio.prelude.Identity[Map[K,V]]", "kind" : "implicit def"}, {"label" : "LongSumCommutativeInverse", "tail" : ": Commutative[Sum[Long]] with Inverse[Sum[Long]]", "member" : "zio.prelude.Associative.LongSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#LongSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Long]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Long]]", "kind" : "implicit val"}, {"label" : "LongProdCommutativeIdentity", "tail" : ": Commutative[Prod[Long]] with Identity[Prod[Long]]", "member" : "zio.prelude.Associative.LongProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#LongProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Long]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Long]]", "kind" : "implicit val"}, {"label" : "LongMinIdempotentIdentity", "tail" : ": Commutative[Min[Long]] with Idempotent[Min[Long]]", "member" : "zio.prelude.Associative.LongMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#LongMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Long]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Long]]", "kind" : "implicit val"}, {"label" : "LongMaxIdempotentIdentity", "tail" : ": Commutative[Max[Long]] with Idempotent[Max[Long]]", "member" : "zio.prelude.Associative.LongMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#LongMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Long]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Long]]", "kind" : "implicit val"}, {"label" : "ListIdentity", "tail" : "(): Identity[List[A]]", "member" : "zio.prelude.Associative.ListIdentity", "link" : "zio\/prelude\/Associative$.html#ListIdentity[A]:zio.prelude.Identity[List[A]]", "kind" : "implicit def"}, {"label" : "LastAssociative", "tail" : "(): Associative[Last[A]]", "member" : "zio.prelude.Associative.LastAssociative", "link" : "zio\/prelude\/Associative$.html#LastAssociative[A]:zio.prelude.Associative[zio.prelude.newtypes.Last[A]]", "kind" : "implicit def"}, {"label" : "IntMinIdempotentIdentity", "tail" : ": Commutative[Min[Int]] with Idempotent[Min[Int]]", "member" : "zio.prelude.Associative.IntMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#IntMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Int]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Int]]", "kind" : "implicit val"}, {"label" : "IntMaxIdempotentIdentity", "tail" : ": Commutative[Max[Int]] with Idempotent[Max[Int]]", "member" : "zio.prelude.Associative.IntMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#IntMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Int]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Int]]", "kind" : "implicit val"}, {"label" : "Function1Identity", "tail" : "(): Identity[(A) => A]", "member" : "zio.prelude.Associative.Function1Identity", "link" : "zio\/prelude\/Associative$.html#Function1Identity[A]:zio.prelude.Identity[A=>A]", "kind" : "implicit def"}, {"label" : "FloatSumCommutativeInverse", "tail" : ": Commutative[Sum[Float]] with Inverse[Sum[Float]]", "member" : "zio.prelude.Associative.FloatSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#FloatSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Float]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Float]]", "kind" : "implicit val"}, {"label" : "FloatProdCommutativeIdentity", "tail" : ": Commutative[Prod[Float]] with Identity[Prod[Float]]", "member" : "zio.prelude.Associative.FloatProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#FloatProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Float]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Float]]", "kind" : "implicit val"}, {"label" : "FloatMinCommutativeIdempotentIdentity", "tail" : ": Commutative[Min[Float]] with Idempotent[Min[Float]]", "member" : "zio.prelude.Associative.FloatMinCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#FloatMinCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Float]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Float]]", "kind" : "implicit val"}, {"label" : "FloatMaxCommutativeIdempotentIdentity", "tail" : ": Commutative[Max[Float]] with Idempotent[Max[Float]]", "member" : "zio.prelude.Associative.FloatMaxCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#FloatMaxCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Float]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Float]]", "kind" : "implicit val"}, {"label" : "FirstAssociative", "tail" : "(): Associative[First[A]]", "member" : "zio.prelude.Associative.FirstAssociative", "link" : "zio\/prelude\/Associative$.html#FirstAssociative[A]:zio.prelude.Associative[zio.prelude.newtypes.First[A]]", "kind" : "implicit def"}, {"label" : "EitherAssociative", "tail" : "(arg0: Associative[A]): Associative[Either[E, A]]", "member" : "zio.prelude.Associative.EitherAssociative", "link" : "zio\/prelude\/Associative$.html#EitherAssociative[E,A](implicitevidence$1:zio.prelude.Associative[A]):zio.prelude.Associative[Either[E,A]]", "kind" : "implicit def"}, {"label" : "DurationZIOCommutativeIdentity", "tail" : ": Commutative[Duration] with Identity[Duration]", "member" : "zio.prelude.Associative.DurationZIOCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#DurationZIOCommutativeIdentity:zio.prelude.Commutative[zio.duration.Duration]withzio.prelude.Identity[zio.duration.Duration]", "kind" : "implicit val"}, {"label" : "DoubleSumCommutativeInverse", "tail" : ": Commutative[Sum[Double]] with Inverse[Sum[Double]]", "member" : "zio.prelude.Associative.DoubleSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#DoubleSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Double]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Double]]", "kind" : "implicit val"}, {"label" : "DoubleProdCommutativeIdentity", "tail" : ": Commutative[Prod[Double]] with Identity[Prod[Double]]", "member" : "zio.prelude.Associative.DoubleProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#DoubleProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Double]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Double]]", "kind" : "implicit val"}, {"label" : "DoubleMinCommutativeIdempotentIdentity", "tail" : ": Commutative[Min[Double]] with Idempotent[Min[Double]]", "member" : "zio.prelude.Associative.DoubleMinCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#DoubleMinCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Double]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Double]]", "kind" : "implicit val"}, {"label" : "DoubleMaxCommutativeIdempotentIdentity", "tail" : ": Commutative[Max[Double]] with Idempotent[Max[Double]]", "member" : "zio.prelude.Associative.DoubleMaxCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#DoubleMaxCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Double]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Double]]", "kind" : "implicit val"}, {"label" : "DeriveAssociative", "tail" : "(derive: Derive[F, Associative], associative: Associative[A]): Associative[F[A]]", "member" : "zio.prelude.Associative.DeriveAssociative", "link" : "zio\/prelude\/Associative$.html#DeriveAssociative[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Associative],implicitassociative:zio.prelude.Associative[A]):zio.prelude.Associative[F[A]]", "kind" : "implicit def"}, {"label" : "ChunkIdentity", "tail" : "(): Identity[Chunk[A]]", "member" : "zio.prelude.Associative.ChunkIdentity", "link" : "zio\/prelude\/Associative$.html#ChunkIdentity[A]:zio.prelude.Identity[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "CharSumCommutativeInverse", "tail" : ": Commutative[Sum[Char]] with Inverse[Sum[Char]]", "member" : "zio.prelude.Associative.CharSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#CharSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Char]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Char]]", "kind" : "implicit val"}, {"label" : "CharProdCommutativeIdentity", "tail" : ": Commutative[Prod[Char]] with Identity[Prod[Char]]", "member" : "zio.prelude.Associative.CharProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#CharProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Char]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Char]]", "kind" : "implicit val"}, {"label" : "CharMinIdempotentIdentity", "tail" : ": Commutative[Min[Char]] with Idempotent[Min[Char]]", "member" : "zio.prelude.Associative.CharMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#CharMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Char]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Char]]", "kind" : "implicit val"}, {"label" : "CharMaxIdempotentIdentity", "tail" : ": Commutative[Max[Char]] with Idempotent[Max[Char]]", "member" : "zio.prelude.Associative.CharMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#CharMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Char]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Char]]", "kind" : "implicit val"}, {"label" : "ByteSumCommutativeInverse", "tail" : ": Commutative[Sum[Byte]] with Inverse[Sum[Byte]]", "member" : "zio.prelude.Associative.ByteSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#ByteSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Byte]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Byte]]", "kind" : "implicit val"}, {"label" : "ByteProdCommutativeIdentity", "tail" : ": Commutative[Prod[Byte]] with Identity[Prod[Byte]]", "member" : "zio.prelude.Associative.ByteProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#ByteProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Byte]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Byte]]", "kind" : "implicit val"}, {"label" : "ByteMinIdempotentIdentity", "tail" : ": Commutative[Min[Byte]] with Idempotent[Min[Byte]]", "member" : "zio.prelude.Associative.ByteMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#ByteMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Byte]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Byte]]", "kind" : "implicit val"}, {"label" : "ByteMaxIdempotentIdentity", "tail" : ": Commutative[Max[Byte]] with Idempotent[Max[Byte]]", "member" : "zio.prelude.Associative.ByteMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#ByteMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Byte]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Byte]]", "kind" : "implicit val"}, {"label" : "BigIntSumCommutativeInverse", "tail" : ": Commutative[Sum[BigInt]] with Inverse[Sum[BigInt]]", "member" : "zio.prelude.Associative.BigIntSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#BigIntSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[BigInt]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[BigInt]]", "kind" : "implicit val"}, {"label" : "BigIntProdCommutativeIdentity", "tail" : ": Commutative[Prod[BigInt]] with Identity[Prod[BigInt]]", "member" : "zio.prelude.Associative.BigIntProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#BigIntProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[BigInt]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[BigInt]]", "kind" : "implicit val"}, {"label" : "BigIntMinCommutativeIdempotentIdentity", "tail" : ": Commutative[Min[BigInt]] with Idempotent[Min[BigInt]]", "member" : "zio.prelude.Associative.BigIntMinCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#BigIntMinCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[BigInt]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[BigInt]]", "kind" : "implicit val"}, {"label" : "BigIntMaxCommutativeIdempotentIdentity", "tail" : ": Commutative[Max[BigInt]] with Idempotent[Max[BigInt]]", "member" : "zio.prelude.Associative.BigIntMaxCommutativeIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#BigIntMaxCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[BigInt]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[BigInt]]", "kind" : "implicit val"}, {"label" : "BigDecimalSumCommutativeIdempotent", "tail" : ": Commutative[Sum[BigDecimal]] with Idempotent[Sum[BigDecimal]]", "member" : "zio.prelude.Associative.BigDecimalSumCommutativeIdempotent", "link" : "zio\/prelude\/Associative$.html#BigDecimalSumCommutativeIdempotent:zio.prelude.Commutative[zio.prelude.newtypes.Sum[BigDecimal]]withzio.prelude.Idempotent[zio.prelude.newtypes.Sum[BigDecimal]]", "kind" : "implicit val"}, {"label" : "BigDecimalProdCommutativeIdempotent", "tail" : ": Commutative[Prod[BigDecimal]] with Idempotent[Prod[BigDecimal]]", "member" : "zio.prelude.Associative.BigDecimalProdCommutativeIdempotent", "link" : "zio\/prelude\/Associative$.html#BigDecimalProdCommutativeIdempotent:zio.prelude.Commutative[zio.prelude.newtypes.Prod[BigDecimal]]withzio.prelude.Idempotent[zio.prelude.newtypes.Prod[BigDecimal]]", "kind" : "implicit val"}, {"label" : "BigDecimalMinCommutativeIdempotent", "tail" : ": Commutative[Min[BigDecimal]] with Idempotent[Min[BigDecimal]]", "member" : "zio.prelude.Associative.BigDecimalMinCommutativeIdempotent", "link" : "zio\/prelude\/Associative$.html#BigDecimalMinCommutativeIdempotent:zio.prelude.Commutative[zio.prelude.newtypes.Min[BigDecimal]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[BigDecimal]]", "kind" : "implicit val"}, {"label" : "BigDecimalMaxCommutativeIdempotent", "tail" : ": Commutative[Max[BigDecimal]] with Idempotent[Max[BigDecimal]]", "member" : "zio.prelude.Associative.BigDecimalMaxCommutativeIdempotent", "link" : "zio\/prelude\/Associative$.html#BigDecimalMaxCommutativeIdempotent:zio.prelude.Commutative[zio.prelude.newtypes.Max[BigDecimal]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[BigDecimal]]", "kind" : "implicit val"}, {"label" : "BooleanSumCommutativeInverse", "tail" : ": Commutative[Sum[Boolean]] with Idempotent[Sum[Boolean]] with Inverse[Sum[Boolean]]", "member" : "zio.prelude.Associative.BooleanSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#BooleanSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Boolean]]withzio.prelude.Idempotent[zio.prelude.newtypes.Sum[Boolean]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Boolean]]", "kind" : "implicit val"}, {"label" : "BooleanProdCommutativeIdentity", "tail" : ": Commutative[Prod[Boolean]] with Idempotent[Prod[Boolean]] with Inverse[Prod[Boolean]]", "member" : "zio.prelude.Associative.BooleanProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#BooleanProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Boolean]]withzio.prelude.Idempotent[zio.prelude.newtypes.Prod[Boolean]]withzio.prelude.Inverse[zio.prelude.newtypes.Prod[Boolean]]", "kind" : "implicit val"}, {"label" : "BooleanMinIdempotentIdentity", "tail" : ": Commutative[Min[Boolean]] with Idempotent[Min[Boolean]]", "member" : "zio.prelude.Associative.BooleanMinIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#BooleanMinIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Min[Boolean]]withzio.prelude.Idempotent[zio.prelude.newtypes.Min[Boolean]]", "kind" : "implicit val"}, {"label" : "BooleanMaxIdempotentIdentity", "tail" : ": Commutative[Max[Boolean]] with Idempotent[Max[Boolean]]", "member" : "zio.prelude.Associative.BooleanMaxIdempotentIdentity", "link" : "zio\/prelude\/Associative$.html#BooleanMaxIdempotentIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Max[Boolean]]withzio.prelude.Idempotent[zio.prelude.newtypes.Max[Boolean]]", "kind" : "implicit val"}, {"label" : "BooleanDisjunctionIdempotentInverse", "tail" : ": Commutative[Or] with Idempotent[Or] with Inverse[Or]", "member" : "zio.prelude.Associative.BooleanDisjunctionIdempotentInverse", "link" : "zio\/prelude\/Associative$.html#BooleanDisjunctionIdempotentInverse:zio.prelude.Commutative[zio.prelude.newtypes.Or]withzio.prelude.Idempotent[zio.prelude.newtypes.Or]withzio.prelude.Inverse[zio.prelude.newtypes.Or]", "kind" : "implicit val"}, {"label" : "BooleanConjunctionIdempotentInverse", "tail" : ": Commutative[And] with Idempotent[And] with Inverse[And]", "member" : "zio.prelude.Associative.BooleanConjunctionIdempotentInverse", "link" : "zio\/prelude\/Associative$.html#BooleanConjunctionIdempotentInverse:zio.prelude.Commutative[zio.prelude.newtypes.And]withzio.prelude.Idempotent[zio.prelude.newtypes.And]withzio.prelude.Inverse[zio.prelude.newtypes.And]", "kind" : "implicit val"}, {"label" : "make", "tail" : "(f: (A, A) => A): Associative[A]", "member" : "zio.prelude.Associative.make", "link" : "zio\/prelude\/Associative$.html#make[A](f:(A,A)=>A):zio.prelude.Associative[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(associative: Associative[A]): Associative[A]", "member" : "zio.prelude.Associative.apply", "link" : "zio\/prelude\/Associative$.html#apply[A](implicitassociative:zio.prelude.Associative[A]):zio.prelude.Associative[A]", "kind" : "def"}, {"label" : "IntSumCommutativeInverse", "tail" : ": Commutative[Sum[Int]] with Inverse[Sum[Int]]", "member" : "zio.prelude.AssociativeLowPriority.IntSumCommutativeInverse", "link" : "zio\/prelude\/Associative$.html#IntSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Int]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Int]]", "kind" : "implicit val"}, {"label" : "IntProdCommutativeIdentity", "tail" : ": Commutative[Prod[Int]] with Identity[Prod[Int]]", "member" : "zio.prelude.AssociativeLowPriority.IntProdCommutativeIdentity", "link" : "zio\/prelude\/Associative$.html#IntProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Int]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Int]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Associative$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Associative$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Associative$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Associative$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Associative$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Associative$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Associative$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Associative$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Associative$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Associative$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Associative$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Associative$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Associative$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Associative$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Associative$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Associative$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Associative.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/Associative.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/Associative.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Associative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Associative.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Associative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Associative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Associative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Associative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Associative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Associative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Associative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Associative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Associative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Associative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Associative.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Associative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Associative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Associative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Associative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/Associative.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : "The Associative[A] type class describes an associative binary operatorfor a type A."}, {"name" : "zio.prelude.AssociativeBoth", "object" : "zio\/prelude\/AssociativeBoth$.html", "members_object" : [{"label" : "ZStreamAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]ZStream[R, E, a]]", "member" : "zio.prelude.AssociativeBoth.ZStreamAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZStreamAssociativeBoth[R,E]:zio.prelude.AssociativeBoth[[+a]zio.stream.ZStream[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZSTMAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]ZSTM[R, E, a]]", "member" : "zio.prelude.AssociativeBoth.ZSTMAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZSTMAssociativeBoth[R,E]:zio.prelude.AssociativeBoth[[+a]zio.stm.ZSTM[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZSinkAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]ZSink[R, E, I, I, a]]", "member" : "zio.prelude.AssociativeBoth.ZSinkAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZSinkAssociativeBoth[R,E,I]:zio.prelude.AssociativeBoth[[+a]zio.stream.ZSink[R,E,I,I,a]]", "kind" : "implicit def"}, {"label" : "ZManagedFailureAssociativeBoth", "tail" : "(): AssociativeBoth[[+e]Type[ZManaged[R, e, A]]]", "member" : "zio.prelude.AssociativeBoth.ZManagedFailureAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZManagedFailureAssociativeBoth[R,A]:zio.prelude.AssociativeBoth[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZManaged[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZManagedAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]ZManaged[R, E, a]]", "member" : "zio.prelude.AssociativeBoth.ZManagedAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZManagedAssociativeBoth[R,E]:zio.prelude.AssociativeBoth[[+a]zio.ZManaged[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZLayerIdentityBoth", "tail" : "(): IdentityBoth[[+a]ZLayer[R, E, a]]", "member" : "zio.prelude.AssociativeBoth.ZLayerIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZLayerIdentityBoth[R,E]:zio.prelude.IdentityBoth[[+a]zio.ZLayer[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZIOFailureIdentityBoth", "tail" : "(): IdentityBoth[[+e]Type[ZIO[R, e, A]]]", "member" : "zio.prelude.AssociativeBoth.ZIOFailureIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZIOFailureIdentityBoth[R,A]:zio.prelude.IdentityBoth[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZIO[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZIOIdentityBoth", "tail" : "(): IdentityBoth[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.AssociativeBoth.ZIOIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ZIOIdentityBoth[R,E]:zio.prelude.IdentityBoth[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "VectorAssociativeBoth", "tail" : ": AssociativeBoth[Vector]", "member" : "zio.prelude.AssociativeBoth.VectorAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#VectorAssociativeBoth:zio.prelude.AssociativeBoth[Vector]", "kind" : "implicit val"}, {"label" : "TryIdentityBoth", "tail" : ": IdentityBoth[Try]", "member" : "zio.prelude.AssociativeBoth.TryIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#TryIdentityBoth:zio.prelude.IdentityBoth[scala.util.Try]", "kind" : "implicit val"}, {"label" : "ScheduleOrAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]Type[Schedule[R, E, a]]]", "member" : "zio.prelude.AssociativeBoth.ScheduleOrAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ScheduleOrAssociativeBoth[R,E]:zio.prelude.AssociativeBoth[[+a]zio.prelude.newtypes.OrF.subtypeF.Type[zio.Schedule[R,E,a]]]", "kind" : "implicit def"}, {"label" : "ScheduleAndAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]Type[Schedule[R, E, a]]]", "member" : "zio.prelude.AssociativeBoth.ScheduleAndAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ScheduleAndAssociativeBoth[R,E]:zio.prelude.AssociativeBoth[[+a]zio.prelude.newtypes.AndF.subtypeF.Type[zio.Schedule[R,E,a]]]", "kind" : "implicit def"}, {"label" : "OptionIdentityBoth", "tail" : ": IdentityBoth[Option]", "member" : "zio.prelude.AssociativeBoth.OptionIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#OptionIdentityBoth:zio.prelude.IdentityBoth[Option]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkAssociativeBoth", "tail" : ": AssociativeBoth[NonEmptyChunk]", "member" : "zio.prelude.AssociativeBoth.NonEmptyChunkAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#NonEmptyChunkAssociativeBoth:zio.prelude.AssociativeBoth[zio.NonEmptyChunk]", "kind" : "implicit val"}, {"label" : "ListIdentityBoth", "tail" : ": IdentityBoth[List]", "member" : "zio.prelude.AssociativeBoth.ListIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ListIdentityBoth:zio.prelude.IdentityBoth[List]", "kind" : "implicit val"}, {"label" : "IdIdentityBoth", "tail" : ": IdentityBoth[prelude.Id]", "member" : "zio.prelude.AssociativeBoth.IdIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#IdIdentityBoth:zio.prelude.IdentityBoth[zio.prelude.Id]", "kind" : "implicit val"}, {"label" : "FutureIdentityBoth", "tail" : ": IdentityBoth[Future]", "member" : "zio.prelude.AssociativeBoth.FutureIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#FutureIdentityBoth:zio.prelude.IdentityBoth[scala.concurrent.Future]", "kind" : "implicit val"}, {"label" : "FiberAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]Fiber[E, a]]", "member" : "zio.prelude.AssociativeBoth.FiberAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#FiberAssociativeBoth[E]:zio.prelude.AssociativeBoth[[+a]zio.Fiber[E,a]]", "kind" : "implicit def"}, {"label" : "ExitAssociativeBoth", "tail" : "(): AssociativeBoth[[+a]Exit[E, a]]", "member" : "zio.prelude.AssociativeBoth.ExitAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ExitAssociativeBoth[E]:zio.prelude.AssociativeBoth[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "EitherFailedIdentityBoth", "tail" : "(): IdentityBoth[[+l]Type[Either[l, R]]]", "member" : "zio.prelude.AssociativeBoth.EitherFailedIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#EitherFailedIdentityBoth[R]:zio.prelude.IdentityBoth[[+l]zio.prelude.newtypes.Failure.newtypeF.Type[scala.util.Either[l,R]]]", "kind" : "implicit def"}, {"label" : "EitherIdentityBoth", "tail" : "(): IdentityBoth[[+r]Either[L, r]]", "member" : "zio.prelude.AssociativeBoth.EitherIdentityBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#EitherIdentityBoth[L]:zio.prelude.IdentityBoth[[+r]scala.util.Either[L,r]]", "kind" : "implicit def"}, {"label" : "ConstAssociativeBoth", "tail" : "(arg0: Associative[A]): AssociativeBoth[[+B]Type[A]]", "member" : "zio.prelude.AssociativeBoth.ConstAssociativeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ConstAssociativeBoth[A](implicitevidence$87:zio.prelude.Associative[A]):zio.prelude.AssociativeBoth[[+B]zio.prelude.Const.newtypeF.Type[A]]", "kind" : "implicit def"}, {"label" : "ChunkIdentityeBoth", "tail" : ": IdentityBoth[Chunk]", "member" : "zio.prelude.AssociativeBoth.ChunkIdentityeBoth", "link" : "zio\/prelude\/AssociativeBoth$.html#ChunkIdentityeBoth:zio.prelude.IdentityBoth[zio.Chunk]", "kind" : "implicit val"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20], a21: F[A21])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20],a21:F[A21])(implicitevidence$85:zio.prelude.AssociativeBoth[F],implicitevidence$86:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20])(implicitevidence$83:zio.prelude.AssociativeBoth[F],implicitevidence$84:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19])(implicitevidence$81:zio.prelude.AssociativeBoth[F],implicitevidence$82:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18])(implicitevidence$79:zio.prelude.AssociativeBoth[F],implicitevidence$80:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17])(implicitevidence$77:zio.prelude.AssociativeBoth[F],implicitevidence$78:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16])(implicitevidence$75:zio.prelude.AssociativeBoth[F],implicitevidence$76:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15])(implicitevidence$73:zio.prelude.AssociativeBoth[F],implicitevidence$74:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14])(implicitevidence$71:zio.prelude.AssociativeBoth[F],implicitevidence$72:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13])(implicitevidence$69:zio.prelude.AssociativeBoth[F],implicitevidence$70:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12])(implicitevidence$67:zio.prelude.AssociativeBoth[F],implicitevidence$68:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11])(implicitevidence$65:zio.prelude.AssociativeBoth[F],implicitevidence$66:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10])(implicitevidence$63:zio.prelude.AssociativeBoth[F],implicitevidence$64:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9])(implicitevidence$61:zio.prelude.AssociativeBoth[F],implicitevidence$62:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8])(implicitevidence$59:zio.prelude.AssociativeBoth[F],implicitevidence$60:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7])(implicitevidence$57:zio.prelude.AssociativeBoth[F],implicitevidence$58:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6])(implicitevidence$55:zio.prelude.AssociativeBoth[F],implicitevidence$56:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5])(implicitevidence$53:zio.prelude.AssociativeBoth[F],implicitevidence$54:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4])(implicitevidence$51:zio.prelude.AssociativeBoth[F],implicitevidence$52:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3])(implicitevidence$49:zio.prelude.AssociativeBoth[F],implicitevidence$50:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1,A2](a0:F[A0],a1:F[A1],a2:F[A2])(implicitevidence$47:zio.prelude.AssociativeBoth[F],implicitevidence$48:zio.prelude.Covariant[F]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[(A0, A1)]", "member" : "zio.prelude.AssociativeBoth.tupleN", "link" : "zio\/prelude\/AssociativeBoth$.html#tupleN[F[+_],A0,A1](a0:F[A0],a1:F[A1])(implicitevidence$45:zio.prelude.AssociativeBoth[F],implicitevidence$46:zio.prelude.Covariant[F]):F[(A0,A1)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20], a21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20],a21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$43:zio.prelude.AssociativeBoth[F],implicitevidence$44:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$41:zio.prelude.AssociativeBoth[F],implicitevidence$42:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$39:zio.prelude.AssociativeBoth[F],implicitevidence$40:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$37:zio.prelude.AssociativeBoth[F],implicitevidence$38:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$35:zio.prelude.AssociativeBoth[F],implicitevidence$36:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$33:zio.prelude.AssociativeBoth[F],implicitevidence$34:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$31:zio.prelude.AssociativeBoth[F],implicitevidence$32:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$29:zio.prelude.AssociativeBoth[F],implicitevidence$30:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$27:zio.prelude.AssociativeBoth[F],implicitevidence$28:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$25:zio.prelude.AssociativeBoth[F],implicitevidence$26:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$23:zio.prelude.AssociativeBoth[F],implicitevidence$24:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$21:zio.prelude.AssociativeBoth[F],implicitevidence$22:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$19:zio.prelude.AssociativeBoth[F],implicitevidence$20:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$17:zio.prelude.AssociativeBoth[F],implicitevidence$18:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$15:zio.prelude.AssociativeBoth[F],implicitevidence$16:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$13:zio.prelude.AssociativeBoth[F],implicitevidence$14:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$11:zio.prelude.AssociativeBoth[F],implicitevidence$12:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4])(f: (A0, A1, A2, A3, A4) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4])(f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$9:zio.prelude.AssociativeBoth[F],implicitevidence$10:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3])(f: (A0, A1, A2, A3) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3])(f:(A0,A1,A2,A3)=>B)(implicitevidence$7:zio.prelude.AssociativeBoth[F],implicitevidence$8:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2])(f: (A0, A1, A2) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,A2,B](a0:F[A0],a1:F[A1],a2:F[A2])(f:(A0,A1,A2)=>B)(implicitevidence$5:zio.prelude.AssociativeBoth[F],implicitevidence$6:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1])(f: (A0, A1) => B)(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBoth.mapN", "link" : "zio\/prelude\/AssociativeBoth$.html#mapN[F[+_],A0,A1,B](a0:F[A0],a1:F[A1])(f:(A0,A1)=>B)(implicitevidence$3:zio.prelude.AssociativeBoth[F],implicitevidence$4:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: AssociativeBoth[F], arg1: AssociativeBoth[G], f: Covariant[F], g: Covariant[G]): AssociativeBoth[[+A]F[G[A]]] with Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.AssociativeBoth.compose", "link" : "zio\/prelude\/AssociativeBoth$.html#compose[F[+_],G[+_]](implicitevidence$1:zio.prelude.AssociativeBoth[F],implicitevidence$2:zio.prelude.AssociativeBoth[G],implicitf:zio.prelude.Covariant[F],implicitg:zio.prelude.Covariant[G]):zio.prelude.AssociativeBoth[[+A]F[G[A]]]withzio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "def"}, {"label" : "fromCovariantAssociativeFlatten", "tail" : "(covariant: Covariant[F], identityFlatten: AssociativeFlatten[F]): AssociativeBoth[F]", "member" : "zio.prelude.AssociativeBoth.fromCovariantAssociativeFlatten", "link" : "zio\/prelude\/AssociativeBoth$.html#fromCovariantAssociativeFlatten[F[+_]](implicitcovariant:zio.prelude.Covariant[F],implicitidentityFlatten:zio.prelude.AssociativeFlatten[F]):zio.prelude.AssociativeBoth[F]", "kind" : "def"}, {"label" : "apply", "tail" : "(associativeBoth: AssociativeBoth[F]): AssociativeBoth[F]", "member" : "zio.prelude.AssociativeBoth.apply", "link" : "zio\/prelude\/AssociativeBoth$.html#apply[F[_]](implicitassociativeBoth:zio.prelude.AssociativeBoth[F]):zio.prelude.AssociativeBoth[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBoth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBoth$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBoth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBoth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBoth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBoth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBoth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBoth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBoth$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBoth$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBoth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBoth$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBoth$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBoth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBoth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBoth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/AssociativeBoth.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBoth.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBoth.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBoth.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBoth.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBoth.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBoth.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBoth.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBoth.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBoth.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBoth.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBoth.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBoth.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBoth.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBoth.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBoth.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBoth.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBoth.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/AssociativeBoth.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "An associative binary operator that combines two values of types F[A]and F[B] to produce an F[(A, B)]."}, {"name" : "zio.prelude.AssociativeBothSyntax", "trait" : "zio\/prelude\/AssociativeBothSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "AssociativeBothTuple22Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple22Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple22Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple21Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple21Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple21Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple20Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple20Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple20Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple19Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple19Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple19Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple18Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple18Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple18Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple17Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple17Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple17Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple16Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple16Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple16Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple15Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple15Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple15Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple14Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple14Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple14Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple13Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple13Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple13Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple12Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple12Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple12Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple11Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple11Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple11Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple10Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple10Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple10Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple9Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple9Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple9Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple8Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple8Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple8Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple7Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple7Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple7Ops[F[+_],T1,T2,T3,T4,T5,T6,T7]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple6Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple6Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple6Ops[F[+_],T1,T2,T3,T4,T5,T6]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple5Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple5Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple5Ops[F[+_],T1,T2,T3,T4,T5]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple4Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple4Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple4Ops[F[+_],T1,T2,T3,T4]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple3Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple3Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple3Ops[F[+_],T1,T2,T3]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothTuple2Ops", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple2Ops", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothTuple2Ops[F[+_],T1,T2]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothContravariantOps", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothContravariantOps", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothContravariantOps[F[-_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothCovariantOps", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothCovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeBothOps", "tail" : "", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothOps", "link" : "zio\/prelude\/AssociativeBothSyntax.html#AssociativeBothOps[F[_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothContravariantOps", "shortDescription" : "Provides infix syntax for associative operations for contravariant types.", "members_class" : [{"label" : "bothWith", "tail" : "(fb: => F[B])(f: (C) => (A, B))(both: AssociativeBoth[F], contravariant: Contravariant[F]): F[C]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothContravariantOps.bothWith", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#bothWith[B,C](fb:=>F[B])(f:C=>(A,B))(implicitboth:zio.prelude.AssociativeBoth[F],implicitcontravariant:zio.prelude.Contravariant[F]):F[C]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothContravariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothContravariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps", "shortDescription" : "Provides infix syntax for associative operations for covariant types.", "members_class" : [{"label" : "zipWith", "tail" : "(fb: => F[B])(f: (A, B) => C)(both: AssociativeBoth[F], covariant: Covariant[F]): F[C]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.zipWith", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#zipWith[B,C](fb:=>F[B])(f:(A,B)=>C)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[C]", "kind" : "def"}, {"label" : "zipRight", "tail" : "(fb: => F[B])(both: AssociativeBoth[F], covariant: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.zipRight", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#zipRight[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "zipLeft", "tail" : "(fb: => F[B])(both: AssociativeBoth[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.zipLeft", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#zipLeft[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"label" : "forever", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.forever", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#forever(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"label" : "*>", "tail" : "(fb: => F[B])(both: AssociativeBoth[F], covariant: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.*>", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#*>[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "<*", "tail" : "(fb: => F[B])(both: AssociativeBoth[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps.<*", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#<*[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothCovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothCovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothOps", "shortDescription" : "Provides infix syntax for associative operations for invariant types.", "members_class" : [{"label" : "zip", "tail" : "(fb: => F[B])(both: AssociativeBoth[F]): F[(A, B)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothOps.zip", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#zip[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F]):F[(A,B)]", "kind" : "def"}, {"label" : "<*>", "tail" : "(fb: => F[B])(both: AssociativeBoth[F]): F[(A, B)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothOps.<*>", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#<*>[B](fb:=>F[B])(implicitboth:zio.prelude.AssociativeBoth[F]):F[(A,B)]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple10Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple10Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple10Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple10Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple10Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple11Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple11Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple11Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple11Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple11Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple12Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple12Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple12Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple12Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple12Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple13Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple13Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple13Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple13Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple13Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple14Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple14Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple14Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple14Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple14Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple15Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple15Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple15Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple15Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple15Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple16Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple16Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple16Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple16Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple16Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple17Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple17Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple17Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple17Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple17Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple18Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple18Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple18Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple18Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple18Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple19Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple19Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple19Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple19Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple19Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple20Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple20Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple20Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple20Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple20Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple21Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple21Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple21Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple21Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple21Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple22Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple22Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple22Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple22Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple22Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple2Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple2Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple2Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#mapN[R](f:(T1,T2)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple2Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple2Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple3Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple3Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple3Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#mapN[R](f:(T1,T2,T3)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple3Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple3Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple4Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple4Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple4Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#mapN[R](f:(T1,T2,T3,T4)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple4Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple4Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple5Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple5Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple5Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#mapN[R](f:(T1,T2,T3,T4,T5)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple5Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple5Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple6Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple6Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple6Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple6Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple6Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple7Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple7Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple7Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple7Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple7Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple8Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple8Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple8Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple8Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple8Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple9Ops", "shortDescription" : "", "members_class" : [{"label" : "tupleN", "tail" : "(both: AssociativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9)]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple9Ops.tupleN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#tupleN(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R)(both: AssociativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple9Ops.mapN", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#mapN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R)(implicitboth:zio.prelude.AssociativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeBothSyntax.AssociativeBothTuple9Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeBothSyntax$AssociativeBothTuple9Ops.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeCompose", "object" : "zio\/prelude\/AssociativeCompose$.html", "members_object" : [{"label" : "URManagedIdentityCompose", "tail" : ": IdentityCompose[URManaged]", "member" : "zio.prelude.AssociativeCompose.URManagedIdentityCompose", "link" : "zio\/prelude\/AssociativeCompose$.html#URManagedIdentityCompose:zio.prelude.IdentityCompose[zio.URManaged]", "kind" : "implicit val"}, {"label" : "URLayerIdentityCompose", "tail" : ": IdentityCompose[URLayer]", "member" : "zio.prelude.AssociativeCompose.URLayerIdentityCompose", "link" : "zio\/prelude\/AssociativeCompose$.html#URLayerIdentityCompose:zio.prelude.IdentityCompose[zio.URLayer]", "kind" : "implicit val"}, {"label" : "URIOIdentityCompose", "tail" : ": IdentityCompose[URIO]", "member" : "zio.prelude.AssociativeCompose.URIOIdentityCompose", "link" : "zio\/prelude\/AssociativeCompose$.html#URIOIdentityCompose:zio.prelude.IdentityCompose[zio.URIO]", "kind" : "implicit val"}, {"label" : "FunctionIdentityCompose", "tail" : ": IdentityCompose[Function]", "member" : "zio.prelude.AssociativeCompose.FunctionIdentityCompose", "link" : "zio\/prelude\/AssociativeCompose$.html#FunctionIdentityCompose:zio.prelude.IdentityCompose[Function]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeCompose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeCompose$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeCompose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeCompose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeCompose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeCompose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeCompose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeCompose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeCompose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeCompose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeCompose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeCompose$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeCompose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeCompose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeCompose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeCompose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/AssociativeCompose.html", "kind" : "trait", "members_trait" : [{"label" : "associativeCompose", "tail" : "(ab: =>:[A, B], bc: =>:[B, C], cd: =>:[C, D])(eq: Equal[=>:[A, D]]): Boolean", "member" : "zio.prelude.AssociativeCompose.associativeCompose", "link" : "zio\/prelude\/AssociativeCompose.html#associativeCompose[A,B,C,D](ab:A=>:B,bc:B=>:C,cd:C=>:D)(impliciteq:zio.prelude.Equal[A=>:D]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compose", "tail" : "(bc: =>:[B, C], ab: =>:[A, B]): =>:[A, C]", "member" : "zio.prelude.AssociativeCompose.compose", "link" : "zio\/prelude\/AssociativeCompose.html#compose[A,B,C](bc:B=>:C,ab:A=>:B):A=>:C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeComposeSyntax", "trait" : "zio\/prelude\/AssociativeComposeSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "AssociativeComposeOps", "tail" : "", "member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#AssociativeComposeOps[A,B,=>:[-_,+_]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeComposeSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeComposeSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps", "shortDescription" : "", "members_class" : [{"label" : "compose", "tail" : "(ev: AssociativeCompose[=>:]): (=>:[Z, A]) => =>:[Z, B]", "member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps.compose", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#compose[Z](implicitev:zio.prelude.AssociativeCompose[=>:]):Z=>:A=>Z=>:B", "kind" : "def"}, {"label" : "<<<", "tail" : "(ev: AssociativeCompose[=>:]): (=>:[Z, A]) => =>:[Z, B]", "member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps.<<<", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#<<<[Z](implicitev:zio.prelude.AssociativeCompose[=>:]):Z=>:A=>Z=>:B", "kind" : "def"}, {"label" : "andThen", "tail" : "(ev: AssociativeCompose[=>:]): (=>:[B, C]) => =>:[A, C]", "member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps.andThen", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#andThen[C](implicitev:zio.prelude.AssociativeCompose[=>:]):B=>:C=>A=>:C", "kind" : "def"}, {"label" : ">>>", "tail" : "(ev: AssociativeCompose[=>:]): (=>:[B, C]) => =>:[A, C]", "member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps.>>>", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#>>>[C](implicitev:zio.prelude.AssociativeCompose[=>:]):B=>:C=>A=>:C", "kind" : "def"}, {"member" : "zio.prelude.AssociativeComposeSyntax.AssociativeComposeOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeComposeSyntax$AssociativeComposeOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeEither", "object" : "zio\/prelude\/AssociativeEither$.html", "members_object" : [{"label" : "ZStreamFailureAssociativeEither", "tail" : "(): AssociativeEither[[+e]Type[ZStream[R, e, A]]]", "member" : "zio.prelude.AssociativeEither.ZStreamFailureAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZStreamFailureAssociativeEither[R,A]:zio.prelude.AssociativeEither[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.stream.ZStream[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZStreamAssociativeEither", "tail" : "(): AssociativeEither[[+a]ZStream[R, E, a]]", "member" : "zio.prelude.AssociativeEither.ZStreamAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZStreamAssociativeEither[R,E]:zio.prelude.AssociativeEither[[+a]zio.stream.ZStream[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZManagedFailureAssociativeEither", "tail" : "(): AssociativeEither[[+e]Type[ZManaged[R, e, A]]]", "member" : "zio.prelude.AssociativeEither.ZManagedFailureAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZManagedFailureAssociativeEither[R,A]:zio.prelude.AssociativeEither[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZManaged[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZManagedAssociativeEither", "tail" : "(): AssociativeEither[[+a]ZManaged[R, E, a]]", "member" : "zio.prelude.AssociativeEither.ZManagedAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZManagedAssociativeEither[R,E]:zio.prelude.AssociativeEither[[+a]zio.ZManaged[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZLayerAssociativeEither", "tail" : "(): AssociativeEither[[+a]ZLayer[R, E, a]]", "member" : "zio.prelude.AssociativeEither.ZLayerAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZLayerAssociativeEither[R,E]:zio.prelude.AssociativeEither[[+a]zio.ZLayer[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZIOFailureAssociativeEither", "tail" : "(): AssociativeEither[[+e]Type[ZIO[R, e, A]]]", "member" : "zio.prelude.AssociativeEither.ZIOFailureAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZIOFailureAssociativeEither[R,A]:zio.prelude.AssociativeEither[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZIO[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZIOAssociativeEither", "tail" : "(): AssociativeEither[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.AssociativeEither.ZIOAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ZIOAssociativeEither[R,E]:zio.prelude.AssociativeEither[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "VectorIdentityEither", "tail" : ": IdentityEither[Vector]", "member" : "zio.prelude.AssociativeEither.VectorIdentityEither", "link" : "zio\/prelude\/AssociativeEither$.html#VectorIdentityEither:zio.prelude.IdentityEither[Vector]", "kind" : "implicit val"}, {"label" : "TryAssociativeEither", "tail" : ": AssociativeEither[Try]", "member" : "zio.prelude.AssociativeEither.TryAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#TryAssociativeEither:zio.prelude.AssociativeEither[scala.util.Try]", "kind" : "implicit val"}, {"label" : "SetCommutativeEitherIdentityEither", "tail" : ": CommutativeEither[Set] with IdentityEither[Set]", "member" : "zio.prelude.AssociativeEither.SetCommutativeEitherIdentityEither", "link" : "zio\/prelude\/AssociativeEither$.html#SetCommutativeEitherIdentityEither:zio.prelude.CommutativeEither[Set]withzio.prelude.IdentityEither[Set]", "kind" : "implicit val"}, {"label" : "ScheduleAssociativeEither", "tail" : "(): AssociativeEither[[+a]Schedule[R, E, a]]", "member" : "zio.prelude.AssociativeEither.ScheduleAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ScheduleAssociativeEither[R,E]:zio.prelude.AssociativeEither[[+a]zio.Schedule[R,E,a]]", "kind" : "implicit def"}, {"label" : "OptionIdentityEither", "tail" : ": IdentityEither[Option]", "member" : "zio.prelude.AssociativeEither.OptionIdentityEither", "link" : "zio\/prelude\/AssociativeEither$.html#OptionIdentityEither:zio.prelude.IdentityEither[Option]", "kind" : "implicit val"}, {"label" : "ListIdentityEither", "tail" : ": IdentityEither[List]", "member" : "zio.prelude.AssociativeEither.ListIdentityEither", "link" : "zio\/prelude\/AssociativeEither$.html#ListIdentityEither:zio.prelude.IdentityEither[List]", "kind" : "implicit val"}, {"label" : "FutureAssociativeEither", "tail" : "(ec: ExecutionContext): AssociativeEither[Future]", "member" : "zio.prelude.AssociativeEither.FutureAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#FutureAssociativeEither(implicitec:scala.concurrent.ExecutionContext):zio.prelude.AssociativeEither[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "FiberAssociativeEither", "tail" : "(): AssociativeEither[[+a]Fiber[E, a]]", "member" : "zio.prelude.AssociativeEither.FiberAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#FiberAssociativeEither[E]:zio.prelude.AssociativeEither[[+a]zio.Fiber[E,a]]", "kind" : "implicit def"}, {"label" : "ExitFailureAssociativeEither", "tail" : "(): AssociativeEither[[+e]Type[Exit[e, A]]]", "member" : "zio.prelude.AssociativeEither.ExitFailureAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ExitFailureAssociativeEither[A]:zio.prelude.AssociativeEither[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.Exit[e,A]]]", "kind" : "implicit def"}, {"label" : "ExitAssociativeEither", "tail" : "(): AssociativeEither[[+a]Exit[E, a]]", "member" : "zio.prelude.AssociativeEither.ExitAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#ExitAssociativeEither[E]:zio.prelude.AssociativeEither[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "EitherFailedAssociativeEither", "tail" : "(): AssociativeEither[[+l]Type[Either[l, R]]]", "member" : "zio.prelude.AssociativeEither.EitherFailedAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#EitherFailedAssociativeEither[R]:zio.prelude.AssociativeEither[[+l]zio.prelude.newtypes.Failure.newtypeF.Type[scala.util.Either[l,R]]]", "kind" : "implicit def"}, {"label" : "EitherAssociativeEither", "tail" : "(): AssociativeEither[[+r]Either[L, r]]", "member" : "zio.prelude.AssociativeEither.EitherAssociativeEither", "link" : "zio\/prelude\/AssociativeEither$.html#EitherAssociativeEither[L]:zio.prelude.AssociativeEither[[+r]scala.util.Either[L,r]]", "kind" : "implicit def"}, {"label" : "ChunkIdentityEither", "tail" : ": IdentityEither[Chunk]", "member" : "zio.prelude.AssociativeEither.ChunkIdentityEither", "link" : "zio\/prelude\/AssociativeEither$.html#ChunkIdentityEither:zio.prelude.IdentityEither[zio.Chunk]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(associativeEither: AssociativeEither[F]): AssociativeEither[F]", "member" : "zio.prelude.AssociativeEither.apply", "link" : "zio\/prelude\/AssociativeEither$.html#apply[F[_]](implicitassociativeEither:zio.prelude.AssociativeEither[F]):zio.prelude.AssociativeEither[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEither$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEither$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEither$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEither$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEither$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEither$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEither$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEither$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEither$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEither$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEither$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEither$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEither$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEither$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEither$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEither$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/AssociativeEither.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEither.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEither.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEither.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEither.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEither.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEither.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEither.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEither.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEither.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEither.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEither.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEither.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEither.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEither.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEither.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEither.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEither.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/AssociativeEither.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : "An associative binary operator that combines two values of types F[A]and F[B] to produce an F[Either[A, B]]."}, {"name" : "zio.prelude.AssociativeEitherSyntax", "trait" : "zio\/prelude\/AssociativeEitherSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "AssociativeEitherContravariantOps", "tail" : "", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherContravariantOps", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#AssociativeEitherContravariantOps[F[-_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeEitherCovariantOps", "tail" : "", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherCovariantOps", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#AssociativeEitherCovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeEitherOps", "tail" : "", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherOps", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#AssociativeEitherOps[F[_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEitherSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherContravariantOps", "shortDescription" : "Provides infix syntax for associative operations for contravariant types.", "members_class" : [{"label" : "eitherWith", "tail" : "(fb: => F[B])(f: (C) => Either[A, B])(either: AssociativeEither[F], contravariant: Contravariant[F]): F[C]", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherContravariantOps.eitherWith", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#eitherWith[B,C](fb:=>F[B])(f:C=>Either[A,B])(impliciteither:zio.prelude.AssociativeEither[F],implicitcontravariant:zio.prelude.Contravariant[F]):F[C]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherContravariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherContravariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherCovariantOps", "shortDescription" : "Provides infix syntax for associative operations for covariant types.", "members_class" : [{"label" : "orElse", "tail" : "(fa2: => F[A])(either: AssociativeEither[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherCovariantOps.orElse", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#orElse(fa2:=>F[A])(impliciteither:zio.prelude.AssociativeEither[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"label" : "eventually", "tail" : "(either: AssociativeEither[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherCovariantOps.eventually", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#eventually(impliciteither:zio.prelude.AssociativeEither[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherCovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherCovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherOps", "shortDescription" : "Provides infix syntax for associative operations for invariant types.", "members_class" : [{"label" : "orElseEither", "tail" : "(fb: => F[B])(either: AssociativeEither[F]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherOps.orElseEither", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#orElseEither[B](fb:=>F[B])(impliciteither:zio.prelude.AssociativeEither[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "<+>", "tail" : "(fb: => F[B])(either: AssociativeEither[F]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherOps.<+>", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#<+>[B](fb:=>F[B])(impliciteither:zio.prelude.AssociativeEither[F]):F[Either[A,B]]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeEitherSyntax.AssociativeEitherOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeEitherSyntax$AssociativeEitherOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeFlatten", "object" : "zio\/prelude\/AssociativeFlatten$.html", "members_object" : [{"label" : "ZStreamIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]ZStream[R, E, a]]", "member" : "zio.prelude.AssociativeFlatten.ZStreamIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ZStreamIdentityFlatten[R,E]:zio.prelude.IdentityFlatten[[+a]zio.stream.ZStream[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZManagedIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]ZManaged[R, E, a]]", "member" : "zio.prelude.AssociativeFlatten.ZManagedIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ZManagedIdentityFlatten[R,E]:zio.prelude.IdentityFlatten[[+a]zio.ZManaged[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZIOIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.AssociativeFlatten.ZIOIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ZIOIdentityFlatten[R,E]:zio.prelude.IdentityFlatten[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "VectorIdentityFlatten", "tail" : ": IdentityFlatten[Vector]", "member" : "zio.prelude.AssociativeFlatten.VectorIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#VectorIdentityFlatten:zio.prelude.IdentityFlatten[Vector]", "kind" : "implicit val"}, {"label" : "TryIdentityFlatten", "tail" : ": IdentityFlatten[Try]", "member" : "zio.prelude.AssociativeFlatten.TryIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#TryIdentityFlatten:zio.prelude.IdentityFlatten[scala.util.Try]", "kind" : "implicit val"}, {"label" : "OptionIdentityFlatten", "tail" : ": IdentityFlatten[Option]", "member" : "zio.prelude.AssociativeFlatten.OptionIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#OptionIdentityFlatten:zio.prelude.IdentityFlatten[Option]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkIdentityFlatten", "tail" : ": IdentityFlatten[NonEmptyChunk]", "member" : "zio.prelude.AssociativeFlatten.NonEmptyChunkIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#NonEmptyChunkIdentityFlatten:zio.prelude.IdentityFlatten[zio.NonEmptyChunk]", "kind" : "implicit val"}, {"label" : "MapAssociativeFlatten", "tail" : "(): AssociativeFlatten[[+v]Map[K, v]]", "member" : "zio.prelude.AssociativeFlatten.MapAssociativeFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#MapAssociativeFlatten[K]:zio.prelude.AssociativeFlatten[[+v]scala.collection.immutable.Map[K,v]]", "kind" : "implicit def"}, {"label" : "ListIdentityFlatten", "tail" : ": IdentityFlatten[List]", "member" : "zio.prelude.AssociativeFlatten.ListIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ListIdentityFlatten:zio.prelude.IdentityFlatten[List]", "kind" : "implicit val"}, {"label" : "IdIdentityFlatten", "tail" : ": IdentityFlatten[prelude.Id]", "member" : "zio.prelude.AssociativeFlatten.IdIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#IdIdentityFlatten:zio.prelude.IdentityFlatten[zio.prelude.Id]", "kind" : "implicit val"}, {"label" : "FutureIdentityFlatten", "tail" : ": IdentityFlatten[Future]", "member" : "zio.prelude.AssociativeFlatten.FutureIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#FutureIdentityFlatten:zio.prelude.IdentityFlatten[scala.concurrent.Future]", "kind" : "implicit val"}, {"label" : "ExitIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]Exit[E, a]]", "member" : "zio.prelude.AssociativeFlatten.ExitIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ExitIdentityFlatten[E]:zio.prelude.IdentityFlatten[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "EitherIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]Either[E, a]]", "member" : "zio.prelude.AssociativeFlatten.EitherIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#EitherIdentityFlatten[E]:zio.prelude.IdentityFlatten[[+a]scala.util.Either[E,a]]", "kind" : "implicit def"}, {"label" : "ConstAssociativeFlatten", "tail" : "(): AssociativeFlatten[[+B]Type[A]]", "member" : "zio.prelude.AssociativeFlatten.ConstAssociativeFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ConstAssociativeFlatten[A]:zio.prelude.AssociativeFlatten[[+B]zio.prelude.Const.newtypeF.Type[A]]", "kind" : "implicit def"}, {"label" : "ChunkIdentityFlatten", "tail" : ": IdentityFlatten[Chunk]", "member" : "zio.prelude.AssociativeFlatten.ChunkIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#ChunkIdentityFlatten:zio.prelude.IdentityFlatten[zio.Chunk]", "kind" : "implicit val"}, {"label" : "CauseIdentityFlatten", "tail" : ": IdentityFlatten[Cause]", "member" : "zio.prelude.AssociativeFlatten.CauseIdentityFlatten", "link" : "zio\/prelude\/AssociativeFlatten$.html#CauseIdentityFlatten:zio.prelude.IdentityFlatten[zio.Cause]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(associativeFlatten: AssociativeFlatten[F]): AssociativeFlatten[F]", "member" : "zio.prelude.AssociativeFlatten.apply", "link" : "zio\/prelude\/AssociativeFlatten$.html#apply[F[+_]](implicitassociativeFlatten:zio.prelude.AssociativeFlatten[F]):zio.prelude.AssociativeFlatten[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeFlatten$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeFlatten$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeFlatten$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeFlatten$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeFlatten$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeFlatten$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeFlatten$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeFlatten$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeFlatten$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeFlatten$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeFlatten$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeFlatten$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeFlatten$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeFlatten$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeFlatten$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeFlatten$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/AssociativeFlatten.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeFlatten.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeFlatten.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeFlatten.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeFlatten.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeFlatten.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeFlatten.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeFlatten.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlatten.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeFlatten.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeFlatten.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeFlatten.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeFlatten.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeFlatten.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeFlatten.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeFlatten.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeFlatten.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeFlatten.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "zio.prelude.AssociativeFlatten.flatten", "link" : "zio\/prelude\/AssociativeFlatten.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "abstract def"}], "shortDescription" : "AssociativeFlatten describes a type that can be \"flattened\" in anassociative way."}, {"name" : "zio.prelude.AssociativeFlattenSyntax", "trait" : "zio\/prelude\/AssociativeFlattenSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "AssociativeFlattenCovariantOps", "tail" : "", "member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenCovariantOps", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#AssociativeFlattenCovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "AssociativeFlattenOps", "tail" : "", "member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenOps", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#AssociativeFlattenOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenCovariantOps", "shortDescription" : "Provides infix syntax for flattening covariant types.", "members_class" : [{"label" : "flatMap", "tail" : "(f: (A) => F[B])(flatten: AssociativeFlatten[F], covariant: Covariant[F]): F[B]", "member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenCovariantOps.flatMap", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#flatMap[B](f:A=>F[B])(implicitflatten:zio.prelude.AssociativeFlatten[F],implicitcovariant:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenCovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenCovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenOps", "shortDescription" : "Provides infix syntax for flattening types.", "members_class" : [{"label" : "flatten", "tail" : "(flatten: AssociativeFlatten[F]): F[A]", "member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenOps.flatten", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#flatten(implicitflatten:zio.prelude.AssociativeFlatten[F]):F[A]", "kind" : "def"}, {"member" : "zio.prelude.AssociativeFlattenSyntax.AssociativeFlattenOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeFlattenSyntax$AssociativeFlattenOps.html", "kind" : "class"}, {"name" : "zio.prelude.AssociativeLowPriority", "trait" : "zio\/prelude\/AssociativeLowPriority.html", "kind" : "trait", "members_trait" : [{"label" : "IntSumCommutativeInverse", "tail" : ": Commutative[Sum[Int]] with Inverse[Sum[Int]]", "member" : "zio.prelude.AssociativeLowPriority.IntSumCommutativeInverse", "link" : "zio\/prelude\/AssociativeLowPriority.html#IntSumCommutativeInverse:zio.prelude.Commutative[zio.prelude.newtypes.Sum[Int]]withzio.prelude.Inverse[zio.prelude.newtypes.Sum[Int]]", "kind" : "implicit val"}, {"label" : "IntProdCommutativeIdentity", "tail" : ": Commutative[Prod[Int]] with Identity[Prod[Int]]", "member" : "zio.prelude.AssociativeLowPriority.IntProdCommutativeIdentity", "link" : "zio\/prelude\/AssociativeLowPriority.html#IntProdCommutativeIdentity:zio.prelude.Commutative[zio.prelude.newtypes.Prod[Int]]withzio.prelude.Identity[zio.prelude.newtypes.Prod[Int]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeLowPriority.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeLowPriority.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeLowPriority.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeLowPriority.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeLowPriority.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeLowPriority.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeLowPriority.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeLowPriority.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeLowPriority.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeLowPriority.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeLowPriority.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeLowPriority.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeLowPriority.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeLowPriority.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeLowPriority.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeLowPriority.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeLowPriority.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeLowPriority.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeLowPriority.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeSyntax", "trait" : "zio\/prelude\/AssociativeSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "AssociativeOps", "tail" : "", "member" : "zio.prelude.AssociativeSyntax.AssociativeOps", "link" : "zio\/prelude\/AssociativeSyntax.html#AssociativeOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.AssociativeSyntax.AssociativeOps", "shortDescription" : "Provides infix syntax for combining two values with an associativeoperation.", "members_class" : [{"label" : "multiplyOption", "tail" : "(n: Int)(associative: Associative[A]): Option[A]", "member" : "zio.prelude.AssociativeSyntax.AssociativeOps.multiplyOption", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#multiplyOption(n:Int)(implicitassociative:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(n: Int)(associative: Associative[A]): A", "member" : "zio.prelude.AssociativeSyntax.AssociativeOps.repeat", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#repeat(n:Int)(implicitassociative:zio.prelude.Associative[A]):A", "kind" : "def"}, {"label" : "combine", "tail" : "(r: => A1)(associative: Associative[A1]): A1", "member" : "zio.prelude.AssociativeSyntax.AssociativeOps.combine", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#combine[A1>:A](r:=>A1)(implicitassociative:zio.prelude.Associative[A1]):A1", "kind" : "def"}, {"label" : "<>", "tail" : "(r: => A1)(associative: Associative[A1]): A1", "member" : "zio.prelude.AssociativeSyntax.AssociativeOps.<>", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#<>[A1>:A](r:=>A1)(implicitassociative:zio.prelude.Associative[A1]):A1", "kind" : "def"}, {"member" : "zio.prelude.AssociativeSyntax.AssociativeOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/AssociativeSyntax$AssociativeOps.html", "kind" : "class"}, {"name" : "zio.prelude.Bicovariant", "object" : "zio\/prelude\/Bicovariant$.html", "members_object" : [{"label" : "ExitBicovariant", "tail" : ": Bicovariant[Exit]", "member" : "zio.prelude.Bicovariant.ExitBicovariant", "link" : "zio\/prelude\/Bicovariant$.html#ExitBicovariant:zio.prelude.Bicovariant[zio.Exit]", "kind" : "implicit val"}, {"label" : "EitherBicovariant", "tail" : ": Bicovariant[Either]", "member" : "zio.prelude.Bicovariant.EitherBicovariant", "link" : "zio\/prelude\/Bicovariant$.html#EitherBicovariant:zio.prelude.Bicovariant[Either]", "kind" : "implicit val"}, {"label" : "Tuple2Bicovariant", "tail" : ": Bicovariant[Tuple2]", "member" : "zio.prelude.Bicovariant.Tuple2Bicovariant", "link" : "zio\/prelude\/Bicovariant$.html#Tuple2Bicovariant:zio.prelude.Bicovariant[Tuple2]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Bicovariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Bicovariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Bicovariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Bicovariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Bicovariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Bicovariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Bicovariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Bicovariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Bicovariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Bicovariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Bicovariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Bicovariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Bicovariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Bicovariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Bicovariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Bicovariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Bicovariant.html", "kind" : "trait", "members_trait" : [{"label" : "bimapCoherence", "tail" : "(ab: <=>[A, B], f: (A) => A2, g: (B) => B2)(eq: Equal[<=>[A2, B2]]): Boolean", "member" : "zio.prelude.Bicovariant.bimapCoherence", "link" : "zio\/prelude\/Bicovariant.html#bimapCoherence[A,A2,A3,B,B2,B3](ab:A<=>B,f:A=>A2,g:B=>B2)(impliciteq:zio.prelude.Equal[A2<=>B2]):Boolean", "kind" : "def"}, {"label" : "bimapIdentity", "tail" : "(ab: <=>[A, B])(eq: Equal[<=>[A, B]]): Boolean", "member" : "zio.prelude.Bicovariant.bimapIdentity", "link" : "zio\/prelude\/Bicovariant.html#bimapIdentity[A,B,B2,B3](ab:A<=>B)(impliciteq:zio.prelude.Equal[A<=>B]):Boolean", "kind" : "def"}, {"label" : "bimapCompose", "tail" : "(ab: <=>[A, B], g: (A2) => A3, f: (A) => A2, i: (B) => B2, h: (B2) => B3)(eq: Equal[<=>[A3, B3]]): Boolean", "member" : "zio.prelude.Bicovariant.bimapCompose", "link" : "zio\/prelude\/Bicovariant.html#bimapCompose[A,B,A2,A3,B2,B3](ab:A<=>B,g:A2=>A3,f:A=>A2,i:B=>B2,h:B2=>B3)(impliciteq:zio.prelude.Equal[A3<=>B3]):Boolean", "kind" : "def"}, {"label" : "leftMapIdentity", "tail" : "(ab: <=>[A, B])(eq: Equal[<=>[A, B]]): Boolean", "member" : "zio.prelude.Bicovariant.leftMapIdentity", "link" : "zio\/prelude\/Bicovariant.html#leftMapIdentity[A,B](ab:A<=>B)(impliciteq:zio.prelude.Equal[A<=>B]):Boolean", "kind" : "def"}, {"label" : "leftMapCompose", "tail" : "(ab: <=>[A, B], f: (A) => A2, g: (A2) => A3)(eq: Equal[<=>[A3, B]]): Boolean", "member" : "zio.prelude.Bicovariant.leftMapCompose", "link" : "zio\/prelude\/Bicovariant.html#leftMapCompose[A,B,A2,A3](ab:A<=>B,f:A=>A2,g:A2=>A3)(impliciteq:zio.prelude.Equal[A3<=>B]):Boolean", "kind" : "def"}, {"label" : "rightMap", "tail" : "(g: (B) => BB): (<=>[A, B]) => <=>[A, BB]", "member" : "zio.prelude.Bicovariant.rightMap", "link" : "zio\/prelude\/Bicovariant.html#rightMap[A,B,BB](g:B=>BB):A<=>B=>A<=>BB", "kind" : "def"}, {"label" : "leftMap", "tail" : "(f: (A) => AA): (<=>[A, B]) => <=>[AA, B]", "member" : "zio.prelude.Bicovariant.leftMap", "link" : "zio\/prelude\/Bicovariant.html#leftMap[A,B,AA](f:A=>AA):A<=>B=>AA<=>B", "kind" : "def"}, {"label" : "deriveFailureCovariant", "tail" : "(): Covariant[[+E]Type[<=>[E, A]]]", "member" : "zio.prelude.Bicovariant.deriveFailureCovariant", "link" : "zio\/prelude\/Bicovariant.html#deriveFailureCovariant[A]:zio.prelude.Covariant[[+E]zio.prelude.newtypes.Failure.newtypeF.Type[E<=>A]]", "kind" : "def"}, {"label" : "rightMapIdentity", "tail" : "(ab: <=>[A, B])(eq: Equal[<=>[A, B]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapIdentity", "link" : "zio\/prelude\/Bicovariant.html#rightMapIdentity[A,B](ab:A<=>B)(impliciteq:zio.prelude.Equal[A<=>B]):Boolean", "kind" : "def"}, {"label" : "rightMapCompose", "tail" : "(ab: <=>[A, B], f: (B) => B2, g: (B2) => B3)(eq: Equal[<=>[A, B3]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapCompose", "link" : "zio\/prelude\/Bicovariant.html#rightMapCompose[A,B,B2,B3](ab:A<=>B,f:B=>B2,g:B2=>B3)(impliciteq:zio.prelude.Equal[A<=>B3]):Boolean", "kind" : "def"}, {"label" : "deriveCovariant", "tail" : "(): Covariant[[+B]<=>[A, B]]", "member" : "zio.prelude.RightCovariant.deriveCovariant", "link" : "zio\/prelude\/Bicovariant.html#deriveCovariant[A]:zio.prelude.Covariant[[+B]A<=>B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Bicovariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Bicovariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Bicovariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Bicovariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Bicovariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Bicovariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Bicovariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Bicovariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Bicovariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Bicovariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Bicovariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Bicovariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Bicovariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Bicovariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Bicovariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Bicovariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Bicovariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "bimap", "tail" : "(f: (A) => AA, g: (B) => BB): (<=>[A, B]) => <=>[AA, BB]", "member" : "zio.prelude.Bicovariant.bimap", "link" : "zio\/prelude\/Bicovariant.html#bimap[A,B,AA,BB](f:A=>AA,g:B=>BB):A<=>B=>AA<=>BB", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.BicovariantSyntax", "trait" : "zio\/prelude\/BicovariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "BicovariantOps", "tail" : "", "member" : "zio.prelude.BicovariantSyntax.BicovariantOps", "link" : "zio\/prelude\/BicovariantSyntax.html#BicovariantOps[<=>[+_,+_],A,B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/BicovariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/BicovariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/BicovariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/BicovariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/BicovariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/BicovariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/BicovariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/BicovariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/BicovariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/BicovariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/BicovariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/BicovariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/BicovariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/BicovariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/BicovariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/BicovariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.BicovariantSyntax.BicovariantOps", "shortDescription" : "", "members_class" : [{"label" : "rightMap", "tail" : "(bc: (B) => C)(bicovariant: Bicovariant[<=>]): <=>[A, C]", "member" : "zio.prelude.BicovariantSyntax.BicovariantOps.rightMap", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#rightMap[C](bc:B=>C)(implicitbicovariant:zio.prelude.Bicovariant[<=>]):A<=>C", "kind" : "def"}, {"label" : "leftMap", "tail" : "(ac: (A) => C)(bicovariant: Bicovariant[<=>]): <=>[C, B]", "member" : "zio.prelude.BicovariantSyntax.BicovariantOps.leftMap", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#leftMap[C](ac:A=>C)(implicitbicovariant:zio.prelude.Bicovariant[<=>]):C<=>B", "kind" : "def"}, {"label" : "bimap", "tail" : "(g: (A) => C, h: (B) => D)(bicovariant: Bicovariant[<=>]): <=>[C, D]", "member" : "zio.prelude.BicovariantSyntax.BicovariantOps.bimap", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#bimap[C,D](g:A=>C,h:B=>D)(implicitbicovariant:zio.prelude.Bicovariant[<=>]):C<=>D", "kind" : "def"}, {"member" : "zio.prelude.BicovariantSyntax.BicovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/BicovariantSyntax$BicovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.BuildInfo", "case object" : "zio\/prelude\/BuildInfo$.html", "shortDescription" : "This object was generated by sbt-buildinfo.", "members_case object" : [{"label" : "toString", "tail" : ": String", "member" : "zio.prelude.BuildInfo.toString", "link" : "zio\/prelude\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "isSnapshot", "tail" : ": Boolean", "member" : "zio.prelude.BuildInfo.isSnapshot", "link" : "zio\/prelude\/BuildInfo$.html#isSnapshot:Boolean", "kind" : "val"}, {"label" : "sbtVersion", "tail" : ": String", "member" : "zio.prelude.BuildInfo.sbtVersion", "link" : "zio\/prelude\/BuildInfo$.html#sbtVersion:String", "kind" : "val"}, {"label" : "scalaVersion", "tail" : ": String", "member" : "zio.prelude.BuildInfo.scalaVersion", "link" : "zio\/prelude\/BuildInfo$.html#scalaVersion:String", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "zio.prelude.BuildInfo.version", "link" : "zio\/prelude\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "zio.prelude.BuildInfo.name", "link" : "zio\/prelude\/BuildInfo$.html#name:String", "kind" : "val"}, {"label" : "moduleName", "tail" : ": String", "member" : "zio.prelude.BuildInfo.moduleName", "link" : "zio\/prelude\/BuildInfo$.html#moduleName:String", "kind" : "val"}, {"label" : "organization", "tail" : ": String", "member" : "zio.prelude.BuildInfo.organization", "link" : "zio\/prelude\/BuildInfo$.html#organization:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/BuildInfo$.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/prelude\/BuildInfo$.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/BuildInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/BuildInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "case object"}, {"name" : "zio.prelude.classic", "shortDescription" : "", "object" : "zio\/prelude\/package$$classic$.html", "members_object" : [{"label" : "Bifunctor", "tail" : "", "member" : "zio.prelude.classic.Bifunctor", "link" : "zio\/prelude\/package$$classic$.html#Bifunctor[=>:[+_,+_]]=zio.prelude.Bicovariant[=>:]", "kind" : "type"}, {"label" : "Profunctor", "tail" : "", "member" : "zio.prelude.classic.Profunctor", "link" : "zio\/prelude\/package$$classic$.html#Profunctor[=>:[-_,+_]]=zio.prelude.Divariant[=>:]", "kind" : "type"}, {"label" : "Category", "tail" : "", "member" : "zio.prelude.classic.Category", "link" : "zio\/prelude\/package$$classic$.html#Category[=>:[-_,+_]]=zio.prelude.IdentityCompose[=>:]", "kind" : "type"}, {"label" : "InvariantApplicative", "tail" : "", "member" : "zio.prelude.classic.InvariantApplicative", "link" : "zio\/prelude\/package$$classic$.html#InvariantApplicative[F[_]]=zio.prelude.classic.Invariant[F]withzio.prelude.IdentityBoth[F]", "kind" : "type"}, {"label" : "Applicative", "tail" : "", "member" : "zio.prelude.classic.Applicative", "link" : "zio\/prelude\/package$$classic$.html#Applicative[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.IdentityBoth[F]", "kind" : "type"}, {"label" : "Apply", "tail" : "", "member" : "zio.prelude.classic.Apply", "link" : "zio\/prelude\/package$$classic$.html#Apply[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.AssociativeBoth[F]", "kind" : "type"}, {"label" : "Decidable", "tail" : "", "member" : "zio.prelude.classic.Decidable", "link" : "zio\/prelude\/package$$classic$.html#Decidable[F[-_]]=zio.prelude.classic.Contravariant[F]withzio.prelude.IdentityBoth[F]withzio.prelude.IdentityEither[F]", "kind" : "type"}, {"label" : "Divisible", "tail" : "", "member" : "zio.prelude.classic.Divisible", "link" : "zio\/prelude\/package$$classic$.html#Divisible[F[-_]]=zio.prelude.classic.Contravariant[F]withzio.prelude.IdentityBoth[F]", "kind" : "type"}, {"label" : "Divide", "tail" : "", "member" : "zio.prelude.classic.Divide", "link" : "zio\/prelude\/package$$classic$.html#Divide[F[-_]]=zio.prelude.classic.Contravariant[F]withzio.prelude.AssociativeBoth[F]", "kind" : "type"}, {"label" : "Monad", "tail" : "", "member" : "zio.prelude.classic.Monad", "link" : "zio\/prelude\/package$$classic$.html#Monad[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.IdentityFlatten[F]", "kind" : "type"}, {"label" : "FlatMap", "tail" : "", "member" : "zio.prelude.classic.FlatMap", "link" : "zio\/prelude\/package$$classic$.html#FlatMap[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.AssociativeFlatten[F]", "kind" : "type"}, {"label" : "InvariantMonoidal", "tail" : "", "member" : "zio.prelude.classic.InvariantMonoidal", "link" : "zio\/prelude\/package$$classic$.html#InvariantMonoidal[F[_]]=zio.prelude.classic.Invariant[F]withzio.prelude.IdentityBoth[F]", "kind" : "type"}, {"label" : "ContravariantMonoidal", "tail" : "", "member" : "zio.prelude.classic.ContravariantMonoidal", "link" : "zio\/prelude\/package$$classic$.html#ContravariantMonoidal[F[-_]]=zio.prelude.classic.Contravariant[F]withzio.prelude.IdentityBoth[F]", "kind" : "type"}, {"label" : "MonoidK", "tail" : "", "member" : "zio.prelude.classic.MonoidK", "link" : "zio\/prelude\/package$$classic$.html#MonoidK[F[_]]=zio.prelude.IdentityEither[F]", "kind" : "type"}, {"label" : "SemigroupK", "tail" : "", "member" : "zio.prelude.classic.SemigroupK", "link" : "zio\/prelude\/package$$classic$.html#SemigroupK[F[_]]=zio.prelude.AssociativeEither[F]", "kind" : "type"}, {"label" : "ContravariantSemigroupal", "tail" : "", "member" : "zio.prelude.classic.ContravariantSemigroupal", "link" : "zio\/prelude\/package$$classic$.html#ContravariantSemigroupal[F[-_]]=zio.prelude.classic.Contravariant[F]withzio.prelude.AssociativeBoth[F]", "kind" : "type"}, {"label" : "Semigroupal", "tail" : "", "member" : "zio.prelude.classic.Semigroupal", "link" : "zio\/prelude\/package$$classic$.html#Semigroupal[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.AssociativeBoth[F]", "kind" : "type"}, {"label" : "InvariantSemigroupal", "tail" : "", "member" : "zio.prelude.classic.InvariantSemigroupal", "link" : "zio\/prelude\/package$$classic$.html#InvariantSemigroupal[F[_]]=zio.prelude.classic.Invariant[F]withzio.prelude.AssociativeBoth[F]", "kind" : "type"}, {"label" : "InvariantAlt", "tail" : "", "member" : "zio.prelude.classic.InvariantAlt", "link" : "zio\/prelude\/package$$classic$.html#InvariantAlt[F[_]]=zio.prelude.classic.Invariant[F]withzio.prelude.IdentityBoth[F]withzio.prelude.IdentityEither[F]", "kind" : "type"}, {"label" : "Alternative", "tail" : "", "member" : "zio.prelude.classic.Alternative", "link" : "zio\/prelude\/package$$classic$.html#Alternative[F[+_]]=zio.prelude.Covariant[F]withzio.prelude.IdentityBoth[F]withzio.prelude.IdentityEither[F]", "kind" : "type"}, {"label" : "Invariant", "tail" : "", "member" : "zio.prelude.classic.Invariant", "link" : "zio\/prelude\/package$$classic$.html#Invariant[F[_]]=zio.prelude.Invariant[F]", "kind" : "type"}, {"label" : "Contravariant", "tail" : "", "member" : "zio.prelude.classic.Contravariant", "link" : "zio\/prelude\/package$$classic$.html#Contravariant[F[-_]]=zio.prelude.Contravariant[F]", "kind" : "type"}, {"label" : "Functor", "tail" : "", "member" : "zio.prelude.classic.Functor", "link" : "zio\/prelude\/package$$classic$.html#Functor[F[+_]]=zio.prelude.Covariant[F]", "kind" : "type"}, {"label" : "BoundedSemilattice", "tail" : "", "member" : "zio.prelude.classic.BoundedSemilattice", "link" : "zio\/prelude\/package$$classic$.html#BoundedSemilattice[A]=zio.prelude.classic.Semilattice[A]withzio.prelude.Identity[A]", "kind" : "type"}, {"label" : "Semilattice", "tail" : "", "member" : "zio.prelude.classic.Semilattice", "link" : "zio\/prelude\/package$$classic$.html#Semilattice[A]=zio.prelude.Commutative[A]withzio.prelude.Idempotent[A]", "kind" : "type"}, {"label" : "AbelianGroup", "tail" : "", "member" : "zio.prelude.classic.AbelianGroup", "link" : "zio\/prelude\/package$$classic$.html#AbelianGroup[A]=zio.prelude.Commutative[A]withzio.prelude.Inverse[A]", "kind" : "type"}, {"label" : "Group", "tail" : "", "member" : "zio.prelude.classic.Group", "link" : "zio\/prelude\/package$$classic$.html#Group[A]=zio.prelude.Inverse[A]", "kind" : "type"}, {"label" : "CommutativeMonoid", "tail" : "", "member" : "zio.prelude.classic.CommutativeMonoid", "link" : "zio\/prelude\/package$$classic$.html#CommutativeMonoid[A]=zio.prelude.Commutative[A]withzio.prelude.Identity[A]", "kind" : "type"}, {"label" : "Monoid", "tail" : "", "member" : "zio.prelude.classic.Monoid", "link" : "zio\/prelude\/package$$classic$.html#Monoid[A]=zio.prelude.Identity[A]", "kind" : "type"}, {"label" : "CommutativeSemigroup", "tail" : "", "member" : "zio.prelude.classic.CommutativeSemigroup", "link" : "zio\/prelude\/package$$classic$.html#CommutativeSemigroup[A]=zio.prelude.Commutative[A]", "kind" : "type"}, {"label" : "Semigroup", "tail" : "", "member" : "zio.prelude.classic.Semigroup", "link" : "zio\/prelude\/package$$classic$.html#Semigroup[A]=zio.prelude.Associative[A]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/package$$classic$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/package$$classic$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/package$$classic$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/package$$classic$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/package$$classic$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/package$$classic$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/package$$classic$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/package$$classic$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/package$$classic$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/package$$classic$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/package$$classic$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/package$$classic$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/package$$classic$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/package$$classic$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/package$$classic$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/package$$classic$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/package$$classic$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/package$$classic$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/package$$classic$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.Commutative", "object" : "zio\/prelude\/Commutative$.html", "members_object" : [{"label" : "Tuple22Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q], arg17: Commutative[R], arg18: Commutative[S], arg19: Commutative[T], arg20: Commutative[U], arg21: Commutative[V]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Commutative.Tuple22Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple22Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$235:zio.prelude.Commutative[A],implicitevidence$236:zio.prelude.Commutative[B],implicitevidence$237:zio.prelude.Commutative[C],implicitevidence$238:zio.prelude.Commutative[D],implicitevidence$239:zio.prelude.Commutative[E],implicitevidence$240:zio.prelude.Commutative[F],implicitevidence$241:zio.prelude.Commutative[G],implicitevidence$242:zio.prelude.Commutative[H],implicitevidence$243:zio.prelude.Commutative[I],implicitevidence$244:zio.prelude.Commutative[J],implicitevidence$245:zio.prelude.Commutative[K],implicitevidence$246:zio.prelude.Commutative[L],implicitevidence$247:zio.prelude.Commutative[M],implicitevidence$248:zio.prelude.Commutative[N],implicitevidence$249:zio.prelude.Commutative[O],implicitevidence$250:zio.prelude.Commutative[P],implicitevidence$251:zio.prelude.Commutative[Q],implicitevidence$252:zio.prelude.Commutative[R],implicitevidence$253:zio.prelude.Commutative[S],implicitevidence$254:zio.prelude.Commutative[T],implicitevidence$255:zio.prelude.Commutative[U],implicitevidence$256:zio.prelude.Commutative[V]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q], arg17: Commutative[R], arg18: Commutative[S], arg19: Commutative[T], arg20: Commutative[U]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Commutative.Tuple21Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple21Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$214:zio.prelude.Commutative[A],implicitevidence$215:zio.prelude.Commutative[B],implicitevidence$216:zio.prelude.Commutative[C],implicitevidence$217:zio.prelude.Commutative[D],implicitevidence$218:zio.prelude.Commutative[E],implicitevidence$219:zio.prelude.Commutative[F],implicitevidence$220:zio.prelude.Commutative[G],implicitevidence$221:zio.prelude.Commutative[H],implicitevidence$222:zio.prelude.Commutative[I],implicitevidence$223:zio.prelude.Commutative[J],implicitevidence$224:zio.prelude.Commutative[K],implicitevidence$225:zio.prelude.Commutative[L],implicitevidence$226:zio.prelude.Commutative[M],implicitevidence$227:zio.prelude.Commutative[N],implicitevidence$228:zio.prelude.Commutative[O],implicitevidence$229:zio.prelude.Commutative[P],implicitevidence$230:zio.prelude.Commutative[Q],implicitevidence$231:zio.prelude.Commutative[R],implicitevidence$232:zio.prelude.Commutative[S],implicitevidence$233:zio.prelude.Commutative[T],implicitevidence$234:zio.prelude.Commutative[U]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q], arg17: Commutative[R], arg18: Commutative[S], arg19: Commutative[T]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Commutative.Tuple20Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple20Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$194:zio.prelude.Commutative[A],implicitevidence$195:zio.prelude.Commutative[B],implicitevidence$196:zio.prelude.Commutative[C],implicitevidence$197:zio.prelude.Commutative[D],implicitevidence$198:zio.prelude.Commutative[E],implicitevidence$199:zio.prelude.Commutative[F],implicitevidence$200:zio.prelude.Commutative[G],implicitevidence$201:zio.prelude.Commutative[H],implicitevidence$202:zio.prelude.Commutative[I],implicitevidence$203:zio.prelude.Commutative[J],implicitevidence$204:zio.prelude.Commutative[K],implicitevidence$205:zio.prelude.Commutative[L],implicitevidence$206:zio.prelude.Commutative[M],implicitevidence$207:zio.prelude.Commutative[N],implicitevidence$208:zio.prelude.Commutative[O],implicitevidence$209:zio.prelude.Commutative[P],implicitevidence$210:zio.prelude.Commutative[Q],implicitevidence$211:zio.prelude.Commutative[R],implicitevidence$212:zio.prelude.Commutative[S],implicitevidence$213:zio.prelude.Commutative[T]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q], arg17: Commutative[R], arg18: Commutative[S]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Commutative.Tuple19Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple19Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$175:zio.prelude.Commutative[A],implicitevidence$176:zio.prelude.Commutative[B],implicitevidence$177:zio.prelude.Commutative[C],implicitevidence$178:zio.prelude.Commutative[D],implicitevidence$179:zio.prelude.Commutative[E],implicitevidence$180:zio.prelude.Commutative[F],implicitevidence$181:zio.prelude.Commutative[G],implicitevidence$182:zio.prelude.Commutative[H],implicitevidence$183:zio.prelude.Commutative[I],implicitevidence$184:zio.prelude.Commutative[J],implicitevidence$185:zio.prelude.Commutative[K],implicitevidence$186:zio.prelude.Commutative[L],implicitevidence$187:zio.prelude.Commutative[M],implicitevidence$188:zio.prelude.Commutative[N],implicitevidence$189:zio.prelude.Commutative[O],implicitevidence$190:zio.prelude.Commutative[P],implicitevidence$191:zio.prelude.Commutative[Q],implicitevidence$192:zio.prelude.Commutative[R],implicitevidence$193:zio.prelude.Commutative[S]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q], arg17: Commutative[R]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Commutative.Tuple18Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple18Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$157:zio.prelude.Commutative[A],implicitevidence$158:zio.prelude.Commutative[B],implicitevidence$159:zio.prelude.Commutative[C],implicitevidence$160:zio.prelude.Commutative[D],implicitevidence$161:zio.prelude.Commutative[E],implicitevidence$162:zio.prelude.Commutative[F],implicitevidence$163:zio.prelude.Commutative[G],implicitevidence$164:zio.prelude.Commutative[H],implicitevidence$165:zio.prelude.Commutative[I],implicitevidence$166:zio.prelude.Commutative[J],implicitevidence$167:zio.prelude.Commutative[K],implicitevidence$168:zio.prelude.Commutative[L],implicitevidence$169:zio.prelude.Commutative[M],implicitevidence$170:zio.prelude.Commutative[N],implicitevidence$171:zio.prelude.Commutative[O],implicitevidence$172:zio.prelude.Commutative[P],implicitevidence$173:zio.prelude.Commutative[Q],implicitevidence$174:zio.prelude.Commutative[R]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P], arg16: Commutative[Q]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Commutative.Tuple17Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple17Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$140:zio.prelude.Commutative[A],implicitevidence$141:zio.prelude.Commutative[B],implicitevidence$142:zio.prelude.Commutative[C],implicitevidence$143:zio.prelude.Commutative[D],implicitevidence$144:zio.prelude.Commutative[E],implicitevidence$145:zio.prelude.Commutative[F],implicitevidence$146:zio.prelude.Commutative[G],implicitevidence$147:zio.prelude.Commutative[H],implicitevidence$148:zio.prelude.Commutative[I],implicitevidence$149:zio.prelude.Commutative[J],implicitevidence$150:zio.prelude.Commutative[K],implicitevidence$151:zio.prelude.Commutative[L],implicitevidence$152:zio.prelude.Commutative[M],implicitevidence$153:zio.prelude.Commutative[N],implicitevidence$154:zio.prelude.Commutative[O],implicitevidence$155:zio.prelude.Commutative[P],implicitevidence$156:zio.prelude.Commutative[Q]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O], arg15: Commutative[P]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Commutative.Tuple16Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple16Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$124:zio.prelude.Commutative[A],implicitevidence$125:zio.prelude.Commutative[B],implicitevidence$126:zio.prelude.Commutative[C],implicitevidence$127:zio.prelude.Commutative[D],implicitevidence$128:zio.prelude.Commutative[E],implicitevidence$129:zio.prelude.Commutative[F],implicitevidence$130:zio.prelude.Commutative[G],implicitevidence$131:zio.prelude.Commutative[H],implicitevidence$132:zio.prelude.Commutative[I],implicitevidence$133:zio.prelude.Commutative[J],implicitevidence$134:zio.prelude.Commutative[K],implicitevidence$135:zio.prelude.Commutative[L],implicitevidence$136:zio.prelude.Commutative[M],implicitevidence$137:zio.prelude.Commutative[N],implicitevidence$138:zio.prelude.Commutative[O],implicitevidence$139:zio.prelude.Commutative[P]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N], arg14: Commutative[O]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Commutative.Tuple15Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple15Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$109:zio.prelude.Commutative[A],implicitevidence$110:zio.prelude.Commutative[B],implicitevidence$111:zio.prelude.Commutative[C],implicitevidence$112:zio.prelude.Commutative[D],implicitevidence$113:zio.prelude.Commutative[E],implicitevidence$114:zio.prelude.Commutative[F],implicitevidence$115:zio.prelude.Commutative[G],implicitevidence$116:zio.prelude.Commutative[H],implicitevidence$117:zio.prelude.Commutative[I],implicitevidence$118:zio.prelude.Commutative[J],implicitevidence$119:zio.prelude.Commutative[K],implicitevidence$120:zio.prelude.Commutative[L],implicitevidence$121:zio.prelude.Commutative[M],implicitevidence$122:zio.prelude.Commutative[N],implicitevidence$123:zio.prelude.Commutative[O]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M], arg13: Commutative[N]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Commutative.Tuple14Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple14Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$95:zio.prelude.Commutative[A],implicitevidence$96:zio.prelude.Commutative[B],implicitevidence$97:zio.prelude.Commutative[C],implicitevidence$98:zio.prelude.Commutative[D],implicitevidence$99:zio.prelude.Commutative[E],implicitevidence$100:zio.prelude.Commutative[F],implicitevidence$101:zio.prelude.Commutative[G],implicitevidence$102:zio.prelude.Commutative[H],implicitevidence$103:zio.prelude.Commutative[I],implicitevidence$104:zio.prelude.Commutative[J],implicitevidence$105:zio.prelude.Commutative[K],implicitevidence$106:zio.prelude.Commutative[L],implicitevidence$107:zio.prelude.Commutative[M],implicitevidence$108:zio.prelude.Commutative[N]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L], arg12: Commutative[M]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Commutative.Tuple13Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple13Commutative[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$82:zio.prelude.Commutative[A],implicitevidence$83:zio.prelude.Commutative[B],implicitevidence$84:zio.prelude.Commutative[C],implicitevidence$85:zio.prelude.Commutative[D],implicitevidence$86:zio.prelude.Commutative[E],implicitevidence$87:zio.prelude.Commutative[F],implicitevidence$88:zio.prelude.Commutative[G],implicitevidence$89:zio.prelude.Commutative[H],implicitevidence$90:zio.prelude.Commutative[I],implicitevidence$91:zio.prelude.Commutative[J],implicitevidence$92:zio.prelude.Commutative[K],implicitevidence$93:zio.prelude.Commutative[L],implicitevidence$94:zio.prelude.Commutative[M]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K], arg11: Commutative[L]): Commutative[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Commutative.Tuple12Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple12Commutative[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$70:zio.prelude.Commutative[A],implicitevidence$71:zio.prelude.Commutative[B],implicitevidence$72:zio.prelude.Commutative[C],implicitevidence$73:zio.prelude.Commutative[D],implicitevidence$74:zio.prelude.Commutative[E],implicitevidence$75:zio.prelude.Commutative[F],implicitevidence$76:zio.prelude.Commutative[G],implicitevidence$77:zio.prelude.Commutative[H],implicitevidence$78:zio.prelude.Commutative[I],implicitevidence$79:zio.prelude.Commutative[J],implicitevidence$80:zio.prelude.Commutative[K],implicitevidence$81:zio.prelude.Commutative[L]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J], arg10: Commutative[K]): Commutative[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Commutative.Tuple11Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple11Commutative[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$59:zio.prelude.Commutative[A],implicitevidence$60:zio.prelude.Commutative[B],implicitevidence$61:zio.prelude.Commutative[C],implicitevidence$62:zio.prelude.Commutative[D],implicitevidence$63:zio.prelude.Commutative[E],implicitevidence$64:zio.prelude.Commutative[F],implicitevidence$65:zio.prelude.Commutative[G],implicitevidence$66:zio.prelude.Commutative[H],implicitevidence$67:zio.prelude.Commutative[I],implicitevidence$68:zio.prelude.Commutative[J],implicitevidence$69:zio.prelude.Commutative[K]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I], arg9: Commutative[J]): Commutative[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Commutative.Tuple10Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple10Commutative[A,B,C,D,E,F,G,H,I,J](implicitevidence$49:zio.prelude.Commutative[A],implicitevidence$50:zio.prelude.Commutative[B],implicitevidence$51:zio.prelude.Commutative[C],implicitevidence$52:zio.prelude.Commutative[D],implicitevidence$53:zio.prelude.Commutative[E],implicitevidence$54:zio.prelude.Commutative[F],implicitevidence$55:zio.prelude.Commutative[G],implicitevidence$56:zio.prelude.Commutative[H],implicitevidence$57:zio.prelude.Commutative[I],implicitevidence$58:zio.prelude.Commutative[J]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H], arg8: Commutative[I]): Commutative[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Commutative.Tuple9Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple9Commutative[A,B,C,D,E,F,G,H,I](implicitevidence$40:zio.prelude.Commutative[A],implicitevidence$41:zio.prelude.Commutative[B],implicitevidence$42:zio.prelude.Commutative[C],implicitevidence$43:zio.prelude.Commutative[D],implicitevidence$44:zio.prelude.Commutative[E],implicitevidence$45:zio.prelude.Commutative[F],implicitevidence$46:zio.prelude.Commutative[G],implicitevidence$47:zio.prelude.Commutative[H],implicitevidence$48:zio.prelude.Commutative[I]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G], arg7: Commutative[H]): Commutative[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Commutative.Tuple8Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple8Commutative[A,B,C,D,E,F,G,H](implicitevidence$32:zio.prelude.Commutative[A],implicitevidence$33:zio.prelude.Commutative[B],implicitevidence$34:zio.prelude.Commutative[C],implicitevidence$35:zio.prelude.Commutative[D],implicitevidence$36:zio.prelude.Commutative[E],implicitevidence$37:zio.prelude.Commutative[F],implicitevidence$38:zio.prelude.Commutative[G],implicitevidence$39:zio.prelude.Commutative[H]):zio.prelude.Commutative[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F], arg6: Commutative[G]): Commutative[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Commutative.Tuple7Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple7Commutative[A,B,C,D,E,F,G](implicitevidence$25:zio.prelude.Commutative[A],implicitevidence$26:zio.prelude.Commutative[B],implicitevidence$27:zio.prelude.Commutative[C],implicitevidence$28:zio.prelude.Commutative[D],implicitevidence$29:zio.prelude.Commutative[E],implicitevidence$30:zio.prelude.Commutative[F],implicitevidence$31:zio.prelude.Commutative[G]):zio.prelude.Commutative[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E], arg5: Commutative[F]): Commutative[(A, B, C, D, E, F)]", "member" : "zio.prelude.Commutative.Tuple6Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple6Commutative[A,B,C,D,E,F](implicitevidence$19:zio.prelude.Commutative[A],implicitevidence$20:zio.prelude.Commutative[B],implicitevidence$21:zio.prelude.Commutative[C],implicitevidence$22:zio.prelude.Commutative[D],implicitevidence$23:zio.prelude.Commutative[E],implicitevidence$24:zio.prelude.Commutative[F]):zio.prelude.Commutative[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D], arg4: Commutative[E]): Commutative[(A, B, C, D, E)]", "member" : "zio.prelude.Commutative.Tuple5Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple5Commutative[A,B,C,D,E](implicitevidence$14:zio.prelude.Commutative[A],implicitevidence$15:zio.prelude.Commutative[B],implicitevidence$16:zio.prelude.Commutative[C],implicitevidence$17:zio.prelude.Commutative[D],implicitevidence$18:zio.prelude.Commutative[E]):zio.prelude.Commutative[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C], arg3: Commutative[D]): Commutative[(A, B, C, D)]", "member" : "zio.prelude.Commutative.Tuple4Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple4Commutative[A,B,C,D](implicitevidence$10:zio.prelude.Commutative[A],implicitevidence$11:zio.prelude.Commutative[B],implicitevidence$12:zio.prelude.Commutative[C],implicitevidence$13:zio.prelude.Commutative[D]):zio.prelude.Commutative[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B], arg2: Commutative[C]): Commutative[(A, B, C)]", "member" : "zio.prelude.Commutative.Tuple3Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple3Commutative[A,B,C](implicitevidence$7:zio.prelude.Commutative[A],implicitevidence$8:zio.prelude.Commutative[B],implicitevidence$9:zio.prelude.Commutative[C]):zio.prelude.Commutative[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Commutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B]): Commutative[(A, B)]", "member" : "zio.prelude.Commutative.Tuple2Commutative", "link" : "zio\/prelude\/Commutative$.html#Tuple2Commutative[A,B](implicitevidence$5:zio.prelude.Commutative[A],implicitevidence$6:zio.prelude.Commutative[B]):zio.prelude.Commutative[(A,B)]", "kind" : "implicit def"}, {"label" : "OptionCommutative", "tail" : "(arg0: Commutative[A]): Commutative[Option[A]]", "member" : "zio.prelude.Commutative.OptionCommutative", "link" : "zio\/prelude\/Commutative$.html#OptionCommutative[A](implicitevidence$4:zio.prelude.Commutative[A]):zio.prelude.Commutative[Option[A]]", "kind" : "implicit def"}, {"label" : "MapCommutative", "tail" : "(arg0: Commutative[V]): Commutative[Map[K, V]]", "member" : "zio.prelude.Commutative.MapCommutative", "link" : "zio\/prelude\/Commutative$.html#MapCommutative[K,V](implicitevidence$3:zio.prelude.Commutative[V]):zio.prelude.Commutative[Map[K,V]]", "kind" : "implicit def"}, {"label" : "EitherCommutative", "tail" : "(arg0: Commutative[E], arg1: Commutative[A]): Commutative[Either[E, A]]", "member" : "zio.prelude.Commutative.EitherCommutative", "link" : "zio\/prelude\/Commutative$.html#EitherCommutative[E,A](implicitevidence$1:zio.prelude.Commutative[E],implicitevidence$2:zio.prelude.Commutative[A]):zio.prelude.Commutative[Either[E,A]]", "kind" : "implicit def"}, {"label" : "DeriveCommutative", "tail" : "(derive: Derive[F, Commutative], commutative: Commutative[A]): Commutative[F[A]]", "member" : "zio.prelude.Commutative.DeriveCommutative", "link" : "zio\/prelude\/Commutative$.html#DeriveCommutative[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Commutative],implicitcommutative:zio.prelude.Commutative[A]):zio.prelude.Commutative[F[A]]", "kind" : "implicit def"}, {"label" : "makeFrom", "tail" : "(associative: Associative[A]): Commutative[A]", "member" : "zio.prelude.Commutative.makeFrom", "link" : "zio\/prelude\/Commutative$.html#makeFrom[A](associative:zio.prelude.Associative[A]):zio.prelude.Commutative[A]", "kind" : "def"}, {"label" : "make", "tail" : "(f: (A, A) => A): Commutative[A]", "member" : "zio.prelude.Commutative.make", "link" : "zio\/prelude\/Commutative$.html#make[A](f:(A,A)=>A):zio.prelude.Commutative[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(commutative: Commutative[A]): Commutative[A]", "member" : "zio.prelude.Commutative.apply", "link" : "zio\/prelude\/Commutative$.html#apply[A](implicitcommutative:zio.prelude.Commutative[A]):zio.prelude.Commutative[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Commutative$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Commutative$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Commutative$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Commutative$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Commutative$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Commutative$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Commutative$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Commutative$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Commutative$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Commutative$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Commutative$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Commutative$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Commutative$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Commutative$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Commutative$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Commutative$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Commutative.html", "kind" : "trait", "members_trait" : [{"label" : "commute", "tail" : "(): Commutative[A]", "member" : "zio.prelude.Commutative.commute", "link" : "zio\/prelude\/Commutative.html#commute:zio.prelude.Commutative[A]", "kind" : "final def"}, {"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/Commutative.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/Commutative.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Commutative.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Commutative.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Commutative.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Commutative.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Commutative.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Commutative.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Commutative.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Commutative.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Commutative.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Commutative.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Commutative.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Commutative.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Commutative.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Commutative.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Commutative.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Commutative.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Commutative.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/Commutative.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : "The Commutative type class describes a binary operator for a type A thatis both associative and commutative."}, {"name" : "zio.prelude.CommutativeBoth", "object" : "zio\/prelude\/CommutativeBoth$.html", "members_object" : [{"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20], a21: F[A21])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20],a21:F[A21])(implicitevidence$83:zio.prelude.CommutativeBoth[F],implicitevidence$84:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20])(implicitevidence$81:zio.prelude.CommutativeBoth[F],implicitevidence$82:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19])(implicitevidence$79:zio.prelude.CommutativeBoth[F],implicitevidence$80:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18])(implicitevidence$77:zio.prelude.CommutativeBoth[F],implicitevidence$78:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17])(implicitevidence$75:zio.prelude.CommutativeBoth[F],implicitevidence$76:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16])(implicitevidence$73:zio.prelude.CommutativeBoth[F],implicitevidence$74:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15])(implicitevidence$71:zio.prelude.CommutativeBoth[F],implicitevidence$72:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14])(implicitevidence$69:zio.prelude.CommutativeBoth[F],implicitevidence$70:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13])(implicitevidence$67:zio.prelude.CommutativeBoth[F],implicitevidence$68:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12])(implicitevidence$65:zio.prelude.CommutativeBoth[F],implicitevidence$66:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11])(implicitevidence$63:zio.prelude.CommutativeBoth[F],implicitevidence$64:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10])(implicitevidence$61:zio.prelude.CommutativeBoth[F],implicitevidence$62:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9])(implicitevidence$59:zio.prelude.CommutativeBoth[F],implicitevidence$60:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8])(implicitevidence$57:zio.prelude.CommutativeBoth[F],implicitevidence$58:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7])(implicitevidence$55:zio.prelude.CommutativeBoth[F],implicitevidence$56:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5,A6](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6])(implicitevidence$53:zio.prelude.CommutativeBoth[F],implicitevidence$54:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4,A5](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5])(implicitevidence$51:zio.prelude.CommutativeBoth[F],implicitevidence$52:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3, A4)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3,A4](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4])(implicitevidence$49:zio.prelude.CommutativeBoth[F],implicitevidence$50:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2, A3)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2,A3](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3])(implicitevidence$47:zio.prelude.CommutativeBoth[F],implicitevidence$48:zio.prelude.Covariant[F]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1, A2)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1,A2](a0:F[A0],a1:F[A1],a2:F[A2])(implicitevidence$45:zio.prelude.CommutativeBoth[F],implicitevidence$46:zio.prelude.Covariant[F]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "tupleN", "tail" : "(a0: F[A0], a1: F[A1])(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[(A0, A1)]", "member" : "zio.prelude.CommutativeBoth.tupleN", "link" : "zio\/prelude\/CommutativeBoth$.html#tupleN[F[+_],A0,A1](a0:F[A0],a1:F[A1])(implicitevidence$43:zio.prelude.CommutativeBoth[F],implicitevidence$44:zio.prelude.Covariant[F]):F[(A0,A1)]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20], a21: F[A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20],a21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$41:zio.prelude.CommutativeBoth[F],implicitevidence$42:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19], a20: F[A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19],a20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$39:zio.prelude.CommutativeBoth[F],implicitevidence$40:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18], a19: F[A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18],a19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$37:zio.prelude.CommutativeBoth[F],implicitevidence$38:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17], a18: F[A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17],a18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$35:zio.prelude.CommutativeBoth[F],implicitevidence$36:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16], a17: F[A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16],a17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$33:zio.prelude.CommutativeBoth[F],implicitevidence$34:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15], a16: F[A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15],a16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$31:zio.prelude.CommutativeBoth[F],implicitevidence$32:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14], a15: F[A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14],a15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$29:zio.prelude.CommutativeBoth[F],implicitevidence$30:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13], a14: F[A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13],a14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$27:zio.prelude.CommutativeBoth[F],implicitevidence$28:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12], a13: F[A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12],a13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$25:zio.prelude.CommutativeBoth[F],implicitevidence$26:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11], a12: F[A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11],a12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$23:zio.prelude.CommutativeBoth[F],implicitevidence$24:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10], a11: F[A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10],a11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$21:zio.prelude.CommutativeBoth[F],implicitevidence$22:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9], a10: F[A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9],a10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$19:zio.prelude.CommutativeBoth[F],implicitevidence$20:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8], a9: F[A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8],a9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$17:zio.prelude.CommutativeBoth[F],implicitevidence$18:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7], a8: F[A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,A8,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7],a8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$15:zio.prelude.CommutativeBoth[F],implicitevidence$16:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6], a7: F[A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,A7,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6],a7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$13:zio.prelude.CommutativeBoth[F],implicitevidence$14:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5], a6: F[A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,A6,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5],a6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$11:zio.prelude.CommutativeBoth[F],implicitevidence$12:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4], a5: F[A5])(f: (A0, A1, A2, A3, A4, A5) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,A5,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4],a5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>B)(implicitevidence$9:zio.prelude.CommutativeBoth[F],implicitevidence$10:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3], a4: F[A4])(f: (A0, A1, A2, A3, A4) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,A4,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3],a4:F[A4])(f:(A0,A1,A2,A3,A4)=>B)(implicitevidence$7:zio.prelude.CommutativeBoth[F],implicitevidence$8:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2], a3: F[A3])(f: (A0, A1, A2, A3) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,A3,B](a0:F[A0],a1:F[A1],a2:F[A2],a3:F[A3])(f:(A0,A1,A2,A3)=>B)(implicitevidence$5:zio.prelude.CommutativeBoth[F],implicitevidence$6:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1], a2: F[A2])(f: (A0, A1, A2) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,A2,B](a0:F[A0],a1:F[A1],a2:F[A2])(f:(A0,A1,A2)=>B)(implicitevidence$3:zio.prelude.CommutativeBoth[F],implicitevidence$4:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "mapN", "tail" : "(a0: F[A0], a1: F[A1])(f: (A0, A1) => B)(arg0: CommutativeBoth[F], arg1: Covariant[F]): F[B]", "member" : "zio.prelude.CommutativeBoth.mapN", "link" : "zio\/prelude\/CommutativeBoth$.html#mapN[F[+_],A0,A1,B](a0:F[A0],a1:F[A1])(f:(A0,A1)=>B)(implicitevidence$1:zio.prelude.CommutativeBoth[F],implicitevidence$2:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "ZStreamCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZStream[R, E, a]]", "member" : "zio.prelude.CommutativeBoth.ZStreamCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZStreamCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.stream.ZStream[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZSinkCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZSink[R, E, I, L, a]]", "member" : "zio.prelude.CommutativeBoth.ZSinkCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZSinkCommutativeBoth[R,E,I,L]:zio.prelude.CommutativeBoth[[+a]zio.stream.ZSink[R,E,I,L,a]]", "kind" : "implicit def"}, {"label" : "ZManagedFailureCommutativeBoth", "tail" : "(): CommutativeBoth[[+e]Type[ZManaged[R, e, A]]]", "member" : "zio.prelude.CommutativeBoth.ZManagedFailureCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZManagedFailureCommutativeBoth[R,A]:zio.prelude.CommutativeBoth[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZManaged[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZManagedCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZManaged[R, E, a]]", "member" : "zio.prelude.CommutativeBoth.ZManagedCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZManagedCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.ZManaged[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZLayerCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZLayer[R, E, a]]", "member" : "zio.prelude.CommutativeBoth.ZLayerCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZLayerCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.ZLayer[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZIOFailureCommutativeBoth", "tail" : "(): CommutativeBoth[[+e]Type[ZIO[R, e, A]]]", "member" : "zio.prelude.CommutativeBoth.ZIOFailureCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZIOFailureCommutativeBoth[R,A]:zio.prelude.CommutativeBoth[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZIO[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZIOCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.CommutativeBoth.ZIOCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ZIOCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "VectorCommutativeBoth", "tail" : ": CommutativeBoth[Vector]", "member" : "zio.prelude.CommutativeBoth.VectorCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#VectorCommutativeBoth:zio.prelude.CommutativeBoth[Vector]", "kind" : "implicit val"}, {"label" : "ScheduleOrCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]Type[Schedule[R, E, a]]]", "member" : "zio.prelude.CommutativeBoth.ScheduleOrCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ScheduleOrCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.prelude.newtypes.OrF.subtypeF.Type[zio.Schedule[R,E,a]]]", "kind" : "implicit def"}, {"label" : "ScheduleAndCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]Type[Schedule[R, E, a]]]", "member" : "zio.prelude.CommutativeBoth.ScheduleAndCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ScheduleAndCommutativeBoth[R,E]:zio.prelude.CommutativeBoth[[+a]zio.prelude.newtypes.AndF.subtypeF.Type[zio.Schedule[R,E,a]]]", "kind" : "implicit def"}, {"label" : "OptionCommutativeBoth", "tail" : ": CommutativeBoth[Option]", "member" : "zio.prelude.CommutativeBoth.OptionCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#OptionCommutativeBoth:zio.prelude.CommutativeBoth[Option]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkCommutativeBoth", "tail" : ": CommutativeBoth[NonEmptyChunk]", "member" : "zio.prelude.CommutativeBoth.NonEmptyChunkCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#NonEmptyChunkCommutativeBoth:zio.prelude.CommutativeBoth[zio.NonEmptyChunk]", "kind" : "implicit val"}, {"label" : "ListCommutativeBoth", "tail" : ": CommutativeBoth[List]", "member" : "zio.prelude.CommutativeBoth.ListCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ListCommutativeBoth:zio.prelude.CommutativeBoth[List]", "kind" : "implicit val"}, {"label" : "IdCommutativeBoth", "tail" : ": CommutativeBoth[prelude.Id]", "member" : "zio.prelude.CommutativeBoth.IdCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#IdCommutativeBoth:zio.prelude.CommutativeBoth[zio.prelude.Id]", "kind" : "implicit val"}, {"label" : "ExitCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]Exit[E, a]]", "member" : "zio.prelude.CommutativeBoth.ExitCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ExitCommutativeBoth[E]:zio.prelude.CommutativeBoth[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "ChunkCommutativeBoth", "tail" : ": CommutativeBoth[Chunk]", "member" : "zio.prelude.CommutativeBoth.ChunkCommutativeBoth", "link" : "zio\/prelude\/CommutativeBoth$.html#ChunkCommutativeBoth:zio.prelude.CommutativeBoth[zio.Chunk]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(commutativeBoth: CommutativeBoth[F]): CommutativeBoth[F]", "member" : "zio.prelude.CommutativeBoth.apply", "link" : "zio\/prelude\/CommutativeBoth$.html#apply[F[_]](implicitcommutativeBoth:zio.prelude.CommutativeBoth[F]):zio.prelude.CommutativeBoth[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBoth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBoth$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBoth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBoth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBoth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBoth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBoth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBoth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBoth$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBoth$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBoth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBoth$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBoth$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBoth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBoth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBoth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/CommutativeBoth.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBoth.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBoth.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBoth.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBoth.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBoth.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBoth.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBoth.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBoth.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBoth.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBoth.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBoth.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBoth.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBoth.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBoth.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBoth.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBoth.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBoth.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/CommutativeBoth.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "A commutative binary operator that combines two values of types F[A] andF[B] to produce an F[(A, B)]."}, {"name" : "zio.prelude.CommutativeBothSyntax", "trait" : "zio\/prelude\/CommutativeBothSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "CommutativeBothTuple22Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple22Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple22Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple21Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple21Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple21Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple20Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple20Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple20Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple19Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple19Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple19Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple18Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple18Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple18Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple17Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple17Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple17Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple16Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple16Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple16Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple15Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple15Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple15Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple14Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple14Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple14Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple13Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple13Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple13Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple12Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple12Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple12Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple11Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple11Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple11Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple10Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple10Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple10Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple9Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple9Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple9Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8,T9]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple8Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple8Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple8Ops[F[+_],T1,T2,T3,T4,T5,T6,T7,T8]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple7Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple7Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple7Ops[F[+_],T1,T2,T3,T4,T5,T6,T7]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple6Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple6Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple6Ops[F[+_],T1,T2,T3,T4,T5,T6]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple5Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple5Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple5Ops[F[+_],T1,T2,T3,T4,T5]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple4Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple4Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple4Ops[F[+_],T1,T2,T3,T4]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple3Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple3Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple3Ops[F[+_],T1,T2,T3]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothTuple2Ops", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple2Ops", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothTuple2Ops[F[+_],T1,T2]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothContraVariantOps", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothContraVariantOps", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothContraVariantOps[F[-_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothCovariantOps", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothCovariantOps", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothCovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeBothOps", "tail" : "", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothOps", "link" : "zio\/prelude\/CommutativeBothSyntax.html#CommutativeBothOps[F[_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothContraVariantOps", "shortDescription" : "Provides infix syntax for commutative operations for contravariant types.", "members_class" : [{"label" : "bothWithPar", "tail" : "(fb: => F[B])(f: (C) => (A, B))(both: CommutativeBoth[F], contravariant: Contravariant[F]): F[C]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothContraVariantOps.bothWithPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#bothWithPar[B,C](fb:=>F[B])(f:C=>(A,B))(implicitboth:zio.prelude.CommutativeBoth[F],implicitcontravariant:zio.prelude.Contravariant[F]):F[C]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothContraVariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothContraVariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothCovariantOps", "shortDescription" : "Provides infix syntax for commutative operations for covariant types.", "members_class" : [{"label" : "zipWithPar", "tail" : "(fb: => F[B])(f: (A, B) => C)(both: CommutativeBoth[F], covariant: Covariant[F]): F[C]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothCovariantOps.zipWithPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#zipWithPar[B,C](fb:=>F[B])(f:(A,B)=>C)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[C]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothCovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothCovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothOps", "shortDescription" : "Provides infix syntax for commutative operations for invariant types.", "members_class" : [{"label" : "zipPar", "tail" : "(fb: => F[B])(both: CommutativeBoth[F]): F[(A, B)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothOps.zipPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#zipPar[B](fb:=>F[B])(implicitboth:zio.prelude.CommutativeBoth[F]):F[(A,B)]", "kind" : "def"}, {"label" : "<&>", "tail" : "(fb: => F[B])(both: CommutativeBoth[F]): F[(A, B)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothOps.<&>", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#<&>[B](fb:=>F[B])(implicitboth:zio.prelude.CommutativeBoth[F]):F[(A,B)]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothOps.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple10Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple10Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple10Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple10Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple10Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple11Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple11Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple11Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple11Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple11Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple12Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple12Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple12Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple12Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple12Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple13Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple13Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple13Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple13Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple13Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple14Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple14Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple14Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple14Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple14Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple15Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple15Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple15Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple15Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple15Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple16Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple16Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple16Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple16Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple16Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple17Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple17Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple17Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple17Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple17Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple18Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple18Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple18Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple18Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple18Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple19Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple19Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple19Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple19Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple19Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple20Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple20Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple20Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple20Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple20Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple21Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple21Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple21Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple21Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple21Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple22Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple22Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple22Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple22Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple22Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple2Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple2Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple2Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#mapParN[R](f:(T1,T2)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple2Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple2Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple3Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple3Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple3Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#mapParN[R](f:(T1,T2,T3)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple3Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple3Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple4Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple4Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple4Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#mapParN[R](f:(T1,T2,T3,T4)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple4Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple4Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple5Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple5Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple5Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple5Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple5Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple6Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple6Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple6Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple6Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple6Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple7Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple7Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple7Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple7Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple7Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple8Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple8Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple8Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple8Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple8Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple9Ops", "shortDescription" : "", "members_class" : [{"label" : "tupledPar", "tail" : "(both: CommutativeBoth[F], covariant: Covariant[F]): F[(T1, T2, T3, T4, T5, T6, T7, T8, T9)]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple9Ops.tupledPar", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#tupledPar(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[(T1,T2,T3,T4,T5,T6,T7,T8,T9)]", "kind" : "def"}, {"label" : "mapParN", "tail" : "(f: (T1, T2, T3, T4, T5, T6, T7, T8, T9) => R)(both: CommutativeBoth[F], covariant: Covariant[F]): F[R]", "member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple9Ops.mapParN", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#mapParN[R](f:(T1,T2,T3,T4,T5,T6,T7,T8,T9)=>R)(implicitboth:zio.prelude.CommutativeBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[R]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeBothSyntax.CommutativeBothTuple9Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeBothSyntax$CommutativeBothTuple9Ops.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeEither", "object" : "zio\/prelude\/CommutativeEither$.html", "members_object" : [{"label" : "apply", "tail" : "(commutativeEither: CommutativeEither[F]): CommutativeEither[F]", "member" : "zio.prelude.CommutativeEither.apply", "link" : "zio\/prelude\/CommutativeEither$.html#apply[F[_]](implicitcommutativeEither:zio.prelude.CommutativeEither[F]):zio.prelude.CommutativeEither[F]", "kind" : "def"}, {"label" : "ZStreamCommutativeEither", "tail" : "(): CommutativeEither[[+a]ZStream[R, E, a]]", "member" : "zio.prelude.CommutativeEither.ZStreamCommutativeEither", "link" : "zio\/prelude\/CommutativeEither$.html#ZStreamCommutativeEither[R,E]:zio.prelude.CommutativeEither[[+a]zio.stream.ZStream[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZSinkCommutativeEither", "tail" : "(): CommutativeEither[[+a]ZSink[R, E, I, L, a]]", "member" : "zio.prelude.CommutativeEither.ZSinkCommutativeEither", "link" : "zio\/prelude\/CommutativeEither$.html#ZSinkCommutativeEither[R,E,I,L]:zio.prelude.CommutativeEither[[+a]zio.stream.ZSink[R,E,I,L,a]]", "kind" : "implicit def"}, {"label" : "ZIOCommutativeEither", "tail" : "(): CommutativeEither[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.CommutativeEither.ZIOCommutativeEither", "link" : "zio\/prelude\/CommutativeEither$.html#ZIOCommutativeEither[R,E]:zio.prelude.CommutativeEither[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "FutureCommutativeEither", "tail" : "(ec: ExecutionContext): CommutativeEither[Future]", "member" : "zio.prelude.CommutativeEither.FutureCommutativeEither", "link" : "zio\/prelude\/CommutativeEither$.html#FutureCommutativeEither(implicitec:scala.concurrent.ExecutionContext):zio.prelude.CommutativeEither[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEither$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEither$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEither$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEither$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEither$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEither$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEither$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEither$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEither$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEither$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEither$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEither$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEither$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEither$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEither$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEither$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/CommutativeEither.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEither.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEither.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEither.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEither.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEither.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEither.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEither.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEither.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEither.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEither.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEither.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEither.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEither.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEither.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEither.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEither.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEither.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/CommutativeEither.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : "A commutative binary operator that combines two values of types F[A] andF[B] to produce an F[Either[A, B]]."}, {"name" : "zio.prelude.CommutativeEitherSyntax", "trait" : "zio\/prelude\/CommutativeEitherSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "CommutativeEitherContravariantOps", "tail" : "", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherContravariantOps", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#CommutativeEitherContravariantOps[F[-_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeEitherCovariantOps", "tail" : "", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherCovariantOps", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#CommutativeEitherCovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "CommutativeEitherOps", "tail" : "", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherOps", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#CommutativeEitherOps[F[_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEitherSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherContravariantOps", "shortDescription" : "Provides infix syntax for commutative operations for contravariant types.", "members_class" : [{"label" : "eitherWithPar", "tail" : "(fb: => F[B])(f: (C) => Either[A, B])(either: CommutativeEither[F], contravariant: Contravariant[F]): F[C]", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherContravariantOps.eitherWithPar", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#eitherWithPar[B,C](fb:=>F[B])(f:C=>Either[A,B])(impliciteither:zio.prelude.CommutativeEither[F],implicitcontravariant:zio.prelude.Contravariant[F]):F[C]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherContravariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherContravariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherCovariantOps", "shortDescription" : "Provides infix syntax for commutative operations for covariant types.", "members_class" : [{"label" : "orElsePar", "tail" : "(fa2: => F[A])(either: CommutativeEither[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherCovariantOps.orElsePar", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#orElsePar(fa2:=>F[A])(impliciteither:zio.prelude.CommutativeEither[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherCovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherCovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherOps", "shortDescription" : "Provides infix syntax for commutative operations for invariant types.", "members_class" : [{"label" : "orElseEitherPar", "tail" : "(fb: => F[B])(either: CommutativeEither[F]): F[Either[A, B]]", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherOps.orElseEitherPar", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#orElseEitherPar[B](fb:=>F[B])(impliciteither:zio.prelude.CommutativeEither[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "<|>", "tail" : "(fb: => F[B])(either: CommutativeEither[F]): F[Either[A, B]]", "member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherOps.<|>", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#<|>[B](fb:=>F[B])(impliciteither:zio.prelude.CommutativeEither[F]):F[Either[A,B]]", "kind" : "def"}, {"member" : "zio.prelude.CommutativeEitherSyntax.CommutativeEitherOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CommutativeEitherSyntax$CommutativeEitherOps.html", "kind" : "class"}, {"name" : "zio.prelude.Comparison", "object" : "zio\/prelude\/Comparison$.html", "members_object" : [{"label" : "NotEqual", "tail" : "", "member" : "zio.prelude.Comparison.NotEqual", "link" : "zio\/prelude\/Comparison$.html#NotEqualextendsComparison", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Comparison$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Comparison$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Comparison$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Comparison$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Comparison$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Comparison$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Comparison$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Comparison$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Comparison$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Comparison$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Comparison$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Comparison$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Comparison$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Comparison$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Comparison$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Comparison$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Comparison.html", "kind" : "trait", "members_trait" : [{"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/Comparison.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/prelude\/Comparison.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/prelude\/Comparison.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/prelude\/Comparison.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Comparison.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Comparison.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Comparison.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Comparison.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Comparison.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Comparison.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Comparison.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Comparison.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Comparison.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Comparison.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Comparison.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Comparison.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Comparison.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Comparison.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Comparison.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Comparison.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Comparison.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/prelude\/Comparison.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/prelude\/Comparison.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/prelude\/Comparison.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ConstExports", "trait" : "zio\/prelude\/ConstExports.html", "kind" : "trait", "members_trait" : [{"label" : "Const", "tail" : "", "member" : "zio.prelude.ConstExports.Const", "link" : "zio\/prelude\/ConstExports.html#Const[+A,+B]=ConstExports.this.Const.Type[A]", "kind" : "type"}, {"label" : "Const", "tail" : "", "member" : "zio.prelude.ConstExports.Const", "link" : "zio\/prelude\/ConstExports.html#Const", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ConstExports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ConstExports.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ConstExports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ConstExports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ConstExports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ConstExports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ConstExports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ConstExports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ConstExports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ConstExports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ConstExports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ConstExports.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ConstExports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ConstExports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ConstExports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ConstExports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ConstExports.Const", "shortDescription" : "", "object" : "zio\/prelude\/ConstExports$Const$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/ConstExports$Const$.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/ConstExports$Const$.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/ConstExports$Const$.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/ConstExports$Const$.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/ConstExports$Const$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/ConstExports$Const$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/ConstExports$Const$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/ConstExports$Const$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ConstExports$Const$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ConstExports$Const$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ConstExports$Const$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ConstExports$Const$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ConstExports$Const$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ConstExports$Const$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ConstExports$Const$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports$Const$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports$Const$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ConstExports$Const$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ConstExports$Const$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ConstExports$Const$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ConstExports$Const$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ConstExports$Const$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ConstExports$Const$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ConstExports$Const$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ConstExports$Const$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ConstExports$Const$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ConstExports$Const$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.Contravariant", "object" : "zio\/prelude\/Contravariant$.html", "members_object" : [{"label" : "apply", "tail" : "(contravariant: Contravariant[F]): Contravariant[F]", "member" : "zio.prelude.Contravariant.apply", "link" : "zio\/prelude\/Contravariant$.html#apply[F[-_]](implicitcontravariant:zio.prelude.Contravariant[F]):zio.prelude.Contravariant[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Contravariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Contravariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Contravariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Contravariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Contravariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Contravariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Contravariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Contravariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Contravariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Contravariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Contravariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Contravariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Contravariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Contravariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Contravariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Contravariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Contravariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Covariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Contravariant.compose", "link" : "zio\/prelude\/Contravariant.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Contravariant.compose", "link" : "zio\/prelude\/Contravariant.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Contravariant.invmap", "link" : "zio\/prelude\/Contravariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "contramapSubset", "tail" : "(f: (B) => A)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Contravariant.contramapSubset", "link" : "zio\/prelude\/Contravariant.html#contramapSubset[A,B](f:B=>A)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/Contravariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/Contravariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/Contravariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Contravariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Contravariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Contravariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Contravariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Contravariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Contravariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Contravariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Contravariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Contravariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Contravariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Contravariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Contravariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Contravariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Contravariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Contravariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Contravariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Contravariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): (F[A]) => F[B]", "member" : "zio.prelude.Contravariant.contramap", "link" : "zio\/prelude\/Contravariant.html#contramap[A,B](f:B=>A):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : "Contravariant[F] provides implicit evidence that F[-_] is acontravariant endofunctor in the category of Scala objects."}, {"name" : "zio.prelude.ContravariantSubset", "trait" : "zio\/prelude\/ContravariantSubset.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ContravariantSubset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ContravariantSubset.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ContravariantSubset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ContravariantSubset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ContravariantSubset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ContravariantSubset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ContravariantSubset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSubset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSubset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSubset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ContravariantSubset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ContravariantSubset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ContravariantSubset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ContravariantSubset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ContravariantSubset.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ContravariantSubset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ContravariantSubset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ContravariantSubset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ContravariantSubset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contramapSubset", "tail" : "(f: (B) => A)(arg0: Subset[B]): (F[A]) => F[B]", "member" : "zio.prelude.ContravariantSubset.contramapSubset", "link" : "zio\/prelude\/ContravariantSubset.html#contramapSubset[A,B](f:B=>A)(implicitevidence$1:Subset[B]):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ContravariantSyntax", "trait" : "zio\/prelude\/ContravariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "ContravariantOps", "tail" : "", "member" : "zio.prelude.ContravariantSyntax.ContravariantOps", "link" : "zio\/prelude\/ContravariantSyntax.html#ContravariantOps[F[-_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ContravariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ContravariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ContravariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ContravariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ContravariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ContravariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ContravariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ContravariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ContravariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ContravariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ContravariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ContravariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ContravariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ContravariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ContravariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ContravariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ContravariantSyntax.ContravariantOps", "shortDescription" : "Provides infix syntax for mapping over covariant values.", "members_class" : [{"label" : "contramap", "tail" : "(f: (B) => A)(contravariant: Contravariant[F]): F[B]", "member" : "zio.prelude.ContravariantSyntax.ContravariantOps.contramap", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#contramap[B](f:B=>A)(implicitcontravariant:zio.prelude.Contravariant[F]):F[B]", "kind" : "def"}, {"member" : "zio.prelude.ContravariantSyntax.ContravariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ContravariantSyntax$ContravariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.Covariant", "object" : "zio\/prelude\/Covariant$.html", "members_object" : [{"label" : "apply", "tail" : "(covariant: Covariant[F]): Covariant[F]", "member" : "zio.prelude.Covariant.apply", "link" : "zio\/prelude\/Covariant$.html#apply[F[+_]](implicitcovariant:zio.prelude.Covariant[F]):zio.prelude.Covariant[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Covariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Covariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Covariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Covariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Covariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Covariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Covariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Covariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Covariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Covariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Covariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Covariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Covariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Covariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Covariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Covariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Covariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/Covariant.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/Covariant.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/Covariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/Covariant.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/Covariant.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/Covariant.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/Covariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/Covariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/Covariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Covariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Covariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Covariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Covariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Covariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Covariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Covariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Covariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Covariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Covariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Covariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Covariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Covariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Covariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Covariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Covariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Covariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.map", "link" : "zio\/prelude\/Covariant.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : "Covariant[F] provides implicit evidence that F[+_] is a covariantendofunctor in the category of Scala objects."}, {"name" : "zio.prelude.CovariantSubset", "trait" : "zio\/prelude\/CovariantSubset.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CovariantSubset.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CovariantSubset.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CovariantSubset.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CovariantSubset.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CovariantSubset.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CovariantSubset.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CovariantSubset.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSubset.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSubset.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSubset.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CovariantSubset.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CovariantSubset.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CovariantSubset.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CovariantSubset.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CovariantSubset.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CovariantSubset.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CovariantSubset.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CovariantSubset.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CovariantSubset.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: Subset[B]): (F[A]) => F[B]", "member" : "zio.prelude.CovariantSubset.mapSubset", "link" : "zio\/prelude\/CovariantSubset.html#mapSubset[A,B](f:A=>B)(implicitevidence$1:Subset[B]):F[A]=>F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.CovariantSyntax", "trait" : "zio\/prelude\/CovariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "CovariantOps", "tail" : "", "member" : "zio.prelude.CovariantSyntax.CovariantOps", "link" : "zio\/prelude\/CovariantSyntax.html#CovariantOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CovariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CovariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CovariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CovariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CovariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CovariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CovariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CovariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CovariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CovariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CovariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CovariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CovariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CovariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CovariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CovariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.CovariantSyntax.CovariantOps", "shortDescription" : "Provides infix syntax for mapping over covariant values.", "members_class" : [{"label" : "unit", "tail" : "(F: Covariant[F]): F[Unit]", "member" : "zio.prelude.CovariantSyntax.CovariantOps.unit", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#unit(implicitF:zio.prelude.Covariant[F]):F[Unit]", "kind" : "def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B)(F: Covariant[F]): F[(B, A)]", "member" : "zio.prelude.CovariantSyntax.CovariantOps.fproductLeft", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#fproductLeft[B](f:A=>B)(implicitF:zio.prelude.Covariant[F]):F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B)(F: Covariant[F]): F[(A, B)]", "member" : "zio.prelude.CovariantSyntax.CovariantOps.fproduct", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#fproduct[B](f:A=>B)(implicitF:zio.prelude.Covariant[F]):F[(A,B)]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B)(F: Covariant[F]): F[B]", "member" : "zio.prelude.CovariantSyntax.CovariantOps.map", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#map[B](f:A=>B)(implicitF:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"label" : "as", "tail" : "(b: => B)(F: Covariant[F]): F[B]", "member" : "zio.prelude.CovariantSyntax.CovariantOps.as", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#as[B](b:=>B)(implicitF:zio.prelude.Covariant[F]):F[B]", "kind" : "def"}, {"member" : "zio.prelude.CovariantSyntax.CovariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CovariantSyntax$CovariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/CovariantSyntax$CovariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.CustomAssociativeBothSyntax", "trait" : "zio\/prelude\/CustomAssociativeBothSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CustomAssociativeBothSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides implicit evidence that a data type defines its own implementationof operators defined by AssociativeBothSyntax as extension methods andthat the implementations provided by AssociativeBothSyntax should notbe used."}, {"name" : "zio.prelude.CustomAssociativeFlattenSyntax", "trait" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CustomAssociativeFlattenSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides implicit evidence that a data type defines its own implementationof operators defined by AssociativeFlattenSyntax as extension methods andthat the implementations provided by AssociativeFlattenSyntax should notbe used."}, {"name" : "zio.prelude.CustomCovariantSyntax", "trait" : "zio\/prelude\/CustomCovariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/CustomCovariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/CustomCovariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/CustomCovariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/CustomCovariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/CustomCovariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/CustomCovariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/CustomCovariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomCovariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomCovariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/CustomCovariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/CustomCovariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/CustomCovariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/CustomCovariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/CustomCovariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/CustomCovariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/CustomCovariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/CustomCovariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/CustomCovariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/CustomCovariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides implicit evidence that a data type defines its own implementationof operators defined by CovariantSyntax as extension methods and that theimplementations provided by CovariantSyntax should not be used."}, {"name" : "zio.prelude.Debug", "object" : "zio\/prelude\/Debug$.html", "members_object" : [{"label" : "VectorDebug", "tail" : "(arg0: Debug[A]): Debug[Vector[A]]", "member" : "zio.prelude.Debug.VectorDebug", "link" : "zio\/prelude\/Debug$.html#VectorDebug[A](implicitevidence$264:zio.prelude.Debug[A]):zio.prelude.Debug[Vector[A]]", "kind" : "implicit def"}, {"label" : "UnitDebug", "tail" : ": Debug[Unit]", "member" : "zio.prelude.Debug.UnitDebug", "link" : "zio\/prelude\/Debug$.html#UnitDebug:zio.prelude.Debug[Unit]", "kind" : "implicit val"}, {"label" : "Tuple22Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q], arg17: Debug[R], arg18: Debug[S], arg19: Debug[T], arg20: Debug[U], arg21: Debug[V]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Debug.Tuple22Debug", "link" : "zio\/prelude\/Debug$.html#Tuple22Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$242:zio.prelude.Debug[A],implicitevidence$243:zio.prelude.Debug[B],implicitevidence$244:zio.prelude.Debug[C],implicitevidence$245:zio.prelude.Debug[D],implicitevidence$246:zio.prelude.Debug[E],implicitevidence$247:zio.prelude.Debug[F],implicitevidence$248:zio.prelude.Debug[G],implicitevidence$249:zio.prelude.Debug[H],implicitevidence$250:zio.prelude.Debug[I],implicitevidence$251:zio.prelude.Debug[J],implicitevidence$252:zio.prelude.Debug[K],implicitevidence$253:zio.prelude.Debug[L],implicitevidence$254:zio.prelude.Debug[M],implicitevidence$255:zio.prelude.Debug[N],implicitevidence$256:zio.prelude.Debug[O],implicitevidence$257:zio.prelude.Debug[P],implicitevidence$258:zio.prelude.Debug[Q],implicitevidence$259:zio.prelude.Debug[R],implicitevidence$260:zio.prelude.Debug[S],implicitevidence$261:zio.prelude.Debug[T],implicitevidence$262:zio.prelude.Debug[U],implicitevidence$263:zio.prelude.Debug[V]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q], arg17: Debug[R], arg18: Debug[S], arg19: Debug[T], arg20: Debug[U]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Debug.Tuple21Debug", "link" : "zio\/prelude\/Debug$.html#Tuple21Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$221:zio.prelude.Debug[A],implicitevidence$222:zio.prelude.Debug[B],implicitevidence$223:zio.prelude.Debug[C],implicitevidence$224:zio.prelude.Debug[D],implicitevidence$225:zio.prelude.Debug[E],implicitevidence$226:zio.prelude.Debug[F],implicitevidence$227:zio.prelude.Debug[G],implicitevidence$228:zio.prelude.Debug[H],implicitevidence$229:zio.prelude.Debug[I],implicitevidence$230:zio.prelude.Debug[J],implicitevidence$231:zio.prelude.Debug[K],implicitevidence$232:zio.prelude.Debug[L],implicitevidence$233:zio.prelude.Debug[M],implicitevidence$234:zio.prelude.Debug[N],implicitevidence$235:zio.prelude.Debug[O],implicitevidence$236:zio.prelude.Debug[P],implicitevidence$237:zio.prelude.Debug[Q],implicitevidence$238:zio.prelude.Debug[R],implicitevidence$239:zio.prelude.Debug[S],implicitevidence$240:zio.prelude.Debug[T],implicitevidence$241:zio.prelude.Debug[U]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q], arg17: Debug[R], arg18: Debug[S], arg19: Debug[T]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Debug.Tuple20Debug", "link" : "zio\/prelude\/Debug$.html#Tuple20Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$201:zio.prelude.Debug[A],implicitevidence$202:zio.prelude.Debug[B],implicitevidence$203:zio.prelude.Debug[C],implicitevidence$204:zio.prelude.Debug[D],implicitevidence$205:zio.prelude.Debug[E],implicitevidence$206:zio.prelude.Debug[F],implicitevidence$207:zio.prelude.Debug[G],implicitevidence$208:zio.prelude.Debug[H],implicitevidence$209:zio.prelude.Debug[I],implicitevidence$210:zio.prelude.Debug[J],implicitevidence$211:zio.prelude.Debug[K],implicitevidence$212:zio.prelude.Debug[L],implicitevidence$213:zio.prelude.Debug[M],implicitevidence$214:zio.prelude.Debug[N],implicitevidence$215:zio.prelude.Debug[O],implicitevidence$216:zio.prelude.Debug[P],implicitevidence$217:zio.prelude.Debug[Q],implicitevidence$218:zio.prelude.Debug[R],implicitevidence$219:zio.prelude.Debug[S],implicitevidence$220:zio.prelude.Debug[T]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q], arg17: Debug[R], arg18: Debug[S]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Debug.Tuple19Debug", "link" : "zio\/prelude\/Debug$.html#Tuple19Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$182:zio.prelude.Debug[A],implicitevidence$183:zio.prelude.Debug[B],implicitevidence$184:zio.prelude.Debug[C],implicitevidence$185:zio.prelude.Debug[D],implicitevidence$186:zio.prelude.Debug[E],implicitevidence$187:zio.prelude.Debug[F],implicitevidence$188:zio.prelude.Debug[G],implicitevidence$189:zio.prelude.Debug[H],implicitevidence$190:zio.prelude.Debug[I],implicitevidence$191:zio.prelude.Debug[J],implicitevidence$192:zio.prelude.Debug[K],implicitevidence$193:zio.prelude.Debug[L],implicitevidence$194:zio.prelude.Debug[M],implicitevidence$195:zio.prelude.Debug[N],implicitevidence$196:zio.prelude.Debug[O],implicitevidence$197:zio.prelude.Debug[P],implicitevidence$198:zio.prelude.Debug[Q],implicitevidence$199:zio.prelude.Debug[R],implicitevidence$200:zio.prelude.Debug[S]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q], arg17: Debug[R]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Debug.Tuple18Debug", "link" : "zio\/prelude\/Debug$.html#Tuple18Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$164:zio.prelude.Debug[A],implicitevidence$165:zio.prelude.Debug[B],implicitevidence$166:zio.prelude.Debug[C],implicitevidence$167:zio.prelude.Debug[D],implicitevidence$168:zio.prelude.Debug[E],implicitevidence$169:zio.prelude.Debug[F],implicitevidence$170:zio.prelude.Debug[G],implicitevidence$171:zio.prelude.Debug[H],implicitevidence$172:zio.prelude.Debug[I],implicitevidence$173:zio.prelude.Debug[J],implicitevidence$174:zio.prelude.Debug[K],implicitevidence$175:zio.prelude.Debug[L],implicitevidence$176:zio.prelude.Debug[M],implicitevidence$177:zio.prelude.Debug[N],implicitevidence$178:zio.prelude.Debug[O],implicitevidence$179:zio.prelude.Debug[P],implicitevidence$180:zio.prelude.Debug[Q],implicitevidence$181:zio.prelude.Debug[R]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P], arg16: Debug[Q]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Debug.Tuple17Debug", "link" : "zio\/prelude\/Debug$.html#Tuple17Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$147:zio.prelude.Debug[A],implicitevidence$148:zio.prelude.Debug[B],implicitevidence$149:zio.prelude.Debug[C],implicitevidence$150:zio.prelude.Debug[D],implicitevidence$151:zio.prelude.Debug[E],implicitevidence$152:zio.prelude.Debug[F],implicitevidence$153:zio.prelude.Debug[G],implicitevidence$154:zio.prelude.Debug[H],implicitevidence$155:zio.prelude.Debug[I],implicitevidence$156:zio.prelude.Debug[J],implicitevidence$157:zio.prelude.Debug[K],implicitevidence$158:zio.prelude.Debug[L],implicitevidence$159:zio.prelude.Debug[M],implicitevidence$160:zio.prelude.Debug[N],implicitevidence$161:zio.prelude.Debug[O],implicitevidence$162:zio.prelude.Debug[P],implicitevidence$163:zio.prelude.Debug[Q]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O], arg15: Debug[P]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Debug.Tuple16Debug", "link" : "zio\/prelude\/Debug$.html#Tuple16Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$131:zio.prelude.Debug[A],implicitevidence$132:zio.prelude.Debug[B],implicitevidence$133:zio.prelude.Debug[C],implicitevidence$134:zio.prelude.Debug[D],implicitevidence$135:zio.prelude.Debug[E],implicitevidence$136:zio.prelude.Debug[F],implicitevidence$137:zio.prelude.Debug[G],implicitevidence$138:zio.prelude.Debug[H],implicitevidence$139:zio.prelude.Debug[I],implicitevidence$140:zio.prelude.Debug[J],implicitevidence$141:zio.prelude.Debug[K],implicitevidence$142:zio.prelude.Debug[L],implicitevidence$143:zio.prelude.Debug[M],implicitevidence$144:zio.prelude.Debug[N],implicitevidence$145:zio.prelude.Debug[O],implicitevidence$146:zio.prelude.Debug[P]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N], arg14: Debug[O]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Debug.Tuple15Debug", "link" : "zio\/prelude\/Debug$.html#Tuple15Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$116:zio.prelude.Debug[A],implicitevidence$117:zio.prelude.Debug[B],implicitevidence$118:zio.prelude.Debug[C],implicitevidence$119:zio.prelude.Debug[D],implicitevidence$120:zio.prelude.Debug[E],implicitevidence$121:zio.prelude.Debug[F],implicitevidence$122:zio.prelude.Debug[G],implicitevidence$123:zio.prelude.Debug[H],implicitevidence$124:zio.prelude.Debug[I],implicitevidence$125:zio.prelude.Debug[J],implicitevidence$126:zio.prelude.Debug[K],implicitevidence$127:zio.prelude.Debug[L],implicitevidence$128:zio.prelude.Debug[M],implicitevidence$129:zio.prelude.Debug[N],implicitevidence$130:zio.prelude.Debug[O]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M], arg13: Debug[N]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Debug.Tuple14Debug", "link" : "zio\/prelude\/Debug$.html#Tuple14Debug[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$102:zio.prelude.Debug[A],implicitevidence$103:zio.prelude.Debug[B],implicitevidence$104:zio.prelude.Debug[C],implicitevidence$105:zio.prelude.Debug[D],implicitevidence$106:zio.prelude.Debug[E],implicitevidence$107:zio.prelude.Debug[F],implicitevidence$108:zio.prelude.Debug[G],implicitevidence$109:zio.prelude.Debug[H],implicitevidence$110:zio.prelude.Debug[I],implicitevidence$111:zio.prelude.Debug[J],implicitevidence$112:zio.prelude.Debug[K],implicitevidence$113:zio.prelude.Debug[L],implicitevidence$114:zio.prelude.Debug[M],implicitevidence$115:zio.prelude.Debug[N]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L], arg12: Debug[M]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Debug.Tuple13Debug", "link" : "zio\/prelude\/Debug$.html#Tuple13Debug[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$89:zio.prelude.Debug[A],implicitevidence$90:zio.prelude.Debug[B],implicitevidence$91:zio.prelude.Debug[C],implicitevidence$92:zio.prelude.Debug[D],implicitevidence$93:zio.prelude.Debug[E],implicitevidence$94:zio.prelude.Debug[F],implicitevidence$95:zio.prelude.Debug[G],implicitevidence$96:zio.prelude.Debug[H],implicitevidence$97:zio.prelude.Debug[I],implicitevidence$98:zio.prelude.Debug[J],implicitevidence$99:zio.prelude.Debug[K],implicitevidence$100:zio.prelude.Debug[L],implicitevidence$101:zio.prelude.Debug[M]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K], arg11: Debug[L]): Debug[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Debug.Tuple12Debug", "link" : "zio\/prelude\/Debug$.html#Tuple12Debug[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$77:zio.prelude.Debug[A],implicitevidence$78:zio.prelude.Debug[B],implicitevidence$79:zio.prelude.Debug[C],implicitevidence$80:zio.prelude.Debug[D],implicitevidence$81:zio.prelude.Debug[E],implicitevidence$82:zio.prelude.Debug[F],implicitevidence$83:zio.prelude.Debug[G],implicitevidence$84:zio.prelude.Debug[H],implicitevidence$85:zio.prelude.Debug[I],implicitevidence$86:zio.prelude.Debug[J],implicitevidence$87:zio.prelude.Debug[K],implicitevidence$88:zio.prelude.Debug[L]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J], arg10: Debug[K]): Debug[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Debug.Tuple11Debug", "link" : "zio\/prelude\/Debug$.html#Tuple11Debug[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$66:zio.prelude.Debug[A],implicitevidence$67:zio.prelude.Debug[B],implicitevidence$68:zio.prelude.Debug[C],implicitevidence$69:zio.prelude.Debug[D],implicitevidence$70:zio.prelude.Debug[E],implicitevidence$71:zio.prelude.Debug[F],implicitevidence$72:zio.prelude.Debug[G],implicitevidence$73:zio.prelude.Debug[H],implicitevidence$74:zio.prelude.Debug[I],implicitevidence$75:zio.prelude.Debug[J],implicitevidence$76:zio.prelude.Debug[K]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I], arg9: Debug[J]): Debug[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Debug.Tuple10Debug", "link" : "zio\/prelude\/Debug$.html#Tuple10Debug[A,B,C,D,E,F,G,H,I,J](implicitevidence$56:zio.prelude.Debug[A],implicitevidence$57:zio.prelude.Debug[B],implicitevidence$58:zio.prelude.Debug[C],implicitevidence$59:zio.prelude.Debug[D],implicitevidence$60:zio.prelude.Debug[E],implicitevidence$61:zio.prelude.Debug[F],implicitevidence$62:zio.prelude.Debug[G],implicitevidence$63:zio.prelude.Debug[H],implicitevidence$64:zio.prelude.Debug[I],implicitevidence$65:zio.prelude.Debug[J]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H], arg8: Debug[I]): Debug[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Debug.Tuple9Debug", "link" : "zio\/prelude\/Debug$.html#Tuple9Debug[A,B,C,D,E,F,G,H,I](implicitevidence$47:zio.prelude.Debug[A],implicitevidence$48:zio.prelude.Debug[B],implicitevidence$49:zio.prelude.Debug[C],implicitevidence$50:zio.prelude.Debug[D],implicitevidence$51:zio.prelude.Debug[E],implicitevidence$52:zio.prelude.Debug[F],implicitevidence$53:zio.prelude.Debug[G],implicitevidence$54:zio.prelude.Debug[H],implicitevidence$55:zio.prelude.Debug[I]):zio.prelude.Debug[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G], arg7: Debug[H]): Debug[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Debug.Tuple8Debug", "link" : "zio\/prelude\/Debug$.html#Tuple8Debug[A,B,C,D,E,F,G,H](implicitevidence$39:zio.prelude.Debug[A],implicitevidence$40:zio.prelude.Debug[B],implicitevidence$41:zio.prelude.Debug[C],implicitevidence$42:zio.prelude.Debug[D],implicitevidence$43:zio.prelude.Debug[E],implicitevidence$44:zio.prelude.Debug[F],implicitevidence$45:zio.prelude.Debug[G],implicitevidence$46:zio.prelude.Debug[H]):zio.prelude.Debug[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F], arg6: Debug[G]): Debug[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Debug.Tuple7Debug", "link" : "zio\/prelude\/Debug$.html#Tuple7Debug[A,B,C,D,E,F,G](implicitevidence$32:zio.prelude.Debug[A],implicitevidence$33:zio.prelude.Debug[B],implicitevidence$34:zio.prelude.Debug[C],implicitevidence$35:zio.prelude.Debug[D],implicitevidence$36:zio.prelude.Debug[E],implicitevidence$37:zio.prelude.Debug[F],implicitevidence$38:zio.prelude.Debug[G]):zio.prelude.Debug[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E], arg5: Debug[F]): Debug[(A, B, C, D, E, F)]", "member" : "zio.prelude.Debug.Tuple6Debug", "link" : "zio\/prelude\/Debug$.html#Tuple6Debug[A,B,C,D,E,F](implicitevidence$26:zio.prelude.Debug[A],implicitevidence$27:zio.prelude.Debug[B],implicitevidence$28:zio.prelude.Debug[C],implicitevidence$29:zio.prelude.Debug[D],implicitevidence$30:zio.prelude.Debug[E],implicitevidence$31:zio.prelude.Debug[F]):zio.prelude.Debug[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D], arg4: Debug[E]): Debug[(A, B, C, D, E)]", "member" : "zio.prelude.Debug.Tuple5Debug", "link" : "zio\/prelude\/Debug$.html#Tuple5Debug[A,B,C,D,E](implicitevidence$21:zio.prelude.Debug[A],implicitevidence$22:zio.prelude.Debug[B],implicitevidence$23:zio.prelude.Debug[C],implicitevidence$24:zio.prelude.Debug[D],implicitevidence$25:zio.prelude.Debug[E]):zio.prelude.Debug[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C], arg3: Debug[D]): Debug[(A, B, C, D)]", "member" : "zio.prelude.Debug.Tuple4Debug", "link" : "zio\/prelude\/Debug$.html#Tuple4Debug[A,B,C,D](implicitevidence$17:zio.prelude.Debug[A],implicitevidence$18:zio.prelude.Debug[B],implicitevidence$19:zio.prelude.Debug[C],implicitevidence$20:zio.prelude.Debug[D]):zio.prelude.Debug[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B], arg2: Debug[C]): Debug[(A, B, C)]", "member" : "zio.prelude.Debug.Tuple3Debug", "link" : "zio\/prelude\/Debug$.html#Tuple3Debug[A,B,C](implicitevidence$14:zio.prelude.Debug[A],implicitevidence$15:zio.prelude.Debug[B],implicitevidence$16:zio.prelude.Debug[C]):zio.prelude.Debug[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Debug", "tail" : "(arg0: Debug[A], arg1: Debug[B]): Debug[(A, B)]", "member" : "zio.prelude.Debug.Tuple2Debug", "link" : "zio\/prelude\/Debug$.html#Tuple2Debug[A,B](implicitevidence$12:zio.prelude.Debug[A],implicitevidence$13:zio.prelude.Debug[B]):zio.prelude.Debug[(A,B)]", "kind" : "implicit def"}, {"label" : "TimeUnitDebug", "tail" : ": Debug[TimeUnit]", "member" : "zio.prelude.Debug.TimeUnitDebug", "link" : "zio\/prelude\/Debug$.html#TimeUnitDebug:zio.prelude.Debug[java.util.concurrent.TimeUnit]", "kind" : "implicit val"}, {"label" : "StringDebug", "tail" : ": Debug[String]", "member" : "zio.prelude.Debug.StringDebug", "link" : "zio\/prelude\/Debug$.html#StringDebug:zio.prelude.Debug[String]", "kind" : "implicit val"}, {"label" : "ShortDebug", "tail" : ": Debug[Short]", "member" : "zio.prelude.Debug.ShortDebug", "link" : "zio\/prelude\/Debug$.html#ShortDebug:zio.prelude.Debug[Short]", "kind" : "implicit val"}, {"label" : "RoundingModeDebug", "tail" : ": Debug[RoundingMode]", "member" : "zio.prelude.Debug.RoundingModeDebug", "link" : "zio\/prelude\/Debug$.html#RoundingModeDebug:zio.prelude.Debug[java.math.RoundingMode]", "kind" : "implicit val"}, {"label" : "OptionDebug", "tail" : "(arg0: Debug[A]): Debug[Option[A]]", "member" : "zio.prelude.Debug.OptionDebug", "link" : "zio\/prelude\/Debug$.html#OptionDebug[A](implicitevidence$11:zio.prelude.Debug[A]):zio.prelude.Debug[Option[A]]", "kind" : "implicit def"}, {"label" : "NothingDebug", "tail" : ": Debug[Nothing]", "member" : "zio.prelude.Debug.NothingDebug", "link" : "zio\/prelude\/Debug$.html#NothingDebug:zio.prelude.Debug[Nothing]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkDebug", "tail" : "(arg0: Debug[A]): Debug[NonEmptyChunk[A]]", "member" : "zio.prelude.Debug.NonEmptyChunkDebug", "link" : "zio\/prelude\/Debug$.html#NonEmptyChunkDebug[A](implicitevidence$10:zio.prelude.Debug[A]):zio.prelude.Debug[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "MapDebug", "tail" : "(arg0: Debug[K], arg1: Debug[V]): Debug[Map[K, V]]", "member" : "zio.prelude.Debug.MapDebug", "link" : "zio\/prelude\/Debug$.html#MapDebug[K,V](implicitevidence$8:zio.prelude.Debug[K],implicitevidence$9:zio.prelude.Debug[V]):zio.prelude.Debug[Map[K,V]]", "kind" : "implicit def"}, {"label" : "MathContextDebug", "tail" : ": Debug[MathContext]", "member" : "zio.prelude.Debug.MathContextDebug", "link" : "zio\/prelude\/Debug$.html#MathContextDebug:zio.prelude.Debug[java.math.MathContext]", "kind" : "implicit val"}, {"label" : "LongDebug", "tail" : ": Debug[Long]", "member" : "zio.prelude.Debug.LongDebug", "link" : "zio\/prelude\/Debug$.html#LongDebug:zio.prelude.Debug[Long]", "kind" : "implicit val"}, {"label" : "ListDebug", "tail" : "(arg0: Debug[A]): Debug[List[A]]", "member" : "zio.prelude.Debug.ListDebug", "link" : "zio\/prelude\/Debug$.html#ListDebug[A](implicitevidence$7:zio.prelude.Debug[A]):zio.prelude.Debug[List[A]]", "kind" : "implicit def"}, {"label" : "IntDebug", "tail" : ": Debug[Int]", "member" : "zio.prelude.Debug.IntDebug", "link" : "zio\/prelude\/Debug$.html#IntDebug:zio.prelude.Debug[Int]", "kind" : "implicit val"}, {"label" : "FloatDebug", "tail" : ": Debug[Float]", "member" : "zio.prelude.Debug.FloatDebug", "link" : "zio\/prelude\/Debug$.html#FloatDebug:zio.prelude.Debug[Float]", "kind" : "implicit val"}, {"label" : "EitherDebug", "tail" : "(arg0: Debug[E], arg1: Debug[A]): Debug[Either[E, A]]", "member" : "zio.prelude.Debug.EitherDebug", "link" : "zio\/prelude\/Debug$.html#EitherDebug[E,A](implicitevidence$5:zio.prelude.Debug[E],implicitevidence$6:zio.prelude.Debug[A]):zio.prelude.Debug[Either[E,A]]", "kind" : "implicit def"}, {"label" : "DurationZIODebug", "tail" : ": Debug[Duration]", "member" : "zio.prelude.Debug.DurationZIODebug", "link" : "zio\/prelude\/Debug$.html#DurationZIODebug:zio.prelude.Debug[zio.duration.Duration]", "kind" : "implicit val"}, {"label" : "DurationScalaDebug", "tail" : ": Debug[Duration]", "member" : "zio.prelude.Debug.DurationScalaDebug", "link" : "zio\/prelude\/Debug$.html#DurationScalaDebug:zio.prelude.Debug[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "DoubleDebug", "tail" : ": Debug[Double]", "member" : "zio.prelude.Debug.DoubleDebug", "link" : "zio\/prelude\/Debug$.html#DoubleDebug:zio.prelude.Debug[Double]", "kind" : "implicit val"}, {"label" : "DeriveDebug", "tail" : "(derive: Derive[F, Debug], debug: Debug[A]): Debug[F[A]]", "member" : "zio.prelude.Debug.DeriveDebug", "link" : "zio\/prelude\/Debug$.html#DeriveDebug[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Debug],implicitdebug:zio.prelude.Debug[A]):zio.prelude.Debug[F[A]]", "kind" : "implicit def"}, {"label" : "ChunkDebug", "tail" : "(arg0: Debug[A]): Debug[Chunk[A]]", "member" : "zio.prelude.Debug.ChunkDebug", "link" : "zio\/prelude\/Debug$.html#ChunkDebug[A](implicitevidence$4:zio.prelude.Debug[A]):zio.prelude.Debug[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "CharDebug", "tail" : ": Debug[Char]", "member" : "zio.prelude.Debug.CharDebug", "link" : "zio\/prelude\/Debug$.html#CharDebug:zio.prelude.Debug[Char]", "kind" : "implicit val"}, {"label" : "ByteDebug", "tail" : ": Debug[Byte]", "member" : "zio.prelude.Debug.ByteDebug", "link" : "zio\/prelude\/Debug$.html#ByteDebug:zio.prelude.Debug[Byte]", "kind" : "implicit val"}, {"label" : "BooleanDebug", "tail" : ": Debug[Boolean]", "member" : "zio.prelude.Debug.BooleanDebug", "link" : "zio\/prelude\/Debug$.html#BooleanDebug:zio.prelude.Debug[Boolean]", "kind" : "implicit val"}, {"label" : "BigIntDebug", "tail" : ": Debug[BigInt]", "member" : "zio.prelude.Debug.BigIntDebug", "link" : "zio\/prelude\/Debug$.html#BigIntDebug:zio.prelude.Debug[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalDebug", "tail" : ": Debug[BigDecimal]", "member" : "zio.prelude.Debug.BigDecimalDebug", "link" : "zio\/prelude\/Debug$.html#BigDecimalDebug:zio.prelude.Debug[BigDecimal]", "kind" : "implicit val"}, {"label" : "ArrayDebug", "tail" : "(arg0: Debug[A]): Debug[Array[A]]", "member" : "zio.prelude.Debug.ArrayDebug", "link" : "zio\/prelude\/Debug$.html#ArrayDebug[A](implicitevidence$3:zio.prelude.Debug[A]):zio.prelude.Debug[Array[A]]", "kind" : "implicit def"}, {"label" : "make", "tail" : "(f: (A) => Repr): Debug[A]", "member" : "zio.prelude.Debug.make", "link" : "zio\/prelude\/Debug$.html#make[A](f:A=>zio.prelude.Debug.Repr):zio.prelude.Debug[A]", "kind" : "def"}, {"label" : "keyValueDebug", "tail" : "(arg0: Debug[A], arg1: Debug[B]): Debug[(A, B)]", "member" : "zio.prelude.Debug.keyValueDebug", "link" : "zio\/prelude\/Debug$.html#keyValueDebug[A,B](implicitevidence$1:zio.prelude.Debug[A],implicitevidence$2:zio.prelude.Debug[B]):zio.prelude.Debug[(A,B)]", "kind" : "def"}, {"label" : "apply", "tail" : "(debug: Debug[A]): Debug[A]", "member" : "zio.prelude.Debug.apply", "link" : "zio\/prelude\/Debug$.html#apply[A](implicitdebug:zio.prelude.Debug[A]):zio.prelude.Debug[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "zio.prelude.Debug.Repr", "link" : "zio\/prelude\/Debug$.html#Repr", "kind" : "object"}, {"label" : "Repr", "tail" : "", "member" : "zio.prelude.Debug.Repr", "link" : "zio\/prelude\/Debug$.html#ReprextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Renderer", "tail" : "", "member" : "zio.prelude.Debug.Renderer", "link" : "zio\/prelude\/Debug$.html#Renderer", "kind" : "object"}, {"label" : "Renderer", "tail" : "", "member" : "zio.prelude.Debug.Renderer", "link" : "zio\/prelude\/Debug$.html#Renderer=zio.prelude.Debug.Repr=>String", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Debug$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Debug$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Debug$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Debug$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Debug$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Debug$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Debug$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Debug$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Debug$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Debug$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Debug$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Debug$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Debug$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Debug$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Debug$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Debug$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Debug.html", "kind" : "trait", "members_trait" : [{"label" : "render", "tail" : "(a: A): String", "member" : "zio.prelude.Debug.render", "link" : "zio\/prelude\/Debug.html#render(a:A):String", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Debug.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Debug.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Debug.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Debug.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Debug.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Debug.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Debug.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Debug.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Debug.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Debug.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Debug.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Debug.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Debug.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Debug.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Debug.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Debug.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Debug.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "debug", "tail" : "(a: A): Repr", "member" : "zio.prelude.Debug.debug", "link" : "zio\/prelude\/Debug.html#debug(a:A):zio.prelude.Debug.Repr", "kind" : "abstract def"}], "shortDescription" : "Debug is an abstraction that describes the ability to render a value oftype A to a human readable format for debugging purposes."}, {"name" : "zio.prelude.DebugSyntax", "trait" : "zio\/prelude\/DebugSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "DebugInterpolator", "tail" : "", "member" : "zio.prelude.DebugSyntax.DebugInterpolator", "link" : "zio\/prelude\/DebugSyntax.html#DebugInterpolatorextendsAnyRef", "kind" : "implicit final class"}, {"label" : "DebugOps", "tail" : "", "member" : "zio.prelude.DebugSyntax.DebugOps", "link" : "zio\/prelude\/DebugSyntax.html#DebugOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DebugSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DebugSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DebugSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DebugSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DebugSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DebugSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DebugSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DebugSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DebugSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DebugSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DebugSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DebugSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DebugSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DebugSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DebugSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DebugSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.DebugSyntax.DebugInterpolator", "shortDescription" : "", "members_class" : [{"label" : "d", "tail" : "(args: Repr*): String", "member" : "zio.prelude.DebugSyntax.DebugInterpolator.d", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#d(args:zio.prelude.Debug.Repr*):String", "kind" : "def"}, {"member" : "zio.prelude.DebugSyntax.DebugInterpolator#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/DebugSyntax$DebugInterpolator.html", "kind" : "class"}, {"name" : "zio.prelude.DebugSyntax.DebugOps", "shortDescription" : "", "members_class" : [{"label" : "render", "tail" : "(debug: Debug[A]): String", "member" : "zio.prelude.DebugSyntax.DebugOps.render", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#render(implicitdebug:zio.prelude.Debug[A]):String", "kind" : "def"}, {"label" : "debug", "tail" : "(debug: Debug[A]): Repr", "member" : "zio.prelude.DebugSyntax.DebugOps.debug", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#debug(implicitdebug:zio.prelude.Debug[A]):zio.prelude.Debug.Repr", "kind" : "def"}, {"member" : "zio.prelude.DebugSyntax.DebugOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DebugSyntax$DebugOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/DebugSyntax$DebugOps.html", "kind" : "class"}, {"name" : "zio.prelude.DebugVersionSpecific", "trait" : "zio\/prelude\/DebugVersionSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DebugVersionSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DebugVersionSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DebugVersionSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DebugVersionSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DebugVersionSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DebugVersionSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DebugVersionSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugVersionSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugVersionSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DebugVersionSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DebugVersionSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DebugVersionSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DebugVersionSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DebugVersionSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DebugVersionSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DebugVersionSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DebugVersionSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DebugVersionSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DebugVersionSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.Derive", "object" : "zio\/prelude\/Derive$.html", "members_object" : [{"label" : "ExitDeriveEqual", "tail" : "(arg0: Equal[E]): DeriveEqual[[+a]Exit[E, a]]", "member" : "zio.prelude.Derive.ExitDeriveEqual", "link" : "zio\/prelude\/Derive$.html#ExitDeriveEqual[E](implicitevidence$266:zio.prelude.Equal[E]):zio.prelude.DeriveEqual[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "CauseDeriveEqual", "tail" : ": DeriveEqual[Cause]", "member" : "zio.prelude.Derive.CauseDeriveEqual", "link" : "zio\/prelude\/Derive$.html#CauseDeriveEqual:zio.prelude.DeriveEqual[zio.Cause]", "kind" : "implicit val"}, {"label" : "VectorDeriveEqual", "tail" : ": DeriveEqual[Vector]", "member" : "zio.prelude.Derive.VectorDeriveEqual", "link" : "zio\/prelude\/Derive$.html#VectorDeriveEqual:zio.prelude.DeriveEqual[Vector]", "kind" : "implicit val"}, {"label" : "Tuple22DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S], arg19: Equal[T], arg20: Equal[U]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, x)]", "member" : "zio.prelude.Derive.Tuple22DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple22DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$242:zio.prelude.Equal[A],implicitevidence$243:zio.prelude.Equal[B],implicitevidence$244:zio.prelude.Equal[C],implicitevidence$245:zio.prelude.Equal[D],implicitevidence$246:zio.prelude.Equal[E],implicitevidence$247:zio.prelude.Equal[F],implicitevidence$248:zio.prelude.Equal[G],implicitevidence$249:zio.prelude.Equal[H],implicitevidence$250:zio.prelude.Equal[I],implicitevidence$251:zio.prelude.Equal[J],implicitevidence$252:zio.prelude.Equal[K],implicitevidence$253:zio.prelude.Equal[L],implicitevidence$254:zio.prelude.Equal[M],implicitevidence$255:zio.prelude.Equal[N],implicitevidence$256:zio.prelude.Equal[O],implicitevidence$257:zio.prelude.Equal[P],implicitevidence$258:zio.prelude.Equal[Q],implicitevidence$259:zio.prelude.Equal[R],implicitevidence$260:zio.prelude.Equal[S],implicitevidence$261:zio.prelude.Equal[T],implicitevidence$262:zio.prelude.Equal[U]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,x)]", "kind" : "implicit def"}, {"label" : "Tuple21DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S], arg19: Equal[T]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, x)]", "member" : "zio.prelude.Derive.Tuple21DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple21DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$221:zio.prelude.Equal[A],implicitevidence$222:zio.prelude.Equal[B],implicitevidence$223:zio.prelude.Equal[C],implicitevidence$224:zio.prelude.Equal[D],implicitevidence$225:zio.prelude.Equal[E],implicitevidence$226:zio.prelude.Equal[F],implicitevidence$227:zio.prelude.Equal[G],implicitevidence$228:zio.prelude.Equal[H],implicitevidence$229:zio.prelude.Equal[I],implicitevidence$230:zio.prelude.Equal[J],implicitevidence$231:zio.prelude.Equal[K],implicitevidence$232:zio.prelude.Equal[L],implicitevidence$233:zio.prelude.Equal[M],implicitevidence$234:zio.prelude.Equal[N],implicitevidence$235:zio.prelude.Equal[O],implicitevidence$236:zio.prelude.Equal[P],implicitevidence$237:zio.prelude.Equal[Q],implicitevidence$238:zio.prelude.Equal[R],implicitevidence$239:zio.prelude.Equal[S],implicitevidence$240:zio.prelude.Equal[T]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,x)]", "kind" : "implicit def"}, {"label" : "Tuple20DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, x)]", "member" : "zio.prelude.Derive.Tuple20DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple20DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$201:zio.prelude.Equal[A],implicitevidence$202:zio.prelude.Equal[B],implicitevidence$203:zio.prelude.Equal[C],implicitevidence$204:zio.prelude.Equal[D],implicitevidence$205:zio.prelude.Equal[E],implicitevidence$206:zio.prelude.Equal[F],implicitevidence$207:zio.prelude.Equal[G],implicitevidence$208:zio.prelude.Equal[H],implicitevidence$209:zio.prelude.Equal[I],implicitevidence$210:zio.prelude.Equal[J],implicitevidence$211:zio.prelude.Equal[K],implicitevidence$212:zio.prelude.Equal[L],implicitevidence$213:zio.prelude.Equal[M],implicitevidence$214:zio.prelude.Equal[N],implicitevidence$215:zio.prelude.Equal[O],implicitevidence$216:zio.prelude.Equal[P],implicitevidence$217:zio.prelude.Equal[Q],implicitevidence$218:zio.prelude.Equal[R],implicitevidence$219:zio.prelude.Equal[S]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,x)]", "kind" : "implicit def"}, {"label" : "Tuple19DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, x)]", "member" : "zio.prelude.Derive.Tuple19DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple19DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$182:zio.prelude.Equal[A],implicitevidence$183:zio.prelude.Equal[B],implicitevidence$184:zio.prelude.Equal[C],implicitevidence$185:zio.prelude.Equal[D],implicitevidence$186:zio.prelude.Equal[E],implicitevidence$187:zio.prelude.Equal[F],implicitevidence$188:zio.prelude.Equal[G],implicitevidence$189:zio.prelude.Equal[H],implicitevidence$190:zio.prelude.Equal[I],implicitevidence$191:zio.prelude.Equal[J],implicitevidence$192:zio.prelude.Equal[K],implicitevidence$193:zio.prelude.Equal[L],implicitevidence$194:zio.prelude.Equal[M],implicitevidence$195:zio.prelude.Equal[N],implicitevidence$196:zio.prelude.Equal[O],implicitevidence$197:zio.prelude.Equal[P],implicitevidence$198:zio.prelude.Equal[Q],implicitevidence$199:zio.prelude.Equal[R]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,x)]", "kind" : "implicit def"}, {"label" : "Tuple18DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, x)]", "member" : "zio.prelude.Derive.Tuple18DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple18DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$164:zio.prelude.Equal[A],implicitevidence$165:zio.prelude.Equal[B],implicitevidence$166:zio.prelude.Equal[C],implicitevidence$167:zio.prelude.Equal[D],implicitevidence$168:zio.prelude.Equal[E],implicitevidence$169:zio.prelude.Equal[F],implicitevidence$170:zio.prelude.Equal[G],implicitevidence$171:zio.prelude.Equal[H],implicitevidence$172:zio.prelude.Equal[I],implicitevidence$173:zio.prelude.Equal[J],implicitevidence$174:zio.prelude.Equal[K],implicitevidence$175:zio.prelude.Equal[L],implicitevidence$176:zio.prelude.Equal[M],implicitevidence$177:zio.prelude.Equal[N],implicitevidence$178:zio.prelude.Equal[O],implicitevidence$179:zio.prelude.Equal[P],implicitevidence$180:zio.prelude.Equal[Q]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,x)]", "kind" : "implicit def"}, {"label" : "Tuple17DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, x)]", "member" : "zio.prelude.Derive.Tuple17DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple17DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$147:zio.prelude.Equal[A],implicitevidence$148:zio.prelude.Equal[B],implicitevidence$149:zio.prelude.Equal[C],implicitevidence$150:zio.prelude.Equal[D],implicitevidence$151:zio.prelude.Equal[E],implicitevidence$152:zio.prelude.Equal[F],implicitevidence$153:zio.prelude.Equal[G],implicitevidence$154:zio.prelude.Equal[H],implicitevidence$155:zio.prelude.Equal[I],implicitevidence$156:zio.prelude.Equal[J],implicitevidence$157:zio.prelude.Equal[K],implicitevidence$158:zio.prelude.Equal[L],implicitevidence$159:zio.prelude.Equal[M],implicitevidence$160:zio.prelude.Equal[N],implicitevidence$161:zio.prelude.Equal[O],implicitevidence$162:zio.prelude.Equal[P]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,x)]", "kind" : "implicit def"}, {"label" : "Tuple16DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, x)]", "member" : "zio.prelude.Derive.Tuple16DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple16DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$131:zio.prelude.Equal[A],implicitevidence$132:zio.prelude.Equal[B],implicitevidence$133:zio.prelude.Equal[C],implicitevidence$134:zio.prelude.Equal[D],implicitevidence$135:zio.prelude.Equal[E],implicitevidence$136:zio.prelude.Equal[F],implicitevidence$137:zio.prelude.Equal[G],implicitevidence$138:zio.prelude.Equal[H],implicitevidence$139:zio.prelude.Equal[I],implicitevidence$140:zio.prelude.Equal[J],implicitevidence$141:zio.prelude.Equal[K],implicitevidence$142:zio.prelude.Equal[L],implicitevidence$143:zio.prelude.Equal[M],implicitevidence$144:zio.prelude.Equal[N],implicitevidence$145:zio.prelude.Equal[O]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,x)]", "kind" : "implicit def"}, {"label" : "Tuple15DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, N, x)]", "member" : "zio.prelude.Derive.Tuple15DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple15DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$116:zio.prelude.Equal[A],implicitevidence$117:zio.prelude.Equal[B],implicitevidence$118:zio.prelude.Equal[C],implicitevidence$119:zio.prelude.Equal[D],implicitevidence$120:zio.prelude.Equal[E],implicitevidence$121:zio.prelude.Equal[F],implicitevidence$122:zio.prelude.Equal[G],implicitevidence$123:zio.prelude.Equal[H],implicitevidence$124:zio.prelude.Equal[I],implicitevidence$125:zio.prelude.Equal[J],implicitevidence$126:zio.prelude.Equal[K],implicitevidence$127:zio.prelude.Equal[L],implicitevidence$128:zio.prelude.Equal[M],implicitevidence$129:zio.prelude.Equal[N]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,N,x)]", "kind" : "implicit def"}, {"label" : "Tuple14DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, M, x)]", "member" : "zio.prelude.Derive.Tuple14DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple14DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$102:zio.prelude.Equal[A],implicitevidence$103:zio.prelude.Equal[B],implicitevidence$104:zio.prelude.Equal[C],implicitevidence$105:zio.prelude.Equal[D],implicitevidence$106:zio.prelude.Equal[E],implicitevidence$107:zio.prelude.Equal[F],implicitevidence$108:zio.prelude.Equal[G],implicitevidence$109:zio.prelude.Equal[H],implicitevidence$110:zio.prelude.Equal[I],implicitevidence$111:zio.prelude.Equal[J],implicitevidence$112:zio.prelude.Equal[K],implicitevidence$113:zio.prelude.Equal[L],implicitevidence$114:zio.prelude.Equal[M]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,M,x)]", "kind" : "implicit def"}, {"label" : "Tuple13DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, L, x)]", "member" : "zio.prelude.Derive.Tuple13DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple13DeriveEqual[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$89:zio.prelude.Equal[A],implicitevidence$90:zio.prelude.Equal[B],implicitevidence$91:zio.prelude.Equal[C],implicitevidence$92:zio.prelude.Equal[D],implicitevidence$93:zio.prelude.Equal[E],implicitevidence$94:zio.prelude.Equal[F],implicitevidence$95:zio.prelude.Equal[G],implicitevidence$96:zio.prelude.Equal[H],implicitevidence$97:zio.prelude.Equal[I],implicitevidence$98:zio.prelude.Equal[J],implicitevidence$99:zio.prelude.Equal[K],implicitevidence$100:zio.prelude.Equal[L]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,L,x)]", "kind" : "implicit def"}, {"label" : "Tuple12DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, K, x)]", "member" : "zio.prelude.Derive.Tuple12DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple12DeriveEqual[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$77:zio.prelude.Equal[A],implicitevidence$78:zio.prelude.Equal[B],implicitevidence$79:zio.prelude.Equal[C],implicitevidence$80:zio.prelude.Equal[D],implicitevidence$81:zio.prelude.Equal[E],implicitevidence$82:zio.prelude.Equal[F],implicitevidence$83:zio.prelude.Equal[G],implicitevidence$84:zio.prelude.Equal[H],implicitevidence$85:zio.prelude.Equal[I],implicitevidence$86:zio.prelude.Equal[J],implicitevidence$87:zio.prelude.Equal[K]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,K,x)]", "kind" : "implicit def"}, {"label" : "Tuple11DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, J, x)]", "member" : "zio.prelude.Derive.Tuple11DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple11DeriveEqual[A,B,C,D,E,F,G,H,I,J](implicitevidence$66:zio.prelude.Equal[A],implicitevidence$67:zio.prelude.Equal[B],implicitevidence$68:zio.prelude.Equal[C],implicitevidence$69:zio.prelude.Equal[D],implicitevidence$70:zio.prelude.Equal[E],implicitevidence$71:zio.prelude.Equal[F],implicitevidence$72:zio.prelude.Equal[G],implicitevidence$73:zio.prelude.Equal[H],implicitevidence$74:zio.prelude.Equal[I],implicitevidence$75:zio.prelude.Equal[J]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,J,x)]", "kind" : "implicit def"}, {"label" : "Tuple10DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I]): DeriveEqual[[x](A, B, C, D, E, F, G, H, I, x)]", "member" : "zio.prelude.Derive.Tuple10DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple10DeriveEqual[A,B,C,D,E,F,G,H,I](implicitevidence$56:zio.prelude.Equal[A],implicitevidence$57:zio.prelude.Equal[B],implicitevidence$58:zio.prelude.Equal[C],implicitevidence$59:zio.prelude.Equal[D],implicitevidence$60:zio.prelude.Equal[E],implicitevidence$61:zio.prelude.Equal[F],implicitevidence$62:zio.prelude.Equal[G],implicitevidence$63:zio.prelude.Equal[H],implicitevidence$64:zio.prelude.Equal[I]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,I,x)]", "kind" : "implicit def"}, {"label" : "Tuple9DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H]): DeriveEqual[[x](A, B, C, D, E, F, G, H, x)]", "member" : "zio.prelude.Derive.Tuple9DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple9DeriveEqual[A,B,C,D,E,F,G,H](implicitevidence$47:zio.prelude.Equal[A],implicitevidence$48:zio.prelude.Equal[B],implicitevidence$49:zio.prelude.Equal[C],implicitevidence$50:zio.prelude.Equal[D],implicitevidence$51:zio.prelude.Equal[E],implicitevidence$52:zio.prelude.Equal[F],implicitevidence$53:zio.prelude.Equal[G],implicitevidence$54:zio.prelude.Equal[H]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,H,x)]", "kind" : "implicit def"}, {"label" : "Tuple8DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G]): DeriveEqual[[x](A, B, C, D, E, F, G, x)]", "member" : "zio.prelude.Derive.Tuple8DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple8DeriveEqual[A,B,C,D,E,F,G](implicitevidence$39:zio.prelude.Equal[A],implicitevidence$40:zio.prelude.Equal[B],implicitevidence$41:zio.prelude.Equal[C],implicitevidence$42:zio.prelude.Equal[D],implicitevidence$43:zio.prelude.Equal[E],implicitevidence$44:zio.prelude.Equal[F],implicitevidence$45:zio.prelude.Equal[G]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,G,x)]", "kind" : "implicit def"}, {"label" : "Tuple7DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F]): DeriveEqual[[x](A, B, C, D, E, F, x)]", "member" : "zio.prelude.Derive.Tuple7DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple7DeriveEqual[A,B,C,D,E,F](implicitevidence$32:zio.prelude.Equal[A],implicitevidence$33:zio.prelude.Equal[B],implicitevidence$34:zio.prelude.Equal[C],implicitevidence$35:zio.prelude.Equal[D],implicitevidence$36:zio.prelude.Equal[E],implicitevidence$37:zio.prelude.Equal[F]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,F,x)]", "kind" : "implicit def"}, {"label" : "Tuple6DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E]): DeriveEqual[[x](A, B, C, D, E, x)]", "member" : "zio.prelude.Derive.Tuple6DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple6DeriveEqual[A,B,C,D,E](implicitevidence$26:zio.prelude.Equal[A],implicitevidence$27:zio.prelude.Equal[B],implicitevidence$28:zio.prelude.Equal[C],implicitevidence$29:zio.prelude.Equal[D],implicitevidence$30:zio.prelude.Equal[E]):zio.prelude.DeriveEqual[[x](A,B,C,D,E,x)]", "kind" : "implicit def"}, {"label" : "Tuple5DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D]): DeriveEqual[[x](A, B, C, D, x)]", "member" : "zio.prelude.Derive.Tuple5DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple5DeriveEqual[A,B,C,D](implicitevidence$21:zio.prelude.Equal[A],implicitevidence$22:zio.prelude.Equal[B],implicitevidence$23:zio.prelude.Equal[C],implicitevidence$24:zio.prelude.Equal[D]):zio.prelude.DeriveEqual[[x](A,B,C,D,x)]", "kind" : "implicit def"}, {"label" : "Tuple4DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C]): DeriveEqual[[x](A, B, C, x)]", "member" : "zio.prelude.Derive.Tuple4DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple4DeriveEqual[A,B,C](implicitevidence$17:zio.prelude.Equal[A],implicitevidence$18:zio.prelude.Equal[B],implicitevidence$19:zio.prelude.Equal[C]):zio.prelude.DeriveEqual[[x](A,B,C,x)]", "kind" : "implicit def"}, {"label" : "Tuple3DeriveEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B]): DeriveEqual[[x](A, B, x)]", "member" : "zio.prelude.Derive.Tuple3DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple3DeriveEqual[A,B](implicitevidence$14:zio.prelude.Equal[A],implicitevidence$15:zio.prelude.Equal[B]):zio.prelude.DeriveEqual[[x](A,B,x)]", "kind" : "implicit def"}, {"label" : "Tuple2DeriveEqual", "tail" : "(arg0: Equal[A]): DeriveEqual[[x](A, x)]", "member" : "zio.prelude.Derive.Tuple2DeriveEqual", "link" : "zio\/prelude\/Derive$.html#Tuple2DeriveEqual[A](implicitevidence$12:zio.prelude.Equal[A]):zio.prelude.DeriveEqual[[x](A,x)]", "kind" : "implicit def"}, {"label" : "TryDeriveEqual", "tail" : ": DeriveEqual[Try]", "member" : "zio.prelude.Derive.TryDeriveEqual", "link" : "zio\/prelude\/Derive$.html#TryDeriveEqual:zio.prelude.DeriveEqual[scala.util.Try]", "kind" : "implicit val"}, {"label" : "SetDeriveEqual", "tail" : ": DeriveEqual[Set]", "member" : "zio.prelude.Derive.SetDeriveEqual", "link" : "zio\/prelude\/Derive$.html#SetDeriveEqual:zio.prelude.DeriveEqual[Set]", "kind" : "implicit val"}, {"label" : "ParSeqDeriveEqual", "tail" : "(): DeriveEqual[[+x]ParSeq[Z, x]]", "member" : "zio.prelude.Derive.ParSeqDeriveEqual", "link" : "zio\/prelude\/Derive$.html#ParSeqDeriveEqual[Z<:Unit]:zio.prelude.DeriveEqual[[+x]zio.prelude.ParSeq[Z,x]]", "kind" : "implicit def"}, {"label" : "OptionDeriveEqual", "tail" : ": DeriveEqual[Option]", "member" : "zio.prelude.Derive.OptionDeriveEqual", "link" : "zio\/prelude\/Derive$.html#OptionDeriveEqual:zio.prelude.DeriveEqual[Option]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkDeriveEqual", "tail" : ": DeriveEqual[NonEmptyChunk]", "member" : "zio.prelude.Derive.NonEmptyChunkDeriveEqual", "link" : "zio\/prelude\/Derive$.html#NonEmptyChunkDeriveEqual:zio.prelude.DeriveEqual[zio.NonEmptyChunk]", "kind" : "implicit val"}, {"label" : "MapDeriveEqual", "tail" : "(): DeriveEqual[[+x]Map[A, x]]", "member" : "zio.prelude.Derive.MapDeriveEqual", "link" : "zio\/prelude\/Derive$.html#MapDeriveEqual[A]:zio.prelude.DeriveEqual[[+x]scala.collection.immutable.Map[A,x]]", "kind" : "implicit def"}, {"label" : "EitherDeriveEqual", "tail" : "(arg0: Equal[E]): DeriveEqual[[+x]Either[E, x]]", "member" : "zio.prelude.Derive.EitherDeriveEqual", "link" : "zio\/prelude\/Derive$.html#EitherDeriveEqual[E](implicitevidence$4:zio.prelude.Equal[E]):zio.prelude.DeriveEqual[[+x]scala.util.Either[E,x]]", "kind" : "implicit def"}, {"label" : "ListDeriveEqual", "tail" : ": Derive[List, Equal]", "member" : "zio.prelude.Derive.ListDeriveEqual", "link" : "zio\/prelude\/Derive$.html#ListDeriveEqual:zio.prelude.Derive[List,zio.prelude.Equal]", "kind" : "implicit val"}, {"label" : "ChunkDeriveEqual", "tail" : ": Derive[Chunk, Equal]", "member" : "zio.prelude.Derive.ChunkDeriveEqual", "link" : "zio\/prelude\/Derive$.html#ChunkDeriveEqual:zio.prelude.Derive[zio.Chunk,zio.prelude.Equal]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(derive: Derive[F, Typeclass]): Derive[F, Typeclass]", "member" : "zio.prelude.Derive.apply", "link" : "zio\/prelude\/Derive$.html#apply[F[_],Typeclass[_]](implicitderive:zio.prelude.Derive[F,Typeclass]):zio.prelude.Derive[F,Typeclass]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Derive$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Derive$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Derive$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Derive$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Derive$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Derive$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Derive$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Derive$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Derive$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Derive$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Derive$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Derive$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Derive$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Derive$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Derive$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Derive$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Derive.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Derive.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Derive.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Derive.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Derive.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Derive.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Derive.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Derive.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Derive.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Derive.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Derive.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Derive.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Derive.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Derive.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Derive.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Derive.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Derive.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Derive.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "derive", "tail" : "(arg0: Typeclass[A]): Typeclass[F[A]]", "member" : "zio.prelude.Derive.derive", "link" : "zio\/prelude\/Derive.html#derive[A](implicitevidence$1:Typeclass[A]):Typeclass[F[A]]", "kind" : "abstract def"}], "shortDescription" : "Derive[F, Typeclass] represents a universally quantified function fromTypeclass[A] to Typeclass[F[A]] for some F[_]."}, {"name" : "zio.prelude.Divariant", "object" : "zio\/prelude\/Divariant$.html", "members_object" : [{"label" : "Function1Divariant", "tail" : ": Divariant[Function1]", "member" : "zio.prelude.Divariant.Function1Divariant", "link" : "zio\/prelude\/Divariant$.html#Function1Divariant:zio.prelude.Divariant[Function1]", "kind" : "implicit val"}, {"label" : "Join", "tail" : "", "member" : "zio.prelude.Divariant.Join", "link" : "zio\/prelude\/Divariant$.html#Join[=>:[-_,+_],A]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Divariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Divariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Divariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Divariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Divariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Divariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Divariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Divariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Divariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Divariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Divariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Divariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Divariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Divariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Divariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Divariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Divariant.html", "kind" : "trait", "members_trait" : [{"label" : "dimapCoherence", "tail" : "(ab: =>:[A, B], f: (A2) => A, g: (B) => B2)(eq: Equal[=>:[A2, B2]]): Boolean", "member" : "zio.prelude.Divariant.dimapCoherence", "link" : "zio\/prelude\/Divariant.html#dimapCoherence[A,A2,A3,B,B2,B3](ab:A=>:B,f:A2=>A,g:B=>B2)(impliciteq:zio.prelude.Equal[A2=>:B2]):Boolean", "kind" : "def"}, {"label" : "dimapIdentity", "tail" : "(ab: =>:[A, B])(eq: Equal[=>:[A, B]]): Boolean", "member" : "zio.prelude.Divariant.dimapIdentity", "link" : "zio\/prelude\/Divariant.html#dimapIdentity[A,B,B2,B3](ab:A=>:B)(impliciteq:zio.prelude.Equal[A=>:B]):Boolean", "kind" : "def"}, {"label" : "dimapCompose", "tail" : "(ab: =>:[A, B], g: (A3) => A2, f: (A2) => A, i: (B) => B2, h: (B2) => B3)(eq: Equal[=>:[A3, B3]]): Boolean", "member" : "zio.prelude.Divariant.dimapCompose", "link" : "zio\/prelude\/Divariant.html#dimapCompose[A,B,A2,A3,B2,B3](ab:A=>:B,g:A3=>A2,f:A2=>A,i:B=>B2,h:B2=>B3)(impliciteq:zio.prelude.Equal[A3=>:B3]):Boolean", "kind" : "def"}, {"label" : "leftContramapidentity", "tail" : "(ab: =>:[A, B])(eq: Equal[=>:[A, B]]): Boolean", "member" : "zio.prelude.Divariant.leftContramapidentity", "link" : "zio\/prelude\/Divariant.html#leftContramapidentity[A,B](ab:A=>:B)(impliciteq:zio.prelude.Equal[A=>:B]):Boolean", "kind" : "def"}, {"label" : "leftContramapCompose", "tail" : "(ab: =>:[A, B], f: (A2) => A, g: (A3) => A2)(eq: Equal[=>:[A3, B]]): Boolean", "member" : "zio.prelude.Divariant.leftContramapCompose", "link" : "zio\/prelude\/Divariant.html#leftContramapCompose[A,B,A2,A3](ab:A=>:B,f:A2=>A,g:A3=>A2)(impliciteq:zio.prelude.Equal[A3=>:B]):Boolean", "kind" : "def"}, {"label" : "dimap", "tail" : "(f: (C) => A, g: (B) => D): (=>:[A, B]) => =>:[C, D]", "member" : "zio.prelude.Divariant.dimap", "link" : "zio\/prelude\/Divariant.html#dimap[A,B,C,D](f:C=>A,g:B=>D):A=>:B=>C=>:D", "kind" : "def"}, {"label" : "deriveContravariant", "tail" : "(): Contravariant[[-A]=>:[A, B]]", "member" : "zio.prelude.Divariant.deriveContravariant", "link" : "zio\/prelude\/Divariant.html#deriveContravariant[B]:zio.prelude.Contravariant[[-A]A=>:B]", "kind" : "def"}, {"label" : "rightMapIdentity", "tail" : "(ab: =>:[A, B])(eq: Equal[=>:[A, B]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapIdentity", "link" : "zio\/prelude\/Divariant.html#rightMapIdentity[A,B](ab:A<=>B)(impliciteq:zio.prelude.Equal[A<=>B]):Boolean", "kind" : "def"}, {"label" : "rightMapCompose", "tail" : "(ab: =>:[A, B], f: (B) => B2, g: (B2) => B3)(eq: Equal[=>:[A, B3]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapCompose", "link" : "zio\/prelude\/Divariant.html#rightMapCompose[A,B,B2,B3](ab:A<=>B,f:B=>B2,g:B2=>B3)(impliciteq:zio.prelude.Equal[A<=>B3]):Boolean", "kind" : "def"}, {"label" : "deriveCovariant", "tail" : "(): Covariant[[+B]=>:[A, B]]", "member" : "zio.prelude.RightCovariant.deriveCovariant", "link" : "zio\/prelude\/Divariant.html#deriveCovariant[A]:zio.prelude.Covariant[[+B]A<=>B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Divariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Divariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Divariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Divariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Divariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Divariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Divariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Divariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Divariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Divariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Divariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Divariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Divariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Divariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Divariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Divariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Divariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "leftContramap", "tail" : "(f: (C) => A): (=>:[A, B]) => =>:[C, B]", "member" : "zio.prelude.Divariant.leftContramap", "link" : "zio\/prelude\/Divariant.html#leftContramap[A,B,C](f:C=>A):A=>:B=>C=>:B", "kind" : "abstract def"}, {"label" : "rightMap", "tail" : "(f: (B) => C): (=>:[A, B]) => =>:[A, C]", "member" : "zio.prelude.RightCovariant.rightMap", "link" : "zio\/prelude\/Divariant.html#rightMap[A,B,C](f:B=>C):A<=>B=>A<=>C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.DivariantSyntax", "trait" : "zio\/prelude\/DivariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "DivariantOps", "tail" : "", "member" : "zio.prelude.DivariantSyntax.DivariantOps", "link" : "zio\/prelude\/DivariantSyntax.html#DivariantOps[=>:[-_,+_],A,B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DivariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DivariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DivariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DivariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DivariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DivariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DivariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DivariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DivariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DivariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DivariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DivariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DivariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DivariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DivariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DivariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.DivariantSyntax.DivariantOps", "shortDescription" : "", "members_class" : [{"label" : "rightMap", "tail" : "(bc: (B) => C)(divariant: Divariant[=>:]): =>:[A, C]", "member" : "zio.prelude.DivariantSyntax.DivariantOps.rightMap", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#rightMap[C](bc:B=>C)(implicitdivariant:zio.prelude.Divariant[=>:]):A=>:C", "kind" : "def"}, {"label" : "leftMap", "tail" : "(ca: (C) => A)(divariant: Divariant[=>:]): =>:[C, B]", "member" : "zio.prelude.DivariantSyntax.DivariantOps.leftMap", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#leftMap[C](ca:C=>A)(implicitdivariant:zio.prelude.Divariant[=>:]):C=>:B", "kind" : "def"}, {"label" : "dimap", "tail" : "(g: (C) => A, h: (B) => D)(divariant: Divariant[=>:]): =>:[C, D]", "member" : "zio.prelude.DivariantSyntax.DivariantOps.dimap", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#dimap[C,D](g:C=>A,h:B=>D)(implicitdivariant:zio.prelude.Divariant[=>:]):C=>:D", "kind" : "def"}, {"member" : "zio.prelude.DivariantSyntax.DivariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/DivariantSyntax$DivariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/DivariantSyntax$DivariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.Equal", "object" : "zio\/prelude\/Equal$.html", "members_object" : [{"label" : "ZTraceHash", "tail" : ": Hash[ZTrace]", "member" : "zio.prelude.Equal.ZTraceHash", "link" : "zio\/prelude\/Equal$.html#ZTraceHash:zio.prelude.Hash[zio.ZTrace]", "kind" : "implicit val"}, {"label" : "ExitEqual", "tail" : "(arg0: Equal[E], arg1: Equal[A]): Equal[Exit[E, A]]", "member" : "zio.prelude.Equal.ExitEqual", "link" : "zio\/prelude\/Equal$.html#ExitEqual[E,A](implicitevidence$264:zio.prelude.Equal[E],implicitevidence$265:zio.prelude.Equal[A]):zio.prelude.Equal[zio.Exit[E,A]]", "kind" : "implicit def"}, {"label" : "CauseHash", "tail" : "(): Hash[Cause[A]]", "member" : "zio.prelude.Equal.CauseHash", "link" : "zio\/prelude\/Equal$.html#CauseHash[A]:zio.prelude.Hash[zio.Cause[A]]", "kind" : "implicit def"}, {"label" : "VectorEqual", "tail" : "(arg0: Equal[A]): Equal[Vector[A]]", "member" : "zio.prelude.Equal.VectorEqual", "link" : "zio\/prelude\/Equal$.html#VectorEqual[A](implicitevidence$263:zio.prelude.Equal[A]):zio.prelude.Equal[Vector[A]]", "kind" : "implicit def"}, {"label" : "UnitHashOrd", "tail" : ": Hash[Unit] with Ord[Unit]", "member" : "zio.prelude.Equal.UnitHashOrd", "link" : "zio\/prelude\/Equal$.html#UnitHashOrd:zio.prelude.Hash[Unit]withzio.prelude.Ord[Unit]", "kind" : "implicit val"}, {"label" : "ThrowableHash", "tail" : ": Hash[Throwable]", "member" : "zio.prelude.Equal.ThrowableHash", "link" : "zio\/prelude\/Equal$.html#ThrowableHash:zio.prelude.Hash[Throwable]", "kind" : "lazy val"}, {"label" : "Tuple22Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S], arg19: Equal[T], arg20: Equal[U], arg21: Equal[V]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Equal.Tuple22Equal", "link" : "zio\/prelude\/Equal$.html#Tuple22Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$241:zio.prelude.Equal[A],implicitevidence$242:zio.prelude.Equal[B],implicitevidence$243:zio.prelude.Equal[C],implicitevidence$244:zio.prelude.Equal[D],implicitevidence$245:zio.prelude.Equal[E],implicitevidence$246:zio.prelude.Equal[F],implicitevidence$247:zio.prelude.Equal[G],implicitevidence$248:zio.prelude.Equal[H],implicitevidence$249:zio.prelude.Equal[I],implicitevidence$250:zio.prelude.Equal[J],implicitevidence$251:zio.prelude.Equal[K],implicitevidence$252:zio.prelude.Equal[L],implicitevidence$253:zio.prelude.Equal[M],implicitevidence$254:zio.prelude.Equal[N],implicitevidence$255:zio.prelude.Equal[O],implicitevidence$256:zio.prelude.Equal[P],implicitevidence$257:zio.prelude.Equal[Q],implicitevidence$258:zio.prelude.Equal[R],implicitevidence$259:zio.prelude.Equal[S],implicitevidence$260:zio.prelude.Equal[T],implicitevidence$261:zio.prelude.Equal[U],implicitevidence$262:zio.prelude.Equal[V]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S], arg19: Equal[T], arg20: Equal[U]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Equal.Tuple21Equal", "link" : "zio\/prelude\/Equal$.html#Tuple21Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$220:zio.prelude.Equal[A],implicitevidence$221:zio.prelude.Equal[B],implicitevidence$222:zio.prelude.Equal[C],implicitevidence$223:zio.prelude.Equal[D],implicitevidence$224:zio.prelude.Equal[E],implicitevidence$225:zio.prelude.Equal[F],implicitevidence$226:zio.prelude.Equal[G],implicitevidence$227:zio.prelude.Equal[H],implicitevidence$228:zio.prelude.Equal[I],implicitevidence$229:zio.prelude.Equal[J],implicitevidence$230:zio.prelude.Equal[K],implicitevidence$231:zio.prelude.Equal[L],implicitevidence$232:zio.prelude.Equal[M],implicitevidence$233:zio.prelude.Equal[N],implicitevidence$234:zio.prelude.Equal[O],implicitevidence$235:zio.prelude.Equal[P],implicitevidence$236:zio.prelude.Equal[Q],implicitevidence$237:zio.prelude.Equal[R],implicitevidence$238:zio.prelude.Equal[S],implicitevidence$239:zio.prelude.Equal[T],implicitevidence$240:zio.prelude.Equal[U]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S], arg19: Equal[T]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Equal.Tuple20Equal", "link" : "zio\/prelude\/Equal$.html#Tuple20Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$200:zio.prelude.Equal[A],implicitevidence$201:zio.prelude.Equal[B],implicitevidence$202:zio.prelude.Equal[C],implicitevidence$203:zio.prelude.Equal[D],implicitevidence$204:zio.prelude.Equal[E],implicitevidence$205:zio.prelude.Equal[F],implicitevidence$206:zio.prelude.Equal[G],implicitevidence$207:zio.prelude.Equal[H],implicitevidence$208:zio.prelude.Equal[I],implicitevidence$209:zio.prelude.Equal[J],implicitevidence$210:zio.prelude.Equal[K],implicitevidence$211:zio.prelude.Equal[L],implicitevidence$212:zio.prelude.Equal[M],implicitevidence$213:zio.prelude.Equal[N],implicitevidence$214:zio.prelude.Equal[O],implicitevidence$215:zio.prelude.Equal[P],implicitevidence$216:zio.prelude.Equal[Q],implicitevidence$217:zio.prelude.Equal[R],implicitevidence$218:zio.prelude.Equal[S],implicitevidence$219:zio.prelude.Equal[T]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R], arg18: Equal[S]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Equal.Tuple19Equal", "link" : "zio\/prelude\/Equal$.html#Tuple19Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$181:zio.prelude.Equal[A],implicitevidence$182:zio.prelude.Equal[B],implicitevidence$183:zio.prelude.Equal[C],implicitevidence$184:zio.prelude.Equal[D],implicitevidence$185:zio.prelude.Equal[E],implicitevidence$186:zio.prelude.Equal[F],implicitevidence$187:zio.prelude.Equal[G],implicitevidence$188:zio.prelude.Equal[H],implicitevidence$189:zio.prelude.Equal[I],implicitevidence$190:zio.prelude.Equal[J],implicitevidence$191:zio.prelude.Equal[K],implicitevidence$192:zio.prelude.Equal[L],implicitevidence$193:zio.prelude.Equal[M],implicitevidence$194:zio.prelude.Equal[N],implicitevidence$195:zio.prelude.Equal[O],implicitevidence$196:zio.prelude.Equal[P],implicitevidence$197:zio.prelude.Equal[Q],implicitevidence$198:zio.prelude.Equal[R],implicitevidence$199:zio.prelude.Equal[S]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q], arg17: Equal[R]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Equal.Tuple18Equal", "link" : "zio\/prelude\/Equal$.html#Tuple18Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$163:zio.prelude.Equal[A],implicitevidence$164:zio.prelude.Equal[B],implicitevidence$165:zio.prelude.Equal[C],implicitevidence$166:zio.prelude.Equal[D],implicitevidence$167:zio.prelude.Equal[E],implicitevidence$168:zio.prelude.Equal[F],implicitevidence$169:zio.prelude.Equal[G],implicitevidence$170:zio.prelude.Equal[H],implicitevidence$171:zio.prelude.Equal[I],implicitevidence$172:zio.prelude.Equal[J],implicitevidence$173:zio.prelude.Equal[K],implicitevidence$174:zio.prelude.Equal[L],implicitevidence$175:zio.prelude.Equal[M],implicitevidence$176:zio.prelude.Equal[N],implicitevidence$177:zio.prelude.Equal[O],implicitevidence$178:zio.prelude.Equal[P],implicitevidence$179:zio.prelude.Equal[Q],implicitevidence$180:zio.prelude.Equal[R]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P], arg16: Equal[Q]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Equal.Tuple17Equal", "link" : "zio\/prelude\/Equal$.html#Tuple17Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$146:zio.prelude.Equal[A],implicitevidence$147:zio.prelude.Equal[B],implicitevidence$148:zio.prelude.Equal[C],implicitevidence$149:zio.prelude.Equal[D],implicitevidence$150:zio.prelude.Equal[E],implicitevidence$151:zio.prelude.Equal[F],implicitevidence$152:zio.prelude.Equal[G],implicitevidence$153:zio.prelude.Equal[H],implicitevidence$154:zio.prelude.Equal[I],implicitevidence$155:zio.prelude.Equal[J],implicitevidence$156:zio.prelude.Equal[K],implicitevidence$157:zio.prelude.Equal[L],implicitevidence$158:zio.prelude.Equal[M],implicitevidence$159:zio.prelude.Equal[N],implicitevidence$160:zio.prelude.Equal[O],implicitevidence$161:zio.prelude.Equal[P],implicitevidence$162:zio.prelude.Equal[Q]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O], arg15: Equal[P]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Equal.Tuple16Equal", "link" : "zio\/prelude\/Equal$.html#Tuple16Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$130:zio.prelude.Equal[A],implicitevidence$131:zio.prelude.Equal[B],implicitevidence$132:zio.prelude.Equal[C],implicitevidence$133:zio.prelude.Equal[D],implicitevidence$134:zio.prelude.Equal[E],implicitevidence$135:zio.prelude.Equal[F],implicitevidence$136:zio.prelude.Equal[G],implicitevidence$137:zio.prelude.Equal[H],implicitevidence$138:zio.prelude.Equal[I],implicitevidence$139:zio.prelude.Equal[J],implicitevidence$140:zio.prelude.Equal[K],implicitevidence$141:zio.prelude.Equal[L],implicitevidence$142:zio.prelude.Equal[M],implicitevidence$143:zio.prelude.Equal[N],implicitevidence$144:zio.prelude.Equal[O],implicitevidence$145:zio.prelude.Equal[P]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N], arg14: Equal[O]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Equal.Tuple15Equal", "link" : "zio\/prelude\/Equal$.html#Tuple15Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$115:zio.prelude.Equal[A],implicitevidence$116:zio.prelude.Equal[B],implicitevidence$117:zio.prelude.Equal[C],implicitevidence$118:zio.prelude.Equal[D],implicitevidence$119:zio.prelude.Equal[E],implicitevidence$120:zio.prelude.Equal[F],implicitevidence$121:zio.prelude.Equal[G],implicitevidence$122:zio.prelude.Equal[H],implicitevidence$123:zio.prelude.Equal[I],implicitevidence$124:zio.prelude.Equal[J],implicitevidence$125:zio.prelude.Equal[K],implicitevidence$126:zio.prelude.Equal[L],implicitevidence$127:zio.prelude.Equal[M],implicitevidence$128:zio.prelude.Equal[N],implicitevidence$129:zio.prelude.Equal[O]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M], arg13: Equal[N]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Equal.Tuple14Equal", "link" : "zio\/prelude\/Equal$.html#Tuple14Equal[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$101:zio.prelude.Equal[A],implicitevidence$102:zio.prelude.Equal[B],implicitevidence$103:zio.prelude.Equal[C],implicitevidence$104:zio.prelude.Equal[D],implicitevidence$105:zio.prelude.Equal[E],implicitevidence$106:zio.prelude.Equal[F],implicitevidence$107:zio.prelude.Equal[G],implicitevidence$108:zio.prelude.Equal[H],implicitevidence$109:zio.prelude.Equal[I],implicitevidence$110:zio.prelude.Equal[J],implicitevidence$111:zio.prelude.Equal[K],implicitevidence$112:zio.prelude.Equal[L],implicitevidence$113:zio.prelude.Equal[M],implicitevidence$114:zio.prelude.Equal[N]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L], arg12: Equal[M]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Equal.Tuple13Equal", "link" : "zio\/prelude\/Equal$.html#Tuple13Equal[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$88:zio.prelude.Equal[A],implicitevidence$89:zio.prelude.Equal[B],implicitevidence$90:zio.prelude.Equal[C],implicitevidence$91:zio.prelude.Equal[D],implicitevidence$92:zio.prelude.Equal[E],implicitevidence$93:zio.prelude.Equal[F],implicitevidence$94:zio.prelude.Equal[G],implicitevidence$95:zio.prelude.Equal[H],implicitevidence$96:zio.prelude.Equal[I],implicitevidence$97:zio.prelude.Equal[J],implicitevidence$98:zio.prelude.Equal[K],implicitevidence$99:zio.prelude.Equal[L],implicitevidence$100:zio.prelude.Equal[M]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K], arg11: Equal[L]): Equal[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Equal.Tuple12Equal", "link" : "zio\/prelude\/Equal$.html#Tuple12Equal[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$76:zio.prelude.Equal[A],implicitevidence$77:zio.prelude.Equal[B],implicitevidence$78:zio.prelude.Equal[C],implicitevidence$79:zio.prelude.Equal[D],implicitevidence$80:zio.prelude.Equal[E],implicitevidence$81:zio.prelude.Equal[F],implicitevidence$82:zio.prelude.Equal[G],implicitevidence$83:zio.prelude.Equal[H],implicitevidence$84:zio.prelude.Equal[I],implicitevidence$85:zio.prelude.Equal[J],implicitevidence$86:zio.prelude.Equal[K],implicitevidence$87:zio.prelude.Equal[L]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J], arg10: Equal[K]): Equal[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Equal.Tuple11Equal", "link" : "zio\/prelude\/Equal$.html#Tuple11Equal[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$65:zio.prelude.Equal[A],implicitevidence$66:zio.prelude.Equal[B],implicitevidence$67:zio.prelude.Equal[C],implicitevidence$68:zio.prelude.Equal[D],implicitevidence$69:zio.prelude.Equal[E],implicitevidence$70:zio.prelude.Equal[F],implicitevidence$71:zio.prelude.Equal[G],implicitevidence$72:zio.prelude.Equal[H],implicitevidence$73:zio.prelude.Equal[I],implicitevidence$74:zio.prelude.Equal[J],implicitevidence$75:zio.prelude.Equal[K]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I], arg9: Equal[J]): Equal[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Equal.Tuple10Equal", "link" : "zio\/prelude\/Equal$.html#Tuple10Equal[A,B,C,D,E,F,G,H,I,J](implicitevidence$55:zio.prelude.Equal[A],implicitevidence$56:zio.prelude.Equal[B],implicitevidence$57:zio.prelude.Equal[C],implicitevidence$58:zio.prelude.Equal[D],implicitevidence$59:zio.prelude.Equal[E],implicitevidence$60:zio.prelude.Equal[F],implicitevidence$61:zio.prelude.Equal[G],implicitevidence$62:zio.prelude.Equal[H],implicitevidence$63:zio.prelude.Equal[I],implicitevidence$64:zio.prelude.Equal[J]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H], arg8: Equal[I]): Equal[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Equal.Tuple9Equal", "link" : "zio\/prelude\/Equal$.html#Tuple9Equal[A,B,C,D,E,F,G,H,I](implicitevidence$46:zio.prelude.Equal[A],implicitevidence$47:zio.prelude.Equal[B],implicitevidence$48:zio.prelude.Equal[C],implicitevidence$49:zio.prelude.Equal[D],implicitevidence$50:zio.prelude.Equal[E],implicitevidence$51:zio.prelude.Equal[F],implicitevidence$52:zio.prelude.Equal[G],implicitevidence$53:zio.prelude.Equal[H],implicitevidence$54:zio.prelude.Equal[I]):zio.prelude.Equal[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G], arg7: Equal[H]): Equal[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Equal.Tuple8Equal", "link" : "zio\/prelude\/Equal$.html#Tuple8Equal[A,B,C,D,E,F,G,H](implicitevidence$38:zio.prelude.Equal[A],implicitevidence$39:zio.prelude.Equal[B],implicitevidence$40:zio.prelude.Equal[C],implicitevidence$41:zio.prelude.Equal[D],implicitevidence$42:zio.prelude.Equal[E],implicitevidence$43:zio.prelude.Equal[F],implicitevidence$44:zio.prelude.Equal[G],implicitevidence$45:zio.prelude.Equal[H]):zio.prelude.Equal[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F], arg6: Equal[G]): Equal[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Equal.Tuple7Equal", "link" : "zio\/prelude\/Equal$.html#Tuple7Equal[A,B,C,D,E,F,G](implicitevidence$31:zio.prelude.Equal[A],implicitevidence$32:zio.prelude.Equal[B],implicitevidence$33:zio.prelude.Equal[C],implicitevidence$34:zio.prelude.Equal[D],implicitevidence$35:zio.prelude.Equal[E],implicitevidence$36:zio.prelude.Equal[F],implicitevidence$37:zio.prelude.Equal[G]):zio.prelude.Equal[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E], arg5: Equal[F]): Equal[(A, B, C, D, E, F)]", "member" : "zio.prelude.Equal.Tuple6Equal", "link" : "zio\/prelude\/Equal$.html#Tuple6Equal[A,B,C,D,E,F](implicitevidence$25:zio.prelude.Equal[A],implicitevidence$26:zio.prelude.Equal[B],implicitevidence$27:zio.prelude.Equal[C],implicitevidence$28:zio.prelude.Equal[D],implicitevidence$29:zio.prelude.Equal[E],implicitevidence$30:zio.prelude.Equal[F]):zio.prelude.Equal[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D], arg4: Equal[E]): Equal[(A, B, C, D, E)]", "member" : "zio.prelude.Equal.Tuple5Equal", "link" : "zio\/prelude\/Equal$.html#Tuple5Equal[A,B,C,D,E](implicitevidence$20:zio.prelude.Equal[A],implicitevidence$21:zio.prelude.Equal[B],implicitevidence$22:zio.prelude.Equal[C],implicitevidence$23:zio.prelude.Equal[D],implicitevidence$24:zio.prelude.Equal[E]):zio.prelude.Equal[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C], arg3: Equal[D]): Equal[(A, B, C, D)]", "member" : "zio.prelude.Equal.Tuple4Equal", "link" : "zio\/prelude\/Equal$.html#Tuple4Equal[A,B,C,D](implicitevidence$16:zio.prelude.Equal[A],implicitevidence$17:zio.prelude.Equal[B],implicitevidence$18:zio.prelude.Equal[C],implicitevidence$19:zio.prelude.Equal[D]):zio.prelude.Equal[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B], arg2: Equal[C]): Equal[(A, B, C)]", "member" : "zio.prelude.Equal.Tuple3Equal", "link" : "zio\/prelude\/Equal$.html#Tuple3Equal[A,B,C](implicitevidence$13:zio.prelude.Equal[A],implicitevidence$14:zio.prelude.Equal[B],implicitevidence$15:zio.prelude.Equal[C]):zio.prelude.Equal[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Equal", "tail" : "(arg0: Equal[A], arg1: Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.Tuple2Equal", "link" : "zio\/prelude\/Equal$.html#Tuple2Equal[A,B](implicitevidence$11:zio.prelude.Equal[A],implicitevidence$12:zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "implicit def"}, {"label" : "TryEqual", "tail" : "(arg0: Equal[A]): Equal[Try[A]]", "member" : "zio.prelude.Equal.TryEqual", "link" : "zio\/prelude\/Equal$.html#TryEqual[A](implicitevidence$10:zio.prelude.Equal[A]):zio.prelude.Equal[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "StringHashOrd", "tail" : ": Hash[String] with Ord[String]", "member" : "zio.prelude.Equal.StringHashOrd", "link" : "zio\/prelude\/Equal$.html#StringHashOrd:zio.prelude.Hash[String]withzio.prelude.Ord[String]", "kind" : "implicit val"}, {"label" : "SetHashPartialOrd", "tail" : "(): Hash[Set[A]] with PartialOrd[Set[A]]", "member" : "zio.prelude.Equal.SetHashPartialOrd", "link" : "zio\/prelude\/Equal$.html#SetHashPartialOrd[A]:zio.prelude.Hash[Set[A]]withzio.prelude.PartialOrd[Set[A]]", "kind" : "implicit def"}, {"label" : "OptionEqual", "tail" : "(arg0: Equal[A]): Equal[Option[A]]", "member" : "zio.prelude.Equal.OptionEqual", "link" : "zio\/prelude\/Equal$.html#OptionEqual[A](implicitevidence$9:zio.prelude.Equal[A]):zio.prelude.Equal[Option[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyChunkEqual", "tail" : "(arg0: Equal[A]): Equal[NonEmptyChunk[A]]", "member" : "zio.prelude.Equal.NonEmptyChunkEqual", "link" : "zio\/prelude\/Equal$.html#NonEmptyChunkEqual[A](implicitevidence$8:zio.prelude.Equal[A]):zio.prelude.Equal[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "MapPartialOrd", "tail" : "(arg0: Equal[B]): PartialOrd[Map[A, B]]", "member" : "zio.prelude.Equal.MapPartialOrd", "link" : "zio\/prelude\/Equal$.html#MapPartialOrd[A,B](implicitevidence$7:zio.prelude.Equal[B]):zio.prelude.PartialOrd[Map[A,B]]", "kind" : "implicit def"}, {"label" : "LongHashOrd", "tail" : ": Hash[Long] with Ord[Long]", "member" : "zio.prelude.Equal.LongHashOrd", "link" : "zio\/prelude\/Equal$.html#LongHashOrd:zio.prelude.Hash[Long]withzio.prelude.Ord[Long]", "kind" : "implicit val"}, {"label" : "ListEqual", "tail" : "(arg0: Equal[A]): Equal[List[A]]", "member" : "zio.prelude.Equal.ListEqual", "link" : "zio\/prelude\/Equal$.html#ListEqual[A](implicitevidence$6:zio.prelude.Equal[A]):zio.prelude.Equal[List[A]]", "kind" : "implicit def"}, {"label" : "IntHashOrd", "tail" : ": Hash[Int] with Ord[Int]", "member" : "zio.prelude.Equal.IntHashOrd", "link" : "zio\/prelude\/Equal$.html#IntHashOrd:zio.prelude.Hash[Int]withzio.prelude.Ord[Int]", "kind" : "implicit val"}, {"label" : "FiberIdHashOrd", "tail" : ": Hash[Fiber.Id] with Ord[Fiber.Id]", "member" : "zio.prelude.Equal.FiberIdHashOrd", "link" : "zio\/prelude\/Equal$.html#FiberIdHashOrd:zio.prelude.Hash[zio.Fiber.Id]withzio.prelude.Ord[zio.Fiber.Id]", "kind" : "implicit lazy val"}, {"label" : "FloatHashOrd", "tail" : ": Hash[Float] with Ord[Float]", "member" : "zio.prelude.Equal.FloatHashOrd", "link" : "zio\/prelude\/Equal$.html#FloatHashOrd:zio.prelude.Hash[Float]withzio.prelude.Ord[Float]", "kind" : "implicit val"}, {"label" : "FloatEqualWithEpsilon", "tail" : "(epsilon: Float): Equal[Float]", "member" : "zio.prelude.Equal.FloatEqualWithEpsilon", "link" : "zio\/prelude\/Equal$.html#FloatEqualWithEpsilon(epsilon:Float):zio.prelude.Equal[Float]", "kind" : "def"}, {"label" : "EitherEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.EitherEqual", "link" : "zio\/prelude\/Equal$.html#EitherEqual[A,B](implicitevidence$4:zio.prelude.Equal[A],implicitevidence$5:zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "implicit def"}, {"label" : "DurationZIOHashOrd", "tail" : ": Hash[Duration] with Ord[Duration]", "member" : "zio.prelude.Equal.DurationZIOHashOrd", "link" : "zio\/prelude\/Equal$.html#DurationZIOHashOrd:zio.prelude.Hash[zio.duration.Duration]withzio.prelude.Ord[zio.duration.Duration]", "kind" : "implicit val"}, {"label" : "DurationScalaHashOrd", "tail" : ": Hash[Duration] with Ord[Duration]", "member" : "zio.prelude.Equal.DurationScalaHashOrd", "link" : "zio\/prelude\/Equal$.html#DurationScalaHashOrd:zio.prelude.Hash[scala.concurrent.duration.Duration]withzio.prelude.Ord[scala.concurrent.duration.Duration]", "kind" : "implicit val"}, {"label" : "DoubleHashOrd", "tail" : ": Hash[Double] with Ord[Double]", "member" : "zio.prelude.Equal.DoubleHashOrd", "link" : "zio\/prelude\/Equal$.html#DoubleHashOrd:zio.prelude.Hash[Double]withzio.prelude.Ord[Double]", "kind" : "implicit val"}, {"label" : "DoubleEqualWithEpsilon", "tail" : "(epsilon: Double): Equal[Double]", "member" : "zio.prelude.Equal.DoubleEqualWithEpsilon", "link" : "zio\/prelude\/Equal$.html#DoubleEqualWithEpsilon(epsilon:Double):zio.prelude.Equal[Double]", "kind" : "def"}, {"label" : "DeriveEqual", "tail" : "(arg0: DeriveEqual[F], arg1: Equal[A]): Equal[F[A]]", "member" : "zio.prelude.Equal.DeriveEqual", "link" : "zio\/prelude\/Equal$.html#DeriveEqual[F[_],A](implicitevidence$2:zio.prelude.DeriveEqual[F],implicitevidence$3:zio.prelude.Equal[A]):zio.prelude.Equal[F[A]]", "kind" : "implicit def"}, {"label" : "ClassHash", "tail" : ": Hash[Class[_]]", "member" : "zio.prelude.Equal.ClassHash", "link" : "zio\/prelude\/Equal$.html#ClassHash:zio.prelude.Hash[Class[_]]", "kind" : "implicit val"}, {"label" : "ChunkEqual", "tail" : "(arg0: Equal[A]): Equal[Chunk[A]]", "member" : "zio.prelude.Equal.ChunkEqual", "link" : "zio\/prelude\/Equal$.html#ChunkEqual[A](implicitevidence$1:zio.prelude.Equal[A]):zio.prelude.Equal[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "CharHashOrd", "tail" : ": Hash[Char] with Ord[Char]", "member" : "zio.prelude.Equal.CharHashOrd", "link" : "zio\/prelude\/Equal$.html#CharHashOrd:zio.prelude.Hash[Char]withzio.prelude.Ord[Char]", "kind" : "implicit val"}, {"label" : "ShortHashOrd", "tail" : ": Hash[Short] with Ord[Short]", "member" : "zio.prelude.Equal.ShortHashOrd", "link" : "zio\/prelude\/Equal$.html#ShortHashOrd:zio.prelude.Hash[Short]withzio.prelude.Ord[Short]", "kind" : "implicit val"}, {"label" : "ByteHashOrd", "tail" : ": Hash[Byte] with Ord[Byte]", "member" : "zio.prelude.Equal.ByteHashOrd", "link" : "zio\/prelude\/Equal$.html#ByteHashOrd:zio.prelude.Hash[Byte]withzio.prelude.Ord[Byte]", "kind" : "implicit val"}, {"label" : "BooleanHashOrd", "tail" : ": Hash[Boolean] with Ord[Boolean]", "member" : "zio.prelude.Equal.BooleanHashOrd", "link" : "zio\/prelude\/Equal$.html#BooleanHashOrd:zio.prelude.Hash[Boolean]withzio.prelude.Ord[Boolean]", "kind" : "implicit val"}, {"label" : "BigIntHashOrd", "tail" : ": Hash[BigInt] with Ord[BigInt]", "member" : "zio.prelude.Equal.BigIntHashOrd", "link" : "zio\/prelude\/Equal$.html#BigIntHashOrd:zio.prelude.Hash[BigInt]withzio.prelude.Ord[BigInt]", "kind" : "implicit val"}, {"label" : "BigDecimalHashOrd", "tail" : ": Hash[BigDecimal] with Ord[BigDecimal]", "member" : "zio.prelude.Equal.BigDecimalHashOrd", "link" : "zio\/prelude\/Equal$.html#BigDecimalHashOrd:zio.prelude.Hash[BigDecimal]withzio.prelude.Ord[BigDecimal]", "kind" : "implicit val"}, {"label" : "default", "tail" : "(): Equal[A]", "member" : "zio.prelude.Equal.default", "link" : "zio\/prelude\/Equal$.html#default[A]:zio.prelude.Equal[A]", "kind" : "def"}, {"label" : "make", "tail" : "(equal: (A, A) => Boolean): Equal[A]", "member" : "zio.prelude.Equal.make", "link" : "zio\/prelude\/Equal$.html#make[A](equal:(A,A)=>Boolean):zio.prelude.Equal[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(equal: Equal[A]): Equal[A]", "member" : "zio.prelude.Equal.apply", "link" : "zio\/prelude\/Equal$.html#apply[A](implicitequal:zio.prelude.Equal[A]):zio.prelude.Equal[A]", "kind" : "def"}, {"label" : "EqualContravariant", "tail" : ": Contravariant[Equal]", "member" : "zio.prelude.Equal.EqualContravariant", "link" : "zio\/prelude\/Equal$.html#EqualContravariant:zio.prelude.Contravariant[zio.prelude.Equal]", "kind" : "implicit val"}, {"label" : "EqualCommutativeIdentityEither", "tail" : ": CommutativeEither[Equal] with IdentityEither[Equal]", "member" : "zio.prelude.Equal.EqualCommutativeIdentityEither", "link" : "zio\/prelude\/Equal$.html#EqualCommutativeIdentityEither:zio.prelude.CommutativeEither[zio.prelude.Equal]withzio.prelude.IdentityEither[zio.prelude.Equal]", "kind" : "implicit val"}, {"label" : "EqualCommutativeIdentityBoth", "tail" : ": CommutativeBoth[Equal] with IdentityBoth[Equal]", "member" : "zio.prelude.Equal.EqualCommutativeIdentityBoth", "link" : "zio\/prelude\/Equal$.html#EqualCommutativeIdentityBoth:zio.prelude.CommutativeBoth[zio.prelude.Equal]withzio.prelude.IdentityBoth[zio.prelude.Equal]", "kind" : "implicit val"}, {"label" : "NothingHashOrd", "tail" : ": Hash[Nothing] with Ord[Nothing]", "member" : "zio.prelude.Equal.NothingHashOrd", "link" : "zio\/prelude\/Equal$.html#NothingHashOrd:zio.prelude.Hash[Nothing]withzio.prelude.Ord[Nothing]", "kind" : "implicit val"}, {"label" : "AnyHashOrd", "tail" : ": Hash[Any] with Ord[Any]", "member" : "zio.prelude.Equal.AnyHashOrd", "link" : "zio\/prelude\/Equal$.html#AnyHashOrd:zio.prelude.Hash[Any]withzio.prelude.Ord[Any]", "kind" : "val"}, {"label" : "fromScala", "tail" : "(equiv: Equiv[A]): Equal[A]", "member" : "zio.prelude.Equal.fromScala", "link" : "zio\/prelude\/Equal$.html#fromScala[A](implicitequiv:scala.math.Equiv[A]):zio.prelude.Equal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Equal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Equal$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Equal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Equal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Equal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Equal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Equal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Equal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Equal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Equal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Equal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Equal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Equal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Equal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Equal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Equal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Equal.html", "kind" : "trait", "members_trait" : [{"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/Equal.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/Equal.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/Equal.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/Equal.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Equal[B]", "member" : "zio.prelude.Equal.contramap", "link" : "zio\/prelude\/Equal.html#contramap[B](f:B=>A):zio.prelude.Equal[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/Equal.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/Equal.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/Equal.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Equal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Equal.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Equal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Equal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Equal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Equal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Equal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Equal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Equal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Equal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Equal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Equal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Equal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Equal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Equal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Equal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.checkEqual", "link" : "zio\/prelude\/Equal.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}], "shortDescription" : "Equal[A] provides implicit evidence that two values of type A can becompared for equality."}, {"name" : "zio.prelude.EqualSyntax", "trait" : "zio\/prelude\/EqualSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "EqualOps", "tail" : "", "member" : "zio.prelude.EqualSyntax.EqualOps", "link" : "zio\/prelude\/EqualSyntax.html#EqualOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/EqualSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/EqualSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/EqualSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/EqualSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/EqualSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/EqualSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/EqualSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/EqualSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/EqualSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/EqualSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/EqualSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/EqualSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/EqualSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/EqualSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/EqualSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/EqualSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.EqualSyntax.EqualOps", "shortDescription" : "Provides infix syntax for comparing two values for equality.", "members_class" : [{"label" : "!==", "tail" : "(r: A1)(equal: Equal[A1]): Boolean", "member" : "zio.prelude.EqualSyntax.EqualOps.!==", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#!==[A1>:A](r:A1)(implicitequal:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"label" : "===", "tail" : "(r: A1)(equal: Equal[A1]): Boolean", "member" : "zio.prelude.EqualSyntax.EqualOps.===", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#===[A1>:A](r:A1)(implicitequal:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"member" : "zio.prelude.EqualSyntax.EqualOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/EqualSyntax$EqualOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/EqualSyntax$EqualOps.html", "kind" : "class"}, {"name" : "zio.prelude.Equivalence", "shortDescription" : "An Equivalence[A, B] defines an equivalence between two types A and B.", "object" : "zio\/prelude\/Equivalence$.html", "members_object" : [{"label" : "eitherNothing", "tail" : "(): Equivalence[Either[A, Nothing], A]", "member" : "zio.prelude.Equivalence.eitherNothing", "link" : "zio\/prelude\/Equivalence$.html#eitherNothing[A]:zio.prelude.Equivalence[Either[A,Nothing],A]", "kind" : "def"}, {"label" : "eitherFlip", "tail" : "(): Equivalence[Either[A, B], Either[B, A]]", "member" : "zio.prelude.Equivalence.eitherFlip", "link" : "zio\/prelude\/Equivalence$.html#eitherFlip[A,B]:zio.prelude.Equivalence[Either[A,B],Either[B,A]]", "kind" : "def"}, {"label" : "either", "tail" : "(): Equivalence[Either[A, Either[B, C]], Either[Either[A, B], C]]", "member" : "zio.prelude.Equivalence.either", "link" : "zio\/prelude\/Equivalence$.html#either[A,B,C]:zio.prelude.Equivalence[Either[A,Either[B,C]],Either[Either[A,B],C]]", "kind" : "def"}, {"label" : "tupleAny", "tail" : "(): Equivalence[(A, Any), A]", "member" : "zio.prelude.Equivalence.tupleAny", "link" : "zio\/prelude\/Equivalence$.html#tupleAny[A]:zio.prelude.Equivalence[(A,Any),A]", "kind" : "def"}, {"label" : "tupleFlip", "tail" : "(): Equivalence[(A, B), (B, A)]", "member" : "zio.prelude.Equivalence.tupleFlip", "link" : "zio\/prelude\/Equivalence$.html#tupleFlip[A,B]:zio.prelude.Equivalence[(A,B),(B,A)]", "kind" : "def"}, {"label" : "tuple", "tail" : "(): Equivalence[(A, (B, C)), ((A, B), C)]", "member" : "zio.prelude.Equivalence.tuple", "link" : "zio\/prelude\/Equivalence$.html#tuple[A,B,C]:zio.prelude.Equivalence[(A,(B,C)),((A,B),C)]", "kind" : "def"}, {"label" : "identity", "tail" : "(): Equivalence[A, A]", "member" : "zio.prelude.Equivalence.identity", "link" : "zio\/prelude\/Equivalence$.html#identity[A]:zio.prelude.Equivalence[A,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Equivalence$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Equivalence$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Equivalence$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Equivalence$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Equivalence$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Equivalence$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Equivalence$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Equivalence$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Equivalence$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Equivalence$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Equivalence$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Equivalence$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Equivalence$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Equivalence$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Equivalence$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Equivalence$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toPartialEquivalence", "tail" : "(): PartialEquivalence[A, B, Nothing, Nothing]", "member" : "zio.prelude.Equivalence.toPartialEquivalence", "link" : "zio\/prelude\/Equivalence.html#toPartialEquivalence:zio.prelude.PartialEquivalence[A,B,Nothing,Nothing]", "kind" : "def"}, {"label" : "flip", "tail" : "(): Equivalence[B, A]", "member" : "zio.prelude.Equivalence.flip", "link" : "zio\/prelude\/Equivalence.html#flip:zio.prelude.Equivalence[B,A]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: Equivalence[C, A]): Equivalence[C, B]", "member" : "zio.prelude.Equivalence.compose", "link" : "zio\/prelude\/Equivalence.html#compose[C](that:zio.prelude.Equivalence[C,A]):zio.prelude.Equivalence[C,B]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: Equivalence[B, C]): Equivalence[A, C]", "member" : "zio.prelude.Equivalence.andThen", "link" : "zio\/prelude\/Equivalence.html#andThen[C](that:zio.prelude.Equivalence[B,C]):zio.prelude.Equivalence[A,C]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: Equivalence[B, C]): Equivalence[A, C]", "member" : "zio.prelude.Equivalence.>>>", "link" : "zio\/prelude\/Equivalence.html#>>>[C](that:zio.prelude.Equivalence[B,C]):zio.prelude.Equivalence[A,C]", "kind" : "def"}, {"member" : "zio.prelude.Equivalence#<init>", "error" : "unsupported entity"}, {"label" : "from", "tail" : ": (B) => A", "member" : "zio.prelude.Equivalence.from", "link" : "zio\/prelude\/Equivalence.html#from:B=>A", "kind" : "val"}, {"label" : "to", "tail" : ": (A) => B", "member" : "zio.prelude.Equivalence.to", "link" : "zio\/prelude\/Equivalence.html#to:A=>B", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/Equivalence.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Equivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Equivalence.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Equivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Equivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Equivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Equivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Equivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Equivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Equivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Equivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Equivalence.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Equivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Equivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Equivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/prelude\/Equivalence.html", "kind" : "case class"}, {"name" : "zio.prelude.ForEach", "object" : "zio\/prelude\/ForEach$.html", "members_object" : [{"label" : "apply", "tail" : "(forEach: ForEach[F]): ForEach[F]", "member" : "zio.prelude.ForEach.apply", "link" : "zio\/prelude\/ForEach$.html#apply[F[+_]](implicitforEach:zio.prelude.ForEach[F]):zio.prelude.ForEach[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ForEach$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ForEach$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ForEach$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ForEach$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ForEach$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ForEach$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ForEach$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ForEach$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ForEach$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ForEach$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ForEach$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ForEach$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ForEach$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ForEach$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ForEach$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ForEach$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/ForEach.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(arg0: ForEach[G]): ForEach[[+A]F[G[A]]]", "member" : "zio.prelude.ForEach.compose", "link" : "zio\/prelude\/ForEach.html#compose[G[+_]](implicitevidence$29:zio.prelude.ForEach[G]):zio.prelude.ForEach[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(fa: F[A]): F[(A, Int)]", "member" : "zio.prelude.ForEach.zipWithIndex", "link" : "zio\/prelude\/ForEach.html#zipWithIndex[A](fa:F[A]):F[(A,Int)]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(fa: F[A], fb: F[B])(f: (These[A, B]) => C)(both: IdentityBoth[F], either: IdentityEither[F]): F[C]", "member" : "zio.prelude.ForEach.zipAllWith", "link" : "zio\/prelude\/ForEach.html#zipAllWith[A,B,C](fa:F[A],fb:F[B])(f:zio.prelude.These[A,B]=>C)(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(fa: F[A], fb: F[B])(both: IdentityBoth[F], either: IdentityEither[F]): F[These[A, B]]", "member" : "zio.prelude.ForEach.zipAll", "link" : "zio\/prelude\/ForEach.html#zipAll[A,B,C](fa:F[A],fb:F[B])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[zio.prelude.These[A,B]]", "kind" : "def"}, {"label" : "toList", "tail" : "(fa: F[A]): List[A]", "member" : "zio.prelude.ForEach.toList", "link" : "zio\/prelude\/ForEach.html#toList[A](fa:F[A]):List[A]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(fa: F[A]): Chunk[A]", "member" : "zio.prelude.ForEach.toChunk", "link" : "zio\/prelude\/ForEach.html#toChunk[A](fa:F[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A])(ev: Identity[Sum[A]]): A", "member" : "zio.prelude.ForEach.sum", "link" : "zio\/prelude\/ForEach.html#sum[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[A]]):A", "kind" : "def"}, {"label" : "size", "tail" : "(fa: F[A]): Int", "member" : "zio.prelude.ForEach.size", "link" : "zio\/prelude\/ForEach.html#size[A](fa:F[A]):Int", "kind" : "def"}, {"label" : "reverse", "tail" : "(fa: F[A]): F[A]", "member" : "zio.prelude.ForEach.reverse", "link" : "zio\/prelude\/ForEach.html#reverse[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(fa: F[A])(f: (A, A) => A): Option[A]", "member" : "zio.prelude.ForEach.reduceOption", "link" : "zio\/prelude\/ForEach.html#reduceOption[A](fa:F[A])(f:(A,A)=>A):Option[A]", "kind" : "def"}, {"label" : "reduceMapOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): Option[B]", "member" : "zio.prelude.ForEach.reduceMapOption", "link" : "zio\/prelude\/ForEach.html#reduceMapOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$28:zio.prelude.Associative[B]):Option[B]", "kind" : "def"}, {"label" : "reduceIdentity", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.reduceIdentity", "link" : "zio\/prelude\/ForEach.html#reduceIdentity[A](fa:F[A])(implicitevidence$27:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "reduceIdempotent", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceIdempotent", "link" : "zio\/prelude\/ForEach.html#reduceIdempotent[A](fa:F[A])(implicitevidence$25:zio.prelude.Idempotent[A],implicitevidence$26:zio.prelude.Equal[A]):Option[A]", "kind" : "def"}, {"label" : "reduceAssociative", "tail" : "(fa: F[A])(arg0: Associative[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceAssociative", "link" : "zio\/prelude\/ForEach.html#reduceAssociative[A](fa:F[A])(implicitevidence$24:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A])(ev: Identity[Prod[A]]): A", "member" : "zio.prelude.ForEach.product", "link" : "zio\/prelude\/ForEach.html#product[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Prod[A]]):A", "kind" : "def"}, {"label" : "partitionMapM", "tail" : "(fa: F[A])(f: (A) => G[Either[B, C]])(arg0: IdentityFlatten[G], arg1: Covariant[G], both: IdentityBoth[F], either: IdentityEither[F]): G[(F[B], F[C])]", "member" : "zio.prelude.ForEach.partitionMapM", "link" : "zio\/prelude\/ForEach.html#partitionMapM[G[+_],A,B,C](fa:F[A])(f:A=>G[Either[B,C]])(implicitevidence$22:zio.prelude.IdentityFlatten[G],implicitevidence$23:zio.prelude.Covariant[G],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):G[(F[B],F[C])]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(fa: F[A])(f: (A) => Either[B, C])(both: IdentityBoth[F], either: IdentityEither[F]): (F[B], F[C])", "member" : "zio.prelude.ForEach.partitionMap", "link" : "zio\/prelude\/ForEach.html#partitionMap[A,B,C](fa:F[A])(f:A=>Either[B,C])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):(F[B],F[C])", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.nonEmpty", "link" : "zio\/prelude\/ForEach.html#nonEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "minByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.minByOption", "link" : "zio\/prelude\/ForEach.html#minByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$21:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "minOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.minOption", "link" : "zio\/prelude\/ForEach.html#minOption[A](fa:F[A])(implicitevidence$20:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.maxByOption", "link" : "zio\/prelude\/ForEach.html#maxByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$19:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.maxOption", "link" : "zio\/prelude\/ForEach.html#maxOption[A](fa:F[A])(implicitevidence$18:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(fa: F[A])(s: S)(f: (S, A) => (S, B)): (S, F[B])", "member" : "zio.prelude.ForEach.mapAccum", "link" : "zio\/prelude\/ForEach.html#mapAccum[S,A,B](fa:F[A])(s:S)(f:(S,A)=>(S,B)):(S,F[B])", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.ForEach.map", "link" : "zio\/prelude\/ForEach.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.isEmpty", "link" : "zio\/prelude\/ForEach.html#isEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "groupByNonEmptyM", "tail" : "(fa: F[V])(f: (V) => G[K])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Map[K, NonEmptyChunk[V]]]", "member" : "zio.prelude.ForEach.groupByNonEmptyM", "link" : "zio\/prelude\/ForEach.html#groupByNonEmptyM[G[+_],V,K](fa:F[V])(f:V=>G[K])(implicitevidence$16:zio.prelude.IdentityBoth[G],implicitevidence$17:zio.prelude.Covariant[G]):G[Map[K,zio.NonEmptyChunk[V]]]", "kind" : "def"}, {"label" : "groupByNonEmpty", "tail" : "(fa: F[V])(f: (V) => K): Map[K, NonEmptyChunk[V]]", "member" : "zio.prelude.ForEach.groupByNonEmpty", "link" : "zio\/prelude\/ForEach.html#groupByNonEmpty[V,K](fa:F[V])(f:V=>K):Map[K,zio.NonEmptyChunk[V]]", "kind" : "def"}, {"label" : "forEach_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.ForEach.forEach_", "link" : "zio\/prelude\/ForEach.html#forEach_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$14:zio.prelude.IdentityBoth[G],implicitevidence$15:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forall", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.forall", "link" : "zio\/prelude\/ForEach.html#forall[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foldRightM", "tail" : "(fa: F[A])(s: S)(f: (A, S) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldRightM", "link" : "zio\/prelude\/ForEach.html#foldRightM[G[+_],S,A](fa:F[A])(s:S)(f:(A,S)=>G[S])(implicitevidence$12:zio.prelude.IdentityFlatten[G],implicitevidence$13:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(fa: F[A])(s: S)(f: (A, S) => S): S", "member" : "zio.prelude.ForEach.foldRight", "link" : "zio\/prelude\/ForEach.html#foldRight[S,A](fa:F[A])(s:S)(f:(A,S)=>S):S", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: Covariant[G], arg1: IdentityFlatten[G], arg2: Identity[B]): G[B]", "member" : "zio.prelude.ForEach.foldMapM", "link" : "zio\/prelude\/ForEach.html#foldMapM[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$9:zio.prelude.Covariant[G],implicitevidence$10:zio.prelude.IdentityFlatten[G],implicitevidence$11:zio.prelude.Identity[B]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Identity[B]): B", "member" : "zio.prelude.ForEach.foldMap", "link" : "zio\/prelude\/ForEach.html#foldMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$8:zio.prelude.Identity[B]):B", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(fa: F[A])(s: S)(f: (S, A) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldLeftM", "link" : "zio\/prelude\/ForEach.html#foldLeftM[G[+_],S,A](fa:F[A])(s:S)(f:(S,A)=>G[S])(implicitevidence$6:zio.prelude.IdentityFlatten[G],implicitevidence$7:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(fa: F[A])(s: S)(f: (S, A) => S): S", "member" : "zio.prelude.ForEach.foldLeft", "link" : "zio\/prelude\/ForEach.html#foldLeft[S,A](fa:F[A])(s:S)(f:(S,A)=>S):S", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.fold", "link" : "zio\/prelude\/ForEach.html#fold[A](fa:F[A])(implicitevidence$5:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "flip", "tail" : "(fa: F[G[A]])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.ForEach.flip", "link" : "zio\/prelude\/ForEach.html#flip[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.IdentityBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(fa: F[A])(f: (A) => Boolean): Option[A]", "member" : "zio.prelude.ForEach.find", "link" : "zio\/prelude\/ForEach.html#find[A](fa:F[A])(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.exists", "link" : "zio\/prelude\/ForEach.html#exists[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(fa: F[A])(f: (A) => Boolean): Int", "member" : "zio.prelude.ForEach.count", "link" : "zio\/prelude\/ForEach.html#count[A](fa:F[A])(f:A=>Boolean):Int", "kind" : "def"}, {"label" : "contains", "tail" : "(fa: F[A])(a: A1)(A: Equal[A1]): Boolean", "member" : "zio.prelude.ForEach.contains", "link" : "zio\/prelude\/ForEach.html#contains[A,A1>:A](fa:F[A])(a:A1)(implicitA:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/ForEach.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/ForEach.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/ForEach.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/ForEach.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/ForEach.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/ForEach.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/ForEach.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/ForEach.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/ForEach.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ForEach.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ForEach.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ForEach.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ForEach.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ForEach.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ForEach.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ForEach.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEach.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ForEach.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ForEach.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ForEach.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ForEach.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ForEach.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ForEach.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ForEach.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ForEach.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ForEach.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forEach", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.ForEach.forEach", "link" : "zio\/prelude\/ForEach.html#forEach[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$1:zio.prelude.IdentityBoth[G],implicitevidence$2:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "abstract def"}], "shortDescription" : "ForEach is an abstraction that describes the ability to iterate overa collection, performing an effect for each element in the collection andreturning a collection with the same shape in the context of the effect."}, {"name" : "zio.prelude.ForEachSyntax", "trait" : "zio\/prelude\/ForEachSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "FlipOps", "tail" : "", "member" : "zio.prelude.ForEachSyntax.FlipOps", "link" : "zio\/prelude\/ForEachSyntax.html#FlipOps[F[+_],G[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ForEachOps", "tail" : "", "member" : "zio.prelude.ForEachSyntax.ForEachOps", "link" : "zio\/prelude\/ForEachSyntax.html#ForEachOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ForEachSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ForEachSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ForEachSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ForEachSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ForEachSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ForEachSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ForEachSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ForEachSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ForEachSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ForEachSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ForEachSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ForEachSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ForEachSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ForEachSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ForEachSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ForEachSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ForEachSyntax.FlipOps", "shortDescription" : "Provides infix syntax for flip.", "members_class" : [{"label" : "flip", "tail" : "(forEach: ForEach[F], identityBoth: IdentityBoth[G], covariant: Covariant[G]): G[F[A]]", "member" : "zio.prelude.ForEachSyntax.FlipOps.flip", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#flip[B](implicitforEach:zio.prelude.ForEach[F],implicitidentityBoth:zio.prelude.IdentityBoth[G],implicitcovariant:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"member" : "zio.prelude.ForEachSyntax.FlipOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ForEachSyntax$FlipOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ForEachSyntax$FlipOps.html", "kind" : "class"}, {"name" : "zio.prelude.ForEachSyntax.ForEachOps", "shortDescription" : "Provides infix syntax for traversing collections.", "members_class" : [{"label" : "zipWithIndex", "tail" : "(F: ForEach[F]): F[(A, Int)]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.zipWithIndex", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#zipWithIndex(implicitF:zio.prelude.ForEach[F]):F[(A,Int)]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(that: F[B])(f: (These[A, B]) => C)(F: ForEach[F], both: IdentityBoth[F], either: IdentityEither[F]): F[C]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.zipAllWith", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#zipAllWith[B,C](that:F[B])(f:zio.prelude.These[A,B]=>C)(implicitF:zio.prelude.ForEach[F],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(that: F[B])(F: ForEach[F], both: IdentityBoth[F], either: IdentityEither[F]): F[These[A, B]]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.zipAll", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#zipAll[B](that:F[B])(implicitF:zio.prelude.ForEach[F],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[zio.prelude.These[A,B]]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(F: ForEach[F]): Chunk[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.toChunk", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#toChunk(implicitF:zio.prelude.ForEach[F]):zio.Chunk[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(A: Identity[Sum[A]], F: ForEach[F]): A", "member" : "zio.prelude.ForEachSyntax.ForEachOps.sum", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#sum(implicitA:zio.prelude.Identity[zio.prelude.newtypes.Sum[A]],implicitF:zio.prelude.ForEach[F]):A", "kind" : "def"}, {"label" : "size", "tail" : "(F: ForEach[F]): Int", "member" : "zio.prelude.ForEachSyntax.ForEachOps.size", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#size(implicitF:zio.prelude.ForEach[F]):Int", "kind" : "def"}, {"label" : "reverse", "tail" : "(F: ForEach[F]): F[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reverse", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reverse(implicitF:zio.prelude.ForEach[F]):F[A]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(f: (A, A) => A)(F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reduceOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reduceOption(f:(A,A)=>A)(implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "reduceMapOption", "tail" : "(f: (A) => B)(arg0: Associative[B], F: ForEach[F]): Option[B]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reduceMapOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reduceMapOption[B](f:A=>B)(implicitevidence$46:zio.prelude.Associative[B],implicitF:zio.prelude.ForEach[F]):Option[B]", "kind" : "def"}, {"label" : "product", "tail" : "(A: Identity[Prod[A]], F: ForEach[F]): A", "member" : "zio.prelude.ForEachSyntax.ForEachOps.product", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#product(implicitA:zio.prelude.Identity[zio.prelude.newtypes.Prod[A]],implicitF:zio.prelude.ForEach[F]):A", "kind" : "def"}, {"label" : "reduceIdentity", "tail" : "(F: ForEach[F], A: Identity[A]): A", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reduceIdentity", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reduceIdentity(implicitF:zio.prelude.ForEach[F],implicitA:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "reduceIdempotent", "tail" : "(F: ForEach[F], ia: Idempotent[A], ea: Equal[A]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reduceIdempotent", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reduceIdempotent(implicitF:zio.prelude.ForEach[F],implicitia:zio.prelude.Idempotent[A],implicitea:zio.prelude.Equal[A]):Option[A]", "kind" : "def"}, {"label" : "reduceAssociative", "tail" : "(F: ForEach[F], A: Associative[A]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.reduceAssociative", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#reduceAssociative(implicitF:zio.prelude.ForEach[F],implicitA:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(F: ForEach[F]): Boolean", "member" : "zio.prelude.ForEachSyntax.ForEachOps.nonEmpty", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#nonEmpty(implicitF:zio.prelude.ForEach[F]):Boolean", "kind" : "def"}, {"label" : "minByOption", "tail" : "(f: (A) => B)(arg0: Ord[B], F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.minByOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#minByOption[B](f:A=>B)(implicitevidence$45:zio.prelude.Ord[B],implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "minOption", "tail" : "(A: Ord[A], F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.minOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#minOption(implicitA:zio.prelude.Ord[A],implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(f: (A) => B)(arg0: Ord[B], F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.maxByOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#maxByOption[B](f:A=>B)(implicitevidence$44:zio.prelude.Ord[B],implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(A: Ord[A], F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.maxOption", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#maxOption(implicitA:zio.prelude.Ord[A],implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(s: S)(f: (S, A) => (S, B))(F: ForEach[F]): (S, F[B])", "member" : "zio.prelude.ForEachSyntax.ForEachOps.mapAccum", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#mapAccum[S,B](s:S)(f:(S,A)=>(S,B))(implicitF:zio.prelude.ForEach[F]):(S,F[B])", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(F: ForEach[F]): Boolean", "member" : "zio.prelude.ForEachSyntax.ForEachOps.isEmpty", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#isEmpty(implicitF:zio.prelude.ForEach[F]):Boolean", "kind" : "def"}, {"label" : "forEach_", "tail" : "(f: (A) => G[Any])(arg0: IdentityBoth[G], arg1: Covariant[G], F: ForEach[F]): G[Unit]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.forEach_", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#forEach_[G[+_]](f:A=>G[Any])(implicitevidence$42:zio.prelude.IdentityBoth[G],implicitevidence$43:zio.prelude.Covariant[G],implicitF:zio.prelude.ForEach[F]):G[Unit]", "kind" : "def"}, {"label" : "forall", "tail" : "(f: (A) => Boolean)(F: ForEach[F]): Boolean", "member" : "zio.prelude.ForEachSyntax.ForEachOps.forall", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#forall(f:A=>Boolean)(implicitF:zio.prelude.ForEach[F]):Boolean", "kind" : "def"}, {"label" : "foldRightM", "tail" : "(s: S)(f: (A, S) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G], F: ForEach[F]): G[S]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldRightM", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldRightM[G[+_],S](s:S)(f:(A,S)=>G[S])(implicitevidence$40:zio.prelude.IdentityFlatten[G],implicitevidence$41:zio.prelude.Covariant[G],implicitF:zio.prelude.ForEach[F]):G[S]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(s: S)(f: (A, S) => S)(F: ForEach[F]): S", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldRight", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldRight[S](s:S)(f:(A,S)=>S)(implicitF:zio.prelude.ForEach[F]):S", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(f: (A) => G[B])(arg0: Covariant[G], arg1: IdentityFlatten[G], arg2: Identity[B], F: ForEach[F]): G[B]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldMapM", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldMapM[G[+_],B](f:A=>G[B])(implicitevidence$37:zio.prelude.Covariant[G],implicitevidence$38:zio.prelude.IdentityFlatten[G],implicitevidence$39:zio.prelude.Identity[B],implicitF:zio.prelude.ForEach[F]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(f: (A) => B)(arg0: Identity[B], F: ForEach[F]): B", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldMap", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldMap[B](f:A=>B)(implicitevidence$36:zio.prelude.Identity[B],implicitF:zio.prelude.ForEach[F]):B", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(s: S)(f: (S, A) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G], F: ForEach[F]): G[S]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldLeftM", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldLeftM[G[+_],S](s:S)(f:(S,A)=>G[S])(implicitevidence$34:zio.prelude.IdentityFlatten[G],implicitevidence$35:zio.prelude.Covariant[G],implicitF:zio.prelude.ForEach[F]):G[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(s: S)(f: (S, A) => S)(F: ForEach[F]): S", "member" : "zio.prelude.ForEachSyntax.ForEachOps.foldLeft", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#foldLeft[S](s:S)(f:(S,A)=>S)(implicitF:zio.prelude.ForEach[F]):S", "kind" : "def"}, {"label" : "find", "tail" : "(f: (A) => Boolean)(F: ForEach[F]): Option[A]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.find", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#find(f:A=>Boolean)(implicitF:zio.prelude.ForEach[F]):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(f: (A) => Boolean)(F: ForEach[F]): Boolean", "member" : "zio.prelude.ForEachSyntax.ForEachOps.exists", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#exists(f:A=>Boolean)(implicitF:zio.prelude.ForEach[F]):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(f: (A) => Boolean)(F: ForEach[F]): Int", "member" : "zio.prelude.ForEachSyntax.ForEachOps.count", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#count(f:A=>Boolean)(implicitF:zio.prelude.ForEach[F]):Int", "kind" : "def"}, {"label" : "contains", "tail" : "(a: A1)(A: Equal[A1], F: ForEach[F]): Boolean", "member" : "zio.prelude.ForEachSyntax.ForEachOps.contains", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#contains[A1>:A](a:A1)(implicitA:zio.prelude.Equal[A1],implicitF:zio.prelude.ForEach[F]):Boolean", "kind" : "def"}, {"label" : "forEach", "tail" : "(f: (A) => G[B])(arg0: IdentityBoth[G], arg1: Covariant[G], F: ForEach[F]): G[F[B]]", "member" : "zio.prelude.ForEachSyntax.ForEachOps.forEach", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#forEach[G[+_],B](f:A=>G[B])(implicitevidence$32:zio.prelude.IdentityBoth[G],implicitevidence$33:zio.prelude.Covariant[G],implicitF:zio.prelude.ForEach[F]):G[F[B]]", "kind" : "def"}, {"member" : "zio.prelude.ForEachSyntax.ForEachOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ForEachSyntax$ForEachOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ForEachSyntax$ForEachOps.html", "kind" : "class"}, {"name" : "zio.prelude.Hash", "object" : "zio\/prelude\/Hash$.html", "members_object" : [{"label" : "VectorHash", "tail" : "(arg0: Hash[A]): Hash[Vector[A]]", "member" : "zio.prelude.Hash.VectorHash", "link" : "zio\/prelude\/Hash$.html#VectorHash[A](implicitevidence$260:zio.prelude.Hash[A]):zio.prelude.Hash[Vector[A]]", "kind" : "implicit def"}, {"label" : "Tuple22Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q], arg17: Hash[R], arg18: Hash[S], arg19: Hash[T], arg20: Hash[U], arg21: Hash[V]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Hash.Tuple22Hash", "link" : "zio\/prelude\/Hash$.html#Tuple22Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$238:zio.prelude.Hash[A],implicitevidence$239:zio.prelude.Hash[B],implicitevidence$240:zio.prelude.Hash[C],implicitevidence$241:zio.prelude.Hash[D],implicitevidence$242:zio.prelude.Hash[E],implicitevidence$243:zio.prelude.Hash[F],implicitevidence$244:zio.prelude.Hash[G],implicitevidence$245:zio.prelude.Hash[H],implicitevidence$246:zio.prelude.Hash[I],implicitevidence$247:zio.prelude.Hash[J],implicitevidence$248:zio.prelude.Hash[K],implicitevidence$249:zio.prelude.Hash[L],implicitevidence$250:zio.prelude.Hash[M],implicitevidence$251:zio.prelude.Hash[N],implicitevidence$252:zio.prelude.Hash[O],implicitevidence$253:zio.prelude.Hash[P],implicitevidence$254:zio.prelude.Hash[Q],implicitevidence$255:zio.prelude.Hash[R],implicitevidence$256:zio.prelude.Hash[S],implicitevidence$257:zio.prelude.Hash[T],implicitevidence$258:zio.prelude.Hash[U],implicitevidence$259:zio.prelude.Hash[V]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q], arg17: Hash[R], arg18: Hash[S], arg19: Hash[T], arg20: Hash[U]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Hash.Tuple21Hash", "link" : "zio\/prelude\/Hash$.html#Tuple21Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$217:zio.prelude.Hash[A],implicitevidence$218:zio.prelude.Hash[B],implicitevidence$219:zio.prelude.Hash[C],implicitevidence$220:zio.prelude.Hash[D],implicitevidence$221:zio.prelude.Hash[E],implicitevidence$222:zio.prelude.Hash[F],implicitevidence$223:zio.prelude.Hash[G],implicitevidence$224:zio.prelude.Hash[H],implicitevidence$225:zio.prelude.Hash[I],implicitevidence$226:zio.prelude.Hash[J],implicitevidence$227:zio.prelude.Hash[K],implicitevidence$228:zio.prelude.Hash[L],implicitevidence$229:zio.prelude.Hash[M],implicitevidence$230:zio.prelude.Hash[N],implicitevidence$231:zio.prelude.Hash[O],implicitevidence$232:zio.prelude.Hash[P],implicitevidence$233:zio.prelude.Hash[Q],implicitevidence$234:zio.prelude.Hash[R],implicitevidence$235:zio.prelude.Hash[S],implicitevidence$236:zio.prelude.Hash[T],implicitevidence$237:zio.prelude.Hash[U]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q], arg17: Hash[R], arg18: Hash[S], arg19: Hash[T]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Hash.Tuple20Hash", "link" : "zio\/prelude\/Hash$.html#Tuple20Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$197:zio.prelude.Hash[A],implicitevidence$198:zio.prelude.Hash[B],implicitevidence$199:zio.prelude.Hash[C],implicitevidence$200:zio.prelude.Hash[D],implicitevidence$201:zio.prelude.Hash[E],implicitevidence$202:zio.prelude.Hash[F],implicitevidence$203:zio.prelude.Hash[G],implicitevidence$204:zio.prelude.Hash[H],implicitevidence$205:zio.prelude.Hash[I],implicitevidence$206:zio.prelude.Hash[J],implicitevidence$207:zio.prelude.Hash[K],implicitevidence$208:zio.prelude.Hash[L],implicitevidence$209:zio.prelude.Hash[M],implicitevidence$210:zio.prelude.Hash[N],implicitevidence$211:zio.prelude.Hash[O],implicitevidence$212:zio.prelude.Hash[P],implicitevidence$213:zio.prelude.Hash[Q],implicitevidence$214:zio.prelude.Hash[R],implicitevidence$215:zio.prelude.Hash[S],implicitevidence$216:zio.prelude.Hash[T]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q], arg17: Hash[R], arg18: Hash[S]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Hash.Tuple19Hash", "link" : "zio\/prelude\/Hash$.html#Tuple19Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$178:zio.prelude.Hash[A],implicitevidence$179:zio.prelude.Hash[B],implicitevidence$180:zio.prelude.Hash[C],implicitevidence$181:zio.prelude.Hash[D],implicitevidence$182:zio.prelude.Hash[E],implicitevidence$183:zio.prelude.Hash[F],implicitevidence$184:zio.prelude.Hash[G],implicitevidence$185:zio.prelude.Hash[H],implicitevidence$186:zio.prelude.Hash[I],implicitevidence$187:zio.prelude.Hash[J],implicitevidence$188:zio.prelude.Hash[K],implicitevidence$189:zio.prelude.Hash[L],implicitevidence$190:zio.prelude.Hash[M],implicitevidence$191:zio.prelude.Hash[N],implicitevidence$192:zio.prelude.Hash[O],implicitevidence$193:zio.prelude.Hash[P],implicitevidence$194:zio.prelude.Hash[Q],implicitevidence$195:zio.prelude.Hash[R],implicitevidence$196:zio.prelude.Hash[S]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q], arg17: Hash[R]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Hash.Tuple18Hash", "link" : "zio\/prelude\/Hash$.html#Tuple18Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$160:zio.prelude.Hash[A],implicitevidence$161:zio.prelude.Hash[B],implicitevidence$162:zio.prelude.Hash[C],implicitevidence$163:zio.prelude.Hash[D],implicitevidence$164:zio.prelude.Hash[E],implicitevidence$165:zio.prelude.Hash[F],implicitevidence$166:zio.prelude.Hash[G],implicitevidence$167:zio.prelude.Hash[H],implicitevidence$168:zio.prelude.Hash[I],implicitevidence$169:zio.prelude.Hash[J],implicitevidence$170:zio.prelude.Hash[K],implicitevidence$171:zio.prelude.Hash[L],implicitevidence$172:zio.prelude.Hash[M],implicitevidence$173:zio.prelude.Hash[N],implicitevidence$174:zio.prelude.Hash[O],implicitevidence$175:zio.prelude.Hash[P],implicitevidence$176:zio.prelude.Hash[Q],implicitevidence$177:zio.prelude.Hash[R]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P], arg16: Hash[Q]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Hash.Tuple17Hash", "link" : "zio\/prelude\/Hash$.html#Tuple17Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$143:zio.prelude.Hash[A],implicitevidence$144:zio.prelude.Hash[B],implicitevidence$145:zio.prelude.Hash[C],implicitevidence$146:zio.prelude.Hash[D],implicitevidence$147:zio.prelude.Hash[E],implicitevidence$148:zio.prelude.Hash[F],implicitevidence$149:zio.prelude.Hash[G],implicitevidence$150:zio.prelude.Hash[H],implicitevidence$151:zio.prelude.Hash[I],implicitevidence$152:zio.prelude.Hash[J],implicitevidence$153:zio.prelude.Hash[K],implicitevidence$154:zio.prelude.Hash[L],implicitevidence$155:zio.prelude.Hash[M],implicitevidence$156:zio.prelude.Hash[N],implicitevidence$157:zio.prelude.Hash[O],implicitevidence$158:zio.prelude.Hash[P],implicitevidence$159:zio.prelude.Hash[Q]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O], arg15: Hash[P]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Hash.Tuple16Hash", "link" : "zio\/prelude\/Hash$.html#Tuple16Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$127:zio.prelude.Hash[A],implicitevidence$128:zio.prelude.Hash[B],implicitevidence$129:zio.prelude.Hash[C],implicitevidence$130:zio.prelude.Hash[D],implicitevidence$131:zio.prelude.Hash[E],implicitevidence$132:zio.prelude.Hash[F],implicitevidence$133:zio.prelude.Hash[G],implicitevidence$134:zio.prelude.Hash[H],implicitevidence$135:zio.prelude.Hash[I],implicitevidence$136:zio.prelude.Hash[J],implicitevidence$137:zio.prelude.Hash[K],implicitevidence$138:zio.prelude.Hash[L],implicitevidence$139:zio.prelude.Hash[M],implicitevidence$140:zio.prelude.Hash[N],implicitevidence$141:zio.prelude.Hash[O],implicitevidence$142:zio.prelude.Hash[P]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N], arg14: Hash[O]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Hash.Tuple15Hash", "link" : "zio\/prelude\/Hash$.html#Tuple15Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$112:zio.prelude.Hash[A],implicitevidence$113:zio.prelude.Hash[B],implicitevidence$114:zio.prelude.Hash[C],implicitevidence$115:zio.prelude.Hash[D],implicitevidence$116:zio.prelude.Hash[E],implicitevidence$117:zio.prelude.Hash[F],implicitevidence$118:zio.prelude.Hash[G],implicitevidence$119:zio.prelude.Hash[H],implicitevidence$120:zio.prelude.Hash[I],implicitevidence$121:zio.prelude.Hash[J],implicitevidence$122:zio.prelude.Hash[K],implicitevidence$123:zio.prelude.Hash[L],implicitevidence$124:zio.prelude.Hash[M],implicitevidence$125:zio.prelude.Hash[N],implicitevidence$126:zio.prelude.Hash[O]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M], arg13: Hash[N]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Hash.Tuple14Hash", "link" : "zio\/prelude\/Hash$.html#Tuple14Hash[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$98:zio.prelude.Hash[A],implicitevidence$99:zio.prelude.Hash[B],implicitevidence$100:zio.prelude.Hash[C],implicitevidence$101:zio.prelude.Hash[D],implicitevidence$102:zio.prelude.Hash[E],implicitevidence$103:zio.prelude.Hash[F],implicitevidence$104:zio.prelude.Hash[G],implicitevidence$105:zio.prelude.Hash[H],implicitevidence$106:zio.prelude.Hash[I],implicitevidence$107:zio.prelude.Hash[J],implicitevidence$108:zio.prelude.Hash[K],implicitevidence$109:zio.prelude.Hash[L],implicitevidence$110:zio.prelude.Hash[M],implicitevidence$111:zio.prelude.Hash[N]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L], arg12: Hash[M]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Hash.Tuple13Hash", "link" : "zio\/prelude\/Hash$.html#Tuple13Hash[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$85:zio.prelude.Hash[A],implicitevidence$86:zio.prelude.Hash[B],implicitevidence$87:zio.prelude.Hash[C],implicitevidence$88:zio.prelude.Hash[D],implicitevidence$89:zio.prelude.Hash[E],implicitevidence$90:zio.prelude.Hash[F],implicitevidence$91:zio.prelude.Hash[G],implicitevidence$92:zio.prelude.Hash[H],implicitevidence$93:zio.prelude.Hash[I],implicitevidence$94:zio.prelude.Hash[J],implicitevidence$95:zio.prelude.Hash[K],implicitevidence$96:zio.prelude.Hash[L],implicitevidence$97:zio.prelude.Hash[M]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K], arg11: Hash[L]): Hash[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Hash.Tuple12Hash", "link" : "zio\/prelude\/Hash$.html#Tuple12Hash[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$73:zio.prelude.Hash[A],implicitevidence$74:zio.prelude.Hash[B],implicitevidence$75:zio.prelude.Hash[C],implicitevidence$76:zio.prelude.Hash[D],implicitevidence$77:zio.prelude.Hash[E],implicitevidence$78:zio.prelude.Hash[F],implicitevidence$79:zio.prelude.Hash[G],implicitevidence$80:zio.prelude.Hash[H],implicitevidence$81:zio.prelude.Hash[I],implicitevidence$82:zio.prelude.Hash[J],implicitevidence$83:zio.prelude.Hash[K],implicitevidence$84:zio.prelude.Hash[L]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J], arg10: Hash[K]): Hash[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Hash.Tuple11Hash", "link" : "zio\/prelude\/Hash$.html#Tuple11Hash[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$62:zio.prelude.Hash[A],implicitevidence$63:zio.prelude.Hash[B],implicitevidence$64:zio.prelude.Hash[C],implicitevidence$65:zio.prelude.Hash[D],implicitevidence$66:zio.prelude.Hash[E],implicitevidence$67:zio.prelude.Hash[F],implicitevidence$68:zio.prelude.Hash[G],implicitevidence$69:zio.prelude.Hash[H],implicitevidence$70:zio.prelude.Hash[I],implicitevidence$71:zio.prelude.Hash[J],implicitevidence$72:zio.prelude.Hash[K]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I], arg9: Hash[J]): Hash[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Hash.Tuple10Hash", "link" : "zio\/prelude\/Hash$.html#Tuple10Hash[A,B,C,D,E,F,G,H,I,J](implicitevidence$52:zio.prelude.Hash[A],implicitevidence$53:zio.prelude.Hash[B],implicitevidence$54:zio.prelude.Hash[C],implicitevidence$55:zio.prelude.Hash[D],implicitevidence$56:zio.prelude.Hash[E],implicitevidence$57:zio.prelude.Hash[F],implicitevidence$58:zio.prelude.Hash[G],implicitevidence$59:zio.prelude.Hash[H],implicitevidence$60:zio.prelude.Hash[I],implicitevidence$61:zio.prelude.Hash[J]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H], arg8: Hash[I]): Hash[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Hash.Tuple9Hash", "link" : "zio\/prelude\/Hash$.html#Tuple9Hash[A,B,C,D,E,F,G,H,I](implicitevidence$43:zio.prelude.Hash[A],implicitevidence$44:zio.prelude.Hash[B],implicitevidence$45:zio.prelude.Hash[C],implicitevidence$46:zio.prelude.Hash[D],implicitevidence$47:zio.prelude.Hash[E],implicitevidence$48:zio.prelude.Hash[F],implicitevidence$49:zio.prelude.Hash[G],implicitevidence$50:zio.prelude.Hash[H],implicitevidence$51:zio.prelude.Hash[I]):zio.prelude.Hash[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G], arg7: Hash[H]): Hash[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Hash.Tuple8Hash", "link" : "zio\/prelude\/Hash$.html#Tuple8Hash[A,B,C,D,E,F,G,H](implicitevidence$35:zio.prelude.Hash[A],implicitevidence$36:zio.prelude.Hash[B],implicitevidence$37:zio.prelude.Hash[C],implicitevidence$38:zio.prelude.Hash[D],implicitevidence$39:zio.prelude.Hash[E],implicitevidence$40:zio.prelude.Hash[F],implicitevidence$41:zio.prelude.Hash[G],implicitevidence$42:zio.prelude.Hash[H]):zio.prelude.Hash[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F], arg6: Hash[G]): Hash[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Hash.Tuple7Hash", "link" : "zio\/prelude\/Hash$.html#Tuple7Hash[A,B,C,D,E,F,G](implicitevidence$28:zio.prelude.Hash[A],implicitevidence$29:zio.prelude.Hash[B],implicitevidence$30:zio.prelude.Hash[C],implicitevidence$31:zio.prelude.Hash[D],implicitevidence$32:zio.prelude.Hash[E],implicitevidence$33:zio.prelude.Hash[F],implicitevidence$34:zio.prelude.Hash[G]):zio.prelude.Hash[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E], arg5: Hash[F]): Hash[(A, B, C, D, E, F)]", "member" : "zio.prelude.Hash.Tuple6Hash", "link" : "zio\/prelude\/Hash$.html#Tuple6Hash[A,B,C,D,E,F](implicitevidence$22:zio.prelude.Hash[A],implicitevidence$23:zio.prelude.Hash[B],implicitevidence$24:zio.prelude.Hash[C],implicitevidence$25:zio.prelude.Hash[D],implicitevidence$26:zio.prelude.Hash[E],implicitevidence$27:zio.prelude.Hash[F]):zio.prelude.Hash[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D], arg4: Hash[E]): Hash[(A, B, C, D, E)]", "member" : "zio.prelude.Hash.Tuple5Hash", "link" : "zio\/prelude\/Hash$.html#Tuple5Hash[A,B,C,D,E](implicitevidence$17:zio.prelude.Hash[A],implicitevidence$18:zio.prelude.Hash[B],implicitevidence$19:zio.prelude.Hash[C],implicitevidence$20:zio.prelude.Hash[D],implicitevidence$21:zio.prelude.Hash[E]):zio.prelude.Hash[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C], arg3: Hash[D]): Hash[(A, B, C, D)]", "member" : "zio.prelude.Hash.Tuple4Hash", "link" : "zio\/prelude\/Hash$.html#Tuple4Hash[A,B,C,D](implicitevidence$13:zio.prelude.Hash[A],implicitevidence$14:zio.prelude.Hash[B],implicitevidence$15:zio.prelude.Hash[C],implicitevidence$16:zio.prelude.Hash[D]):zio.prelude.Hash[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B], arg2: Hash[C]): Hash[(A, B, C)]", "member" : "zio.prelude.Hash.Tuple3Hash", "link" : "zio\/prelude\/Hash$.html#Tuple3Hash[A,B,C](implicitevidence$10:zio.prelude.Hash[A],implicitevidence$11:zio.prelude.Hash[B],implicitevidence$12:zio.prelude.Hash[C]):zio.prelude.Hash[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Hash", "tail" : "(arg0: Hash[A], arg1: Hash[B]): Hash[(A, B)]", "member" : "zio.prelude.Hash.Tuple2Hash", "link" : "zio\/prelude\/Hash$.html#Tuple2Hash[A,B](implicitevidence$8:zio.prelude.Hash[A],implicitevidence$9:zio.prelude.Hash[B]):zio.prelude.Hash[(A,B)]", "kind" : "implicit def"}, {"label" : "OptionHash", "tail" : "(arg0: Hash[A]): Hash[Option[A]]", "member" : "zio.prelude.Hash.OptionHash", "link" : "zio\/prelude\/Hash$.html#OptionHash[A](implicitevidence$7:zio.prelude.Hash[A]):zio.prelude.Hash[Option[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyChunkHash", "tail" : "(arg0: Hash[A]): Hash[NonEmptyChunk[A]]", "member" : "zio.prelude.Hash.NonEmptyChunkHash", "link" : "zio\/prelude\/Hash$.html#NonEmptyChunkHash[A](implicitevidence$6:zio.prelude.Hash[A]):zio.prelude.Hash[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "MapHash", "tail" : "(arg0: Hash[B]): Hash[Map[A, B]]", "member" : "zio.prelude.Hash.MapHash", "link" : "zio\/prelude\/Hash$.html#MapHash[A,B](implicitevidence$5:zio.prelude.Hash[B]):zio.prelude.Hash[Map[A,B]]", "kind" : "implicit def"}, {"label" : "ListHash", "tail" : "(arg0: Hash[A]): Hash[List[A]]", "member" : "zio.prelude.Hash.ListHash", "link" : "zio\/prelude\/Hash$.html#ListHash[A](implicitevidence$4:zio.prelude.Hash[A]):zio.prelude.Hash[List[A]]", "kind" : "implicit def"}, {"label" : "EitherHash", "tail" : "(arg0: Hash[A], arg1: Hash[B]): Hash[Either[A, B]]", "member" : "zio.prelude.Hash.EitherHash", "link" : "zio\/prelude\/Hash$.html#EitherHash[A,B](implicitevidence$2:zio.prelude.Hash[A],implicitevidence$3:zio.prelude.Hash[B]):zio.prelude.Hash[Either[A,B]]", "kind" : "implicit def"}, {"label" : "DeriveHash", "tail" : "(derive: Derive[F, Hash], hash: Hash[A]): Hash[F[A]]", "member" : "zio.prelude.Hash.DeriveHash", "link" : "zio\/prelude\/Hash$.html#DeriveHash[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Hash],implicithash:zio.prelude.Hash[A]):zio.prelude.Hash[F[A]]", "kind" : "implicit def"}, {"label" : "ChunkHash", "tail" : "(arg0: Hash[A]): Hash[Chunk[A]]", "member" : "zio.prelude.Hash.ChunkHash", "link" : "zio\/prelude\/Hash$.html#ChunkHash[A](implicitevidence$1:zio.prelude.Hash[A]):zio.prelude.Hash[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "default", "tail" : "(): Hash[A]", "member" : "zio.prelude.Hash.default", "link" : "zio\/prelude\/Hash$.html#default[A]:zio.prelude.Hash[A]", "kind" : "def"}, {"label" : "makeFrom", "tail" : "(hash0: (A) => Int, equal0: Equal[A]): Hash[A]", "member" : "zio.prelude.Hash.makeFrom", "link" : "zio\/prelude\/Hash$.html#makeFrom[A](hash0:A=>Int,equal0:zio.prelude.Equal[A]):zio.prelude.Hash[A]", "kind" : "def"}, {"label" : "make", "tail" : "(hash0: (A) => Int, equal0: (A, A) => Boolean): Hash[A]", "member" : "zio.prelude.Hash.make", "link" : "zio\/prelude\/Hash$.html#make[A](hash0:A=>Int,equal0:(A,A)=>Boolean):zio.prelude.Hash[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(hash: Hash[A]): Hash[A]", "member" : "zio.prelude.Hash.apply", "link" : "zio\/prelude\/Hash$.html#apply[A](implicithash:zio.prelude.Hash[A]):zio.prelude.Hash[A]", "kind" : "def"}, {"label" : "HashContravariant", "tail" : ": Contravariant[Hash]", "member" : "zio.prelude.Hash.HashContravariant", "link" : "zio\/prelude\/Hash$.html#HashContravariant:zio.prelude.Contravariant[zio.prelude.Hash]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Hash$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Hash$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Hash$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Hash$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Hash$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Hash$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Hash$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Hash$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Hash$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Hash$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Hash$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Hash$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Hash$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Hash$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Hash$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Hash$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Hash.html", "kind" : "trait", "members_trait" : [{"label" : "contramap", "tail" : "(f: (B) => A): Hash[B]", "member" : "zio.prelude.Hash.contramap", "link" : "zio\/prelude\/Hash.html#contramap[B](f:B=>A):zio.prelude.Hash[B]", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/Hash.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/Hash.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/Hash.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/Hash.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/Hash.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/Hash.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/Hash.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Hash.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Hash.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Hash.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Hash.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Hash.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Hash.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Hash.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Hash.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Hash.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Hash.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Hash.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Hash.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Hash.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Hash.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Hash.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Hash.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Hash.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Hash.checkEqual", "link" : "zio\/prelude\/Hash.html#checkEqual(l:A,r:A):Boolean", "kind" : "abstract def"}, {"label" : "hash", "tail" : "(a: A): Int", "member" : "zio.prelude.Hash.hash", "link" : "zio\/prelude\/Hash.html#hash(a:A):Int", "kind" : "abstract def"}], "shortDescription" : "Hash[A] provides implicit evidence that a value of type A can be hashed."}, {"name" : "zio.prelude.HashSyntax", "trait" : "zio\/prelude\/HashSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "HashOps", "tail" : "", "member" : "zio.prelude.HashSyntax.HashOps", "link" : "zio\/prelude\/HashSyntax.html#HashOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/HashSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/HashSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/HashSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/HashSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/HashSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/HashSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/HashSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/HashSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/HashSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/HashSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/HashSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/HashSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/HashSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/HashSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/HashSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/HashSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.HashSyntax.HashOps", "shortDescription" : "Provides infix syntax for hashing a value.", "members_class" : [{"label" : "##", "tail" : "(hash: Hash[A]): Int", "member" : "zio.prelude.HashSyntax.HashOps.##", "link" : "zio\/prelude\/HashSyntax$HashOps.html###(implicithash:zio.prelude.Hash[A]):Int", "kind" : "def"}, {"label" : "hash", "tail" : "(hash: Hash[A]): Int", "member" : "zio.prelude.HashSyntax.HashOps.hash", "link" : "zio\/prelude\/HashSyntax$HashOps.html#hash(implicithash:zio.prelude.Hash[A]):Int", "kind" : "def"}, {"member" : "zio.prelude.HashSyntax.HashOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/HashSyntax$HashOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/HashSyntax$HashOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/HashSyntax$HashOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/HashSyntax$HashOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/HashSyntax$HashOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/HashSyntax$HashOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/HashSyntax$HashOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax$HashOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax$HashOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/HashSyntax$HashOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/HashSyntax$HashOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/HashSyntax$HashOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/HashSyntax$HashOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/HashSyntax$HashOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/HashSyntax$HashOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/HashSyntax$HashOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/HashSyntax$HashOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/HashSyntax$HashOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/HashSyntax$HashOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/HashSyntax$HashOps.html", "kind" : "class"}, {"name" : "zio.prelude.Idempotent", "object" : "zio\/prelude\/Idempotent$.html", "members_object" : [{"label" : "Tuple22Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q], arg17: Idempotent[R], arg18: Idempotent[S], arg19: Idempotent[T], arg20: Idempotent[U], arg21: Idempotent[V]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Idempotent.Tuple22Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple22Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$233:zio.prelude.Idempotent[A],implicitevidence$234:zio.prelude.Idempotent[B],implicitevidence$235:zio.prelude.Idempotent[C],implicitevidence$236:zio.prelude.Idempotent[D],implicitevidence$237:zio.prelude.Idempotent[E],implicitevidence$238:zio.prelude.Idempotent[F],implicitevidence$239:zio.prelude.Idempotent[G],implicitevidence$240:zio.prelude.Idempotent[H],implicitevidence$241:zio.prelude.Idempotent[I],implicitevidence$242:zio.prelude.Idempotent[J],implicitevidence$243:zio.prelude.Idempotent[K],implicitevidence$244:zio.prelude.Idempotent[L],implicitevidence$245:zio.prelude.Idempotent[M],implicitevidence$246:zio.prelude.Idempotent[N],implicitevidence$247:zio.prelude.Idempotent[O],implicitevidence$248:zio.prelude.Idempotent[P],implicitevidence$249:zio.prelude.Idempotent[Q],implicitevidence$250:zio.prelude.Idempotent[R],implicitevidence$251:zio.prelude.Idempotent[S],implicitevidence$252:zio.prelude.Idempotent[T],implicitevidence$253:zio.prelude.Idempotent[U],implicitevidence$254:zio.prelude.Idempotent[V]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q], arg17: Idempotent[R], arg18: Idempotent[S], arg19: Idempotent[T], arg20: Idempotent[U]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Idempotent.Tuple21Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple21Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$212:zio.prelude.Idempotent[A],implicitevidence$213:zio.prelude.Idempotent[B],implicitevidence$214:zio.prelude.Idempotent[C],implicitevidence$215:zio.prelude.Idempotent[D],implicitevidence$216:zio.prelude.Idempotent[E],implicitevidence$217:zio.prelude.Idempotent[F],implicitevidence$218:zio.prelude.Idempotent[G],implicitevidence$219:zio.prelude.Idempotent[H],implicitevidence$220:zio.prelude.Idempotent[I],implicitevidence$221:zio.prelude.Idempotent[J],implicitevidence$222:zio.prelude.Idempotent[K],implicitevidence$223:zio.prelude.Idempotent[L],implicitevidence$224:zio.prelude.Idempotent[M],implicitevidence$225:zio.prelude.Idempotent[N],implicitevidence$226:zio.prelude.Idempotent[O],implicitevidence$227:zio.prelude.Idempotent[P],implicitevidence$228:zio.prelude.Idempotent[Q],implicitevidence$229:zio.prelude.Idempotent[R],implicitevidence$230:zio.prelude.Idempotent[S],implicitevidence$231:zio.prelude.Idempotent[T],implicitevidence$232:zio.prelude.Idempotent[U]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q], arg17: Idempotent[R], arg18: Idempotent[S], arg19: Idempotent[T]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Idempotent.Tuple20Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple20Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$192:zio.prelude.Idempotent[A],implicitevidence$193:zio.prelude.Idempotent[B],implicitevidence$194:zio.prelude.Idempotent[C],implicitevidence$195:zio.prelude.Idempotent[D],implicitevidence$196:zio.prelude.Idempotent[E],implicitevidence$197:zio.prelude.Idempotent[F],implicitevidence$198:zio.prelude.Idempotent[G],implicitevidence$199:zio.prelude.Idempotent[H],implicitevidence$200:zio.prelude.Idempotent[I],implicitevidence$201:zio.prelude.Idempotent[J],implicitevidence$202:zio.prelude.Idempotent[K],implicitevidence$203:zio.prelude.Idempotent[L],implicitevidence$204:zio.prelude.Idempotent[M],implicitevidence$205:zio.prelude.Idempotent[N],implicitevidence$206:zio.prelude.Idempotent[O],implicitevidence$207:zio.prelude.Idempotent[P],implicitevidence$208:zio.prelude.Idempotent[Q],implicitevidence$209:zio.prelude.Idempotent[R],implicitevidence$210:zio.prelude.Idempotent[S],implicitevidence$211:zio.prelude.Idempotent[T]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q], arg17: Idempotent[R], arg18: Idempotent[S]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Idempotent.Tuple19Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple19Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$173:zio.prelude.Idempotent[A],implicitevidence$174:zio.prelude.Idempotent[B],implicitevidence$175:zio.prelude.Idempotent[C],implicitevidence$176:zio.prelude.Idempotent[D],implicitevidence$177:zio.prelude.Idempotent[E],implicitevidence$178:zio.prelude.Idempotent[F],implicitevidence$179:zio.prelude.Idempotent[G],implicitevidence$180:zio.prelude.Idempotent[H],implicitevidence$181:zio.prelude.Idempotent[I],implicitevidence$182:zio.prelude.Idempotent[J],implicitevidence$183:zio.prelude.Idempotent[K],implicitevidence$184:zio.prelude.Idempotent[L],implicitevidence$185:zio.prelude.Idempotent[M],implicitevidence$186:zio.prelude.Idempotent[N],implicitevidence$187:zio.prelude.Idempotent[O],implicitevidence$188:zio.prelude.Idempotent[P],implicitevidence$189:zio.prelude.Idempotent[Q],implicitevidence$190:zio.prelude.Idempotent[R],implicitevidence$191:zio.prelude.Idempotent[S]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q], arg17: Idempotent[R]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Idempotent.Tuple18Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple18Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$155:zio.prelude.Idempotent[A],implicitevidence$156:zio.prelude.Idempotent[B],implicitevidence$157:zio.prelude.Idempotent[C],implicitevidence$158:zio.prelude.Idempotent[D],implicitevidence$159:zio.prelude.Idempotent[E],implicitevidence$160:zio.prelude.Idempotent[F],implicitevidence$161:zio.prelude.Idempotent[G],implicitevidence$162:zio.prelude.Idempotent[H],implicitevidence$163:zio.prelude.Idempotent[I],implicitevidence$164:zio.prelude.Idempotent[J],implicitevidence$165:zio.prelude.Idempotent[K],implicitevidence$166:zio.prelude.Idempotent[L],implicitevidence$167:zio.prelude.Idempotent[M],implicitevidence$168:zio.prelude.Idempotent[N],implicitevidence$169:zio.prelude.Idempotent[O],implicitevidence$170:zio.prelude.Idempotent[P],implicitevidence$171:zio.prelude.Idempotent[Q],implicitevidence$172:zio.prelude.Idempotent[R]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P], arg16: Idempotent[Q]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Idempotent.Tuple17Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple17Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$138:zio.prelude.Idempotent[A],implicitevidence$139:zio.prelude.Idempotent[B],implicitevidence$140:zio.prelude.Idempotent[C],implicitevidence$141:zio.prelude.Idempotent[D],implicitevidence$142:zio.prelude.Idempotent[E],implicitevidence$143:zio.prelude.Idempotent[F],implicitevidence$144:zio.prelude.Idempotent[G],implicitevidence$145:zio.prelude.Idempotent[H],implicitevidence$146:zio.prelude.Idempotent[I],implicitevidence$147:zio.prelude.Idempotent[J],implicitevidence$148:zio.prelude.Idempotent[K],implicitevidence$149:zio.prelude.Idempotent[L],implicitevidence$150:zio.prelude.Idempotent[M],implicitevidence$151:zio.prelude.Idempotent[N],implicitevidence$152:zio.prelude.Idempotent[O],implicitevidence$153:zio.prelude.Idempotent[P],implicitevidence$154:zio.prelude.Idempotent[Q]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O], arg15: Idempotent[P]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Idempotent.Tuple16Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple16Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$122:zio.prelude.Idempotent[A],implicitevidence$123:zio.prelude.Idempotent[B],implicitevidence$124:zio.prelude.Idempotent[C],implicitevidence$125:zio.prelude.Idempotent[D],implicitevidence$126:zio.prelude.Idempotent[E],implicitevidence$127:zio.prelude.Idempotent[F],implicitevidence$128:zio.prelude.Idempotent[G],implicitevidence$129:zio.prelude.Idempotent[H],implicitevidence$130:zio.prelude.Idempotent[I],implicitevidence$131:zio.prelude.Idempotent[J],implicitevidence$132:zio.prelude.Idempotent[K],implicitevidence$133:zio.prelude.Idempotent[L],implicitevidence$134:zio.prelude.Idempotent[M],implicitevidence$135:zio.prelude.Idempotent[N],implicitevidence$136:zio.prelude.Idempotent[O],implicitevidence$137:zio.prelude.Idempotent[P]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N], arg14: Idempotent[O]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Idempotent.Tuple15Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple15Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$107:zio.prelude.Idempotent[A],implicitevidence$108:zio.prelude.Idempotent[B],implicitevidence$109:zio.prelude.Idempotent[C],implicitevidence$110:zio.prelude.Idempotent[D],implicitevidence$111:zio.prelude.Idempotent[E],implicitevidence$112:zio.prelude.Idempotent[F],implicitevidence$113:zio.prelude.Idempotent[G],implicitevidence$114:zio.prelude.Idempotent[H],implicitevidence$115:zio.prelude.Idempotent[I],implicitevidence$116:zio.prelude.Idempotent[J],implicitevidence$117:zio.prelude.Idempotent[K],implicitevidence$118:zio.prelude.Idempotent[L],implicitevidence$119:zio.prelude.Idempotent[M],implicitevidence$120:zio.prelude.Idempotent[N],implicitevidence$121:zio.prelude.Idempotent[O]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M], arg13: Idempotent[N]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Idempotent.Tuple14Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple14Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$93:zio.prelude.Idempotent[A],implicitevidence$94:zio.prelude.Idempotent[B],implicitevidence$95:zio.prelude.Idempotent[C],implicitevidence$96:zio.prelude.Idempotent[D],implicitevidence$97:zio.prelude.Idempotent[E],implicitevidence$98:zio.prelude.Idempotent[F],implicitevidence$99:zio.prelude.Idempotent[G],implicitevidence$100:zio.prelude.Idempotent[H],implicitevidence$101:zio.prelude.Idempotent[I],implicitevidence$102:zio.prelude.Idempotent[J],implicitevidence$103:zio.prelude.Idempotent[K],implicitevidence$104:zio.prelude.Idempotent[L],implicitevidence$105:zio.prelude.Idempotent[M],implicitevidence$106:zio.prelude.Idempotent[N]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L], arg12: Idempotent[M]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Idempotent.Tuple13Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple13Idempotent[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$80:zio.prelude.Idempotent[A],implicitevidence$81:zio.prelude.Idempotent[B],implicitevidence$82:zio.prelude.Idempotent[C],implicitevidence$83:zio.prelude.Idempotent[D],implicitevidence$84:zio.prelude.Idempotent[E],implicitevidence$85:zio.prelude.Idempotent[F],implicitevidence$86:zio.prelude.Idempotent[G],implicitevidence$87:zio.prelude.Idempotent[H],implicitevidence$88:zio.prelude.Idempotent[I],implicitevidence$89:zio.prelude.Idempotent[J],implicitevidence$90:zio.prelude.Idempotent[K],implicitevidence$91:zio.prelude.Idempotent[L],implicitevidence$92:zio.prelude.Idempotent[M]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K], arg11: Idempotent[L]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Idempotent.Tuple12Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple12Idempotent[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$68:zio.prelude.Idempotent[A],implicitevidence$69:zio.prelude.Idempotent[B],implicitevidence$70:zio.prelude.Idempotent[C],implicitevidence$71:zio.prelude.Idempotent[D],implicitevidence$72:zio.prelude.Idempotent[E],implicitevidence$73:zio.prelude.Idempotent[F],implicitevidence$74:zio.prelude.Idempotent[G],implicitevidence$75:zio.prelude.Idempotent[H],implicitevidence$76:zio.prelude.Idempotent[I],implicitevidence$77:zio.prelude.Idempotent[J],implicitevidence$78:zio.prelude.Idempotent[K],implicitevidence$79:zio.prelude.Idempotent[L]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J], arg10: Idempotent[K]): Idempotent[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Idempotent.Tuple11Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple11Idempotent[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$57:zio.prelude.Idempotent[A],implicitevidence$58:zio.prelude.Idempotent[B],implicitevidence$59:zio.prelude.Idempotent[C],implicitevidence$60:zio.prelude.Idempotent[D],implicitevidence$61:zio.prelude.Idempotent[E],implicitevidence$62:zio.prelude.Idempotent[F],implicitevidence$63:zio.prelude.Idempotent[G],implicitevidence$64:zio.prelude.Idempotent[H],implicitevidence$65:zio.prelude.Idempotent[I],implicitevidence$66:zio.prelude.Idempotent[J],implicitevidence$67:zio.prelude.Idempotent[K]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I], arg9: Idempotent[J]): Idempotent[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Idempotent.Tuple10Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple10Idempotent[A,B,C,D,E,F,G,H,I,J](implicitevidence$47:zio.prelude.Idempotent[A],implicitevidence$48:zio.prelude.Idempotent[B],implicitevidence$49:zio.prelude.Idempotent[C],implicitevidence$50:zio.prelude.Idempotent[D],implicitevidence$51:zio.prelude.Idempotent[E],implicitevidence$52:zio.prelude.Idempotent[F],implicitevidence$53:zio.prelude.Idempotent[G],implicitevidence$54:zio.prelude.Idempotent[H],implicitevidence$55:zio.prelude.Idempotent[I],implicitevidence$56:zio.prelude.Idempotent[J]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H], arg8: Idempotent[I]): Idempotent[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Idempotent.Tuple9Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple9Idempotent[A,B,C,D,E,F,G,H,I](implicitevidence$38:zio.prelude.Idempotent[A],implicitevidence$39:zio.prelude.Idempotent[B],implicitevidence$40:zio.prelude.Idempotent[C],implicitevidence$41:zio.prelude.Idempotent[D],implicitevidence$42:zio.prelude.Idempotent[E],implicitevidence$43:zio.prelude.Idempotent[F],implicitevidence$44:zio.prelude.Idempotent[G],implicitevidence$45:zio.prelude.Idempotent[H],implicitevidence$46:zio.prelude.Idempotent[I]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G], arg7: Idempotent[H]): Idempotent[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Idempotent.Tuple8Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple8Idempotent[A,B,C,D,E,F,G,H](implicitevidence$30:zio.prelude.Idempotent[A],implicitevidence$31:zio.prelude.Idempotent[B],implicitevidence$32:zio.prelude.Idempotent[C],implicitevidence$33:zio.prelude.Idempotent[D],implicitevidence$34:zio.prelude.Idempotent[E],implicitevidence$35:zio.prelude.Idempotent[F],implicitevidence$36:zio.prelude.Idempotent[G],implicitevidence$37:zio.prelude.Idempotent[H]):zio.prelude.Idempotent[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F], arg6: Idempotent[G]): Idempotent[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Idempotent.Tuple7Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple7Idempotent[A,B,C,D,E,F,G](implicitevidence$23:zio.prelude.Idempotent[A],implicitevidence$24:zio.prelude.Idempotent[B],implicitevidence$25:zio.prelude.Idempotent[C],implicitevidence$26:zio.prelude.Idempotent[D],implicitevidence$27:zio.prelude.Idempotent[E],implicitevidence$28:zio.prelude.Idempotent[F],implicitevidence$29:zio.prelude.Idempotent[G]):zio.prelude.Idempotent[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E], arg5: Idempotent[F]): Idempotent[(A, B, C, D, E, F)]", "member" : "zio.prelude.Idempotent.Tuple6Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple6Idempotent[A,B,C,D,E,F](implicitevidence$17:zio.prelude.Idempotent[A],implicitevidence$18:zio.prelude.Idempotent[B],implicitevidence$19:zio.prelude.Idempotent[C],implicitevidence$20:zio.prelude.Idempotent[D],implicitevidence$21:zio.prelude.Idempotent[E],implicitevidence$22:zio.prelude.Idempotent[F]):zio.prelude.Idempotent[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D], arg4: Idempotent[E]): Idempotent[(A, B, C, D, E)]", "member" : "zio.prelude.Idempotent.Tuple5Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple5Idempotent[A,B,C,D,E](implicitevidence$12:zio.prelude.Idempotent[A],implicitevidence$13:zio.prelude.Idempotent[B],implicitevidence$14:zio.prelude.Idempotent[C],implicitevidence$15:zio.prelude.Idempotent[D],implicitevidence$16:zio.prelude.Idempotent[E]):zio.prelude.Idempotent[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C], arg3: Idempotent[D]): Idempotent[(A, B, C, D)]", "member" : "zio.prelude.Idempotent.Tuple4Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple4Idempotent[A,B,C,D](implicitevidence$8:zio.prelude.Idempotent[A],implicitevidence$9:zio.prelude.Idempotent[B],implicitevidence$10:zio.prelude.Idempotent[C],implicitevidence$11:zio.prelude.Idempotent[D]):zio.prelude.Idempotent[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B], arg2: Idempotent[C]): Idempotent[(A, B, C)]", "member" : "zio.prelude.Idempotent.Tuple3Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple3Idempotent[A,B,C](implicitevidence$5:zio.prelude.Idempotent[A],implicitevidence$6:zio.prelude.Idempotent[B],implicitevidence$7:zio.prelude.Idempotent[C]):zio.prelude.Idempotent[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Idempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B]): Idempotent[(A, B)]", "member" : "zio.prelude.Idempotent.Tuple2Idempotent", "link" : "zio\/prelude\/Idempotent$.html#Tuple2Idempotent[A,B](implicitevidence$3:zio.prelude.Idempotent[A],implicitevidence$4:zio.prelude.Idempotent[B]):zio.prelude.Idempotent[(A,B)]", "kind" : "implicit def"}, {"label" : "OptionIdempotent", "tail" : "(arg0: Idempotent[A]): Idempotent[Option[A]]", "member" : "zio.prelude.Idempotent.OptionIdempotent", "link" : "zio\/prelude\/Idempotent$.html#OptionIdempotent[A](implicitevidence$2:zio.prelude.Idempotent[A]):zio.prelude.Idempotent[Option[A]]", "kind" : "implicit def"}, {"label" : "MapIdempotent", "tail" : "(arg0: Idempotent[V]): Idempotent[Map[K, V]]", "member" : "zio.prelude.Idempotent.MapIdempotent", "link" : "zio\/prelude\/Idempotent$.html#MapIdempotent[K,V](implicitevidence$1:zio.prelude.Idempotent[V]):zio.prelude.Idempotent[Map[K,V]]", "kind" : "implicit def"}, {"label" : "DeriveIdempotent", "tail" : "(derive: Derive[F, Idempotent], idempotent: Idempotent[A]): Idempotent[F[A]]", "member" : "zio.prelude.Idempotent.DeriveIdempotent", "link" : "zio\/prelude\/Idempotent$.html#DeriveIdempotent[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Idempotent],implicitidempotent:zio.prelude.Idempotent[A]):zio.prelude.Idempotent[F[A]]", "kind" : "implicit def"}, {"label" : "makeFrom", "tail" : "(associative: Associative[A]): Idempotent[A]", "member" : "zio.prelude.Idempotent.makeFrom", "link" : "zio\/prelude\/Idempotent$.html#makeFrom[A](associative:zio.prelude.Associative[A]):zio.prelude.Idempotent[A]", "kind" : "def"}, {"label" : "make", "tail" : "(f: (A, A) => A): Idempotent[A]", "member" : "zio.prelude.Idempotent.make", "link" : "zio\/prelude\/Idempotent$.html#make[A](f:(A,A)=>A):zio.prelude.Idempotent[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(idempotent: Idempotent[A]): Idempotent[A]", "member" : "zio.prelude.Idempotent.apply", "link" : "zio\/prelude\/Idempotent$.html#apply[A](implicitidempotent:zio.prelude.Idempotent[A]):zio.prelude.Idempotent[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Idempotent$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Idempotent$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Idempotent$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Idempotent$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Idempotent$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Idempotent$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Idempotent$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Idempotent$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Idempotent$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Idempotent$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Idempotent$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Idempotent$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Idempotent$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Idempotent$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Idempotent$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Idempotent$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Idempotent.html", "kind" : "trait", "members_trait" : [{"label" : "idempotent", "tail" : "(A: Equal[A]): Idempotent[A]", "member" : "zio.prelude.Idempotent.idempotent", "link" : "zio\/prelude\/Idempotent.html#idempotent(implicitA:zio.prelude.Equal[A]):zio.prelude.Idempotent[A]", "kind" : "def"}, {"label" : "combineIdempotent", "tail" : "(l: => A, r: => A)(A: Equal[A]): A", "member" : "zio.prelude.Idempotent.combineIdempotent", "link" : "zio\/prelude\/Idempotent.html#combineIdempotent(l:=>A,r:=>A)(implicitA:zio.prelude.Equal[A]):A", "kind" : "final def"}, {"label" : "combineNormal", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Idempotent.combineNormal", "link" : "zio\/prelude\/Idempotent.html#combineNormal(l:=>A,r:=>A):A", "kind" : "def"}, {"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Associative.multiplyOption", "link" : "zio\/prelude\/Idempotent.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/Idempotent.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Idempotent.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Idempotent.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Idempotent.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Idempotent.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Idempotent.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Idempotent.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Idempotent.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Idempotent.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Idempotent.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Idempotent.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Idempotent.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Idempotent.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Idempotent.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Idempotent.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Idempotent.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Idempotent.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Idempotent.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/Idempotent.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : "The Idempotent type class describes a binary operator for a type A thatis both associative and produces the same value when combining two identical values."}, {"name" : "zio.prelude.Identity", "object" : "zio\/prelude\/Identity$.html", "members_object" : [{"label" : "Tuple22Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q], arg17: Identity[R], arg18: Identity[S], arg19: Identity[T], arg20: Identity[U], arg21: Identity[V]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Identity.Tuple22Identity", "link" : "zio\/prelude\/Identity$.html#Tuple22Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$234:zio.prelude.Identity[A],implicitevidence$235:zio.prelude.Identity[B],implicitevidence$236:zio.prelude.Identity[C],implicitevidence$237:zio.prelude.Identity[D],implicitevidence$238:zio.prelude.Identity[E],implicitevidence$239:zio.prelude.Identity[F],implicitevidence$240:zio.prelude.Identity[G],implicitevidence$241:zio.prelude.Identity[H],implicitevidence$242:zio.prelude.Identity[I],implicitevidence$243:zio.prelude.Identity[J],implicitevidence$244:zio.prelude.Identity[K],implicitevidence$245:zio.prelude.Identity[L],implicitevidence$246:zio.prelude.Identity[M],implicitevidence$247:zio.prelude.Identity[N],implicitevidence$248:zio.prelude.Identity[O],implicitevidence$249:zio.prelude.Identity[P],implicitevidence$250:zio.prelude.Identity[Q],implicitevidence$251:zio.prelude.Identity[R],implicitevidence$252:zio.prelude.Identity[S],implicitevidence$253:zio.prelude.Identity[T],implicitevidence$254:zio.prelude.Identity[U],implicitevidence$255:zio.prelude.Identity[V]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q], arg17: Identity[R], arg18: Identity[S], arg19: Identity[T], arg20: Identity[U]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Identity.Tuple21Identity", "link" : "zio\/prelude\/Identity$.html#Tuple21Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$213:zio.prelude.Identity[A],implicitevidence$214:zio.prelude.Identity[B],implicitevidence$215:zio.prelude.Identity[C],implicitevidence$216:zio.prelude.Identity[D],implicitevidence$217:zio.prelude.Identity[E],implicitevidence$218:zio.prelude.Identity[F],implicitevidence$219:zio.prelude.Identity[G],implicitevidence$220:zio.prelude.Identity[H],implicitevidence$221:zio.prelude.Identity[I],implicitevidence$222:zio.prelude.Identity[J],implicitevidence$223:zio.prelude.Identity[K],implicitevidence$224:zio.prelude.Identity[L],implicitevidence$225:zio.prelude.Identity[M],implicitevidence$226:zio.prelude.Identity[N],implicitevidence$227:zio.prelude.Identity[O],implicitevidence$228:zio.prelude.Identity[P],implicitevidence$229:zio.prelude.Identity[Q],implicitevidence$230:zio.prelude.Identity[R],implicitevidence$231:zio.prelude.Identity[S],implicitevidence$232:zio.prelude.Identity[T],implicitevidence$233:zio.prelude.Identity[U]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q], arg17: Identity[R], arg18: Identity[S], arg19: Identity[T]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Identity.Tuple20Identity", "link" : "zio\/prelude\/Identity$.html#Tuple20Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$193:zio.prelude.Identity[A],implicitevidence$194:zio.prelude.Identity[B],implicitevidence$195:zio.prelude.Identity[C],implicitevidence$196:zio.prelude.Identity[D],implicitevidence$197:zio.prelude.Identity[E],implicitevidence$198:zio.prelude.Identity[F],implicitevidence$199:zio.prelude.Identity[G],implicitevidence$200:zio.prelude.Identity[H],implicitevidence$201:zio.prelude.Identity[I],implicitevidence$202:zio.prelude.Identity[J],implicitevidence$203:zio.prelude.Identity[K],implicitevidence$204:zio.prelude.Identity[L],implicitevidence$205:zio.prelude.Identity[M],implicitevidence$206:zio.prelude.Identity[N],implicitevidence$207:zio.prelude.Identity[O],implicitevidence$208:zio.prelude.Identity[P],implicitevidence$209:zio.prelude.Identity[Q],implicitevidence$210:zio.prelude.Identity[R],implicitevidence$211:zio.prelude.Identity[S],implicitevidence$212:zio.prelude.Identity[T]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q], arg17: Identity[R], arg18: Identity[S]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Identity.Tuple19Identity", "link" : "zio\/prelude\/Identity$.html#Tuple19Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$174:zio.prelude.Identity[A],implicitevidence$175:zio.prelude.Identity[B],implicitevidence$176:zio.prelude.Identity[C],implicitevidence$177:zio.prelude.Identity[D],implicitevidence$178:zio.prelude.Identity[E],implicitevidence$179:zio.prelude.Identity[F],implicitevidence$180:zio.prelude.Identity[G],implicitevidence$181:zio.prelude.Identity[H],implicitevidence$182:zio.prelude.Identity[I],implicitevidence$183:zio.prelude.Identity[J],implicitevidence$184:zio.prelude.Identity[K],implicitevidence$185:zio.prelude.Identity[L],implicitevidence$186:zio.prelude.Identity[M],implicitevidence$187:zio.prelude.Identity[N],implicitevidence$188:zio.prelude.Identity[O],implicitevidence$189:zio.prelude.Identity[P],implicitevidence$190:zio.prelude.Identity[Q],implicitevidence$191:zio.prelude.Identity[R],implicitevidence$192:zio.prelude.Identity[S]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q], arg17: Identity[R]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Identity.Tuple18Identity", "link" : "zio\/prelude\/Identity$.html#Tuple18Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$156:zio.prelude.Identity[A],implicitevidence$157:zio.prelude.Identity[B],implicitevidence$158:zio.prelude.Identity[C],implicitevidence$159:zio.prelude.Identity[D],implicitevidence$160:zio.prelude.Identity[E],implicitevidence$161:zio.prelude.Identity[F],implicitevidence$162:zio.prelude.Identity[G],implicitevidence$163:zio.prelude.Identity[H],implicitevidence$164:zio.prelude.Identity[I],implicitevidence$165:zio.prelude.Identity[J],implicitevidence$166:zio.prelude.Identity[K],implicitevidence$167:zio.prelude.Identity[L],implicitevidence$168:zio.prelude.Identity[M],implicitevidence$169:zio.prelude.Identity[N],implicitevidence$170:zio.prelude.Identity[O],implicitevidence$171:zio.prelude.Identity[P],implicitevidence$172:zio.prelude.Identity[Q],implicitevidence$173:zio.prelude.Identity[R]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P], arg16: Identity[Q]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Identity.Tuple17Identity", "link" : "zio\/prelude\/Identity$.html#Tuple17Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$139:zio.prelude.Identity[A],implicitevidence$140:zio.prelude.Identity[B],implicitevidence$141:zio.prelude.Identity[C],implicitevidence$142:zio.prelude.Identity[D],implicitevidence$143:zio.prelude.Identity[E],implicitevidence$144:zio.prelude.Identity[F],implicitevidence$145:zio.prelude.Identity[G],implicitevidence$146:zio.prelude.Identity[H],implicitevidence$147:zio.prelude.Identity[I],implicitevidence$148:zio.prelude.Identity[J],implicitevidence$149:zio.prelude.Identity[K],implicitevidence$150:zio.prelude.Identity[L],implicitevidence$151:zio.prelude.Identity[M],implicitevidence$152:zio.prelude.Identity[N],implicitevidence$153:zio.prelude.Identity[O],implicitevidence$154:zio.prelude.Identity[P],implicitevidence$155:zio.prelude.Identity[Q]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O], arg15: Identity[P]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Identity.Tuple16Identity", "link" : "zio\/prelude\/Identity$.html#Tuple16Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$123:zio.prelude.Identity[A],implicitevidence$124:zio.prelude.Identity[B],implicitevidence$125:zio.prelude.Identity[C],implicitevidence$126:zio.prelude.Identity[D],implicitevidence$127:zio.prelude.Identity[E],implicitevidence$128:zio.prelude.Identity[F],implicitevidence$129:zio.prelude.Identity[G],implicitevidence$130:zio.prelude.Identity[H],implicitevidence$131:zio.prelude.Identity[I],implicitevidence$132:zio.prelude.Identity[J],implicitevidence$133:zio.prelude.Identity[K],implicitevidence$134:zio.prelude.Identity[L],implicitevidence$135:zio.prelude.Identity[M],implicitevidence$136:zio.prelude.Identity[N],implicitevidence$137:zio.prelude.Identity[O],implicitevidence$138:zio.prelude.Identity[P]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N], arg14: Identity[O]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Identity.Tuple15Identity", "link" : "zio\/prelude\/Identity$.html#Tuple15Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$108:zio.prelude.Identity[A],implicitevidence$109:zio.prelude.Identity[B],implicitevidence$110:zio.prelude.Identity[C],implicitevidence$111:zio.prelude.Identity[D],implicitevidence$112:zio.prelude.Identity[E],implicitevidence$113:zio.prelude.Identity[F],implicitevidence$114:zio.prelude.Identity[G],implicitevidence$115:zio.prelude.Identity[H],implicitevidence$116:zio.prelude.Identity[I],implicitevidence$117:zio.prelude.Identity[J],implicitevidence$118:zio.prelude.Identity[K],implicitevidence$119:zio.prelude.Identity[L],implicitevidence$120:zio.prelude.Identity[M],implicitevidence$121:zio.prelude.Identity[N],implicitevidence$122:zio.prelude.Identity[O]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M], arg13: Identity[N]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Identity.Tuple14Identity", "link" : "zio\/prelude\/Identity$.html#Tuple14Identity[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$94:zio.prelude.Identity[A],implicitevidence$95:zio.prelude.Identity[B],implicitevidence$96:zio.prelude.Identity[C],implicitevidence$97:zio.prelude.Identity[D],implicitevidence$98:zio.prelude.Identity[E],implicitevidence$99:zio.prelude.Identity[F],implicitevidence$100:zio.prelude.Identity[G],implicitevidence$101:zio.prelude.Identity[H],implicitevidence$102:zio.prelude.Identity[I],implicitevidence$103:zio.prelude.Identity[J],implicitevidence$104:zio.prelude.Identity[K],implicitevidence$105:zio.prelude.Identity[L],implicitevidence$106:zio.prelude.Identity[M],implicitevidence$107:zio.prelude.Identity[N]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L], arg12: Identity[M]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Identity.Tuple13Identity", "link" : "zio\/prelude\/Identity$.html#Tuple13Identity[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$81:zio.prelude.Identity[A],implicitevidence$82:zio.prelude.Identity[B],implicitevidence$83:zio.prelude.Identity[C],implicitevidence$84:zio.prelude.Identity[D],implicitevidence$85:zio.prelude.Identity[E],implicitevidence$86:zio.prelude.Identity[F],implicitevidence$87:zio.prelude.Identity[G],implicitevidence$88:zio.prelude.Identity[H],implicitevidence$89:zio.prelude.Identity[I],implicitevidence$90:zio.prelude.Identity[J],implicitevidence$91:zio.prelude.Identity[K],implicitevidence$92:zio.prelude.Identity[L],implicitevidence$93:zio.prelude.Identity[M]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K], arg11: Identity[L]): Identity[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Identity.Tuple12Identity", "link" : "zio\/prelude\/Identity$.html#Tuple12Identity[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$69:zio.prelude.Identity[A],implicitevidence$70:zio.prelude.Identity[B],implicitevidence$71:zio.prelude.Identity[C],implicitevidence$72:zio.prelude.Identity[D],implicitevidence$73:zio.prelude.Identity[E],implicitevidence$74:zio.prelude.Identity[F],implicitevidence$75:zio.prelude.Identity[G],implicitevidence$76:zio.prelude.Identity[H],implicitevidence$77:zio.prelude.Identity[I],implicitevidence$78:zio.prelude.Identity[J],implicitevidence$79:zio.prelude.Identity[K],implicitevidence$80:zio.prelude.Identity[L]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J], arg10: Identity[K]): Identity[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Identity.Tuple11Identity", "link" : "zio\/prelude\/Identity$.html#Tuple11Identity[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$58:zio.prelude.Identity[A],implicitevidence$59:zio.prelude.Identity[B],implicitevidence$60:zio.prelude.Identity[C],implicitevidence$61:zio.prelude.Identity[D],implicitevidence$62:zio.prelude.Identity[E],implicitevidence$63:zio.prelude.Identity[F],implicitevidence$64:zio.prelude.Identity[G],implicitevidence$65:zio.prelude.Identity[H],implicitevidence$66:zio.prelude.Identity[I],implicitevidence$67:zio.prelude.Identity[J],implicitevidence$68:zio.prelude.Identity[K]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I], arg9: Identity[J]): Identity[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Identity.Tuple10Identity", "link" : "zio\/prelude\/Identity$.html#Tuple10Identity[A,B,C,D,E,F,G,H,I,J](implicitevidence$48:zio.prelude.Identity[A],implicitevidence$49:zio.prelude.Identity[B],implicitevidence$50:zio.prelude.Identity[C],implicitevidence$51:zio.prelude.Identity[D],implicitevidence$52:zio.prelude.Identity[E],implicitevidence$53:zio.prelude.Identity[F],implicitevidence$54:zio.prelude.Identity[G],implicitevidence$55:zio.prelude.Identity[H],implicitevidence$56:zio.prelude.Identity[I],implicitevidence$57:zio.prelude.Identity[J]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H], arg8: Identity[I]): Identity[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Identity.Tuple9Identity", "link" : "zio\/prelude\/Identity$.html#Tuple9Identity[A,B,C,D,E,F,G,H,I](implicitevidence$39:zio.prelude.Identity[A],implicitevidence$40:zio.prelude.Identity[B],implicitevidence$41:zio.prelude.Identity[C],implicitevidence$42:zio.prelude.Identity[D],implicitevidence$43:zio.prelude.Identity[E],implicitevidence$44:zio.prelude.Identity[F],implicitevidence$45:zio.prelude.Identity[G],implicitevidence$46:zio.prelude.Identity[H],implicitevidence$47:zio.prelude.Identity[I]):zio.prelude.Identity[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G], arg7: Identity[H]): Identity[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Identity.Tuple8Identity", "link" : "zio\/prelude\/Identity$.html#Tuple8Identity[A,B,C,D,E,F,G,H](implicitevidence$31:zio.prelude.Identity[A],implicitevidence$32:zio.prelude.Identity[B],implicitevidence$33:zio.prelude.Identity[C],implicitevidence$34:zio.prelude.Identity[D],implicitevidence$35:zio.prelude.Identity[E],implicitevidence$36:zio.prelude.Identity[F],implicitevidence$37:zio.prelude.Identity[G],implicitevidence$38:zio.prelude.Identity[H]):zio.prelude.Identity[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F], arg6: Identity[G]): Identity[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Identity.Tuple7Identity", "link" : "zio\/prelude\/Identity$.html#Tuple7Identity[A,B,C,D,E,F,G](implicitevidence$24:zio.prelude.Identity[A],implicitevidence$25:zio.prelude.Identity[B],implicitevidence$26:zio.prelude.Identity[C],implicitevidence$27:zio.prelude.Identity[D],implicitevidence$28:zio.prelude.Identity[E],implicitevidence$29:zio.prelude.Identity[F],implicitevidence$30:zio.prelude.Identity[G]):zio.prelude.Identity[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E], arg5: Identity[F]): Identity[(A, B, C, D, E, F)]", "member" : "zio.prelude.Identity.Tuple6Identity", "link" : "zio\/prelude\/Identity$.html#Tuple6Identity[A,B,C,D,E,F](implicitevidence$18:zio.prelude.Identity[A],implicitevidence$19:zio.prelude.Identity[B],implicitevidence$20:zio.prelude.Identity[C],implicitevidence$21:zio.prelude.Identity[D],implicitevidence$22:zio.prelude.Identity[E],implicitevidence$23:zio.prelude.Identity[F]):zio.prelude.Identity[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D], arg4: Identity[E]): Identity[(A, B, C, D, E)]", "member" : "zio.prelude.Identity.Tuple5Identity", "link" : "zio\/prelude\/Identity$.html#Tuple5Identity[A,B,C,D,E](implicitevidence$13:zio.prelude.Identity[A],implicitevidence$14:zio.prelude.Identity[B],implicitevidence$15:zio.prelude.Identity[C],implicitevidence$16:zio.prelude.Identity[D],implicitevidence$17:zio.prelude.Identity[E]):zio.prelude.Identity[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C], arg3: Identity[D]): Identity[(A, B, C, D)]", "member" : "zio.prelude.Identity.Tuple4Identity", "link" : "zio\/prelude\/Identity$.html#Tuple4Identity[A,B,C,D](implicitevidence$9:zio.prelude.Identity[A],implicitevidence$10:zio.prelude.Identity[B],implicitevidence$11:zio.prelude.Identity[C],implicitevidence$12:zio.prelude.Identity[D]):zio.prelude.Identity[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B], arg2: Identity[C]): Identity[(A, B, C)]", "member" : "zio.prelude.Identity.Tuple3Identity", "link" : "zio\/prelude\/Identity$.html#Tuple3Identity[A,B,C](implicitevidence$6:zio.prelude.Identity[A],implicitevidence$7:zio.prelude.Identity[B],implicitevidence$8:zio.prelude.Identity[C]):zio.prelude.Identity[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Identity", "tail" : "(arg0: Identity[A], arg1: Identity[B]): Identity[(A, B)]", "member" : "zio.prelude.Identity.Tuple2Identity", "link" : "zio\/prelude\/Identity$.html#Tuple2Identity[A,B](implicitevidence$4:zio.prelude.Identity[A],implicitevidence$5:zio.prelude.Identity[B]):zio.prelude.Identity[(A,B)]", "kind" : "implicit def"}, {"label" : "EitherIdentity", "tail" : "(arg0: Identity[A]): Identity[Either[E, A]]", "member" : "zio.prelude.Identity.EitherIdentity", "link" : "zio\/prelude\/Identity$.html#EitherIdentity[E,A](implicitevidence$3:zio.prelude.Identity[A]):zio.prelude.Identity[Either[E,A]]", "kind" : "implicit def"}, {"label" : "DeriveIdentity", "tail" : "(derive: Derive[F, Identity], identity: Identity[A]): Identity[F[A]]", "member" : "zio.prelude.Identity.DeriveIdentity", "link" : "zio\/prelude\/Identity$.html#DeriveIdentity[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Identity],implicitidentity:zio.prelude.Identity[A]):zio.prelude.Identity[F[A]]", "kind" : "implicit def"}, {"label" : "makeFrom", "tail" : "(identity0: A, associative: Associative[A]): Identity[A]", "member" : "zio.prelude.Identity.makeFrom", "link" : "zio\/prelude\/Identity$.html#makeFrom[A](identity0:A,associative:zio.prelude.Associative[A]):zio.prelude.Identity[A]", "kind" : "def"}, {"label" : "make", "tail" : "(identity0: A, op: (A, A) => A): Identity[A]", "member" : "zio.prelude.Identity.make", "link" : "zio\/prelude\/Identity$.html#make[A](identity0:A,op:(A,A)=>A):zio.prelude.Identity[A]", "kind" : "def"}, {"label" : "fromIdentityEitherCovariant", "tail" : "(arg0: IdentityEither[F], arg1: Covariant[F]): Identity[F[A]]", "member" : "zio.prelude.Identity.fromIdentityEitherCovariant", "link" : "zio\/prelude\/Identity$.html#fromIdentityEitherCovariant[F[+_],A](implicitevidence$1:zio.prelude.IdentityEither[F],implicitevidence$2:zio.prelude.Covariant[F]):zio.prelude.Identity[F[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(Identity: Identity[A]): Identity[A]", "member" : "zio.prelude.Identity.apply", "link" : "zio\/prelude\/Identity$.html#apply[A](implicitIdentity:zio.prelude.Identity[A]):zio.prelude.Identity[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Identity$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Identity$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Identity$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Identity$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Identity$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Identity$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Identity$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Identity$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Identity$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Identity$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Identity$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Identity$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Identity$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Identity$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Identity$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Identity$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Identity.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Option[A]", "member" : "zio.prelude.Identity.multiplyOption", "link" : "zio\/prelude\/Identity.html#multiplyOption(n:Int)(a:A):Option[A]", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/Identity.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Identity.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Identity.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Identity.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Identity.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Identity.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Identity.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Identity.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Identity.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Identity.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Identity.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Identity.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Identity.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Identity.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Identity.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Identity.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Identity.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Identity.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "identity", "tail" : "(): A", "member" : "zio.prelude.Identity.identity", "link" : "zio\/prelude\/Identity.html#identity:A", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/Identity.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : "The Identity type class describes an associative binary operator for atype A that also has an identity element."}, {"name" : "zio.prelude.IdentityBoth", "object" : "zio\/prelude\/IdentityBoth$.html", "members_object" : [{"label" : "fromCovariantIdentityFlatten", "tail" : "(covariant: Covariant[F], identityFlatten: IdentityFlatten[F]): IdentityBoth[F]", "member" : "zio.prelude.IdentityBoth.fromCovariantIdentityFlatten", "link" : "zio\/prelude\/IdentityBoth$.html#fromCovariantIdentityFlatten[F[+_]](implicitcovariant:zio.prelude.Covariant[F],implicitidentityFlatten:zio.prelude.IdentityFlatten[F]):zio.prelude.IdentityBoth[F]", "kind" : "def"}, {"label" : "ConstIdentityeBoth", "tail" : "(arg0: Identity[A]): IdentityBoth[[+B]Type[A]]", "member" : "zio.prelude.IdentityBoth.ConstIdentityeBoth", "link" : "zio\/prelude\/IdentityBoth$.html#ConstIdentityeBoth[A](implicitevidence$1:zio.prelude.Identity[A]):zio.prelude.IdentityBoth[[+B]zio.prelude.Const.newtypeF.Type[A]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(identityBoth: IdentityBoth[F]): IdentityBoth[F]", "member" : "zio.prelude.IdentityBoth.apply", "link" : "zio\/prelude\/IdentityBoth$.html#apply[F[_]](implicitidentityBoth:zio.prelude.IdentityBoth[F]):zio.prelude.IdentityBoth[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityBoth$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityBoth$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityBoth$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityBoth$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityBoth$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityBoth$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityBoth$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityBoth$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityBoth$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityBoth$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityBoth$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityBoth$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityBoth$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityBoth$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityBoth$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityBoth$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/IdentityBoth.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityBoth.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityBoth.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityBoth.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityBoth.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityBoth.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityBoth.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityBoth.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBoth.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityBoth.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityBoth.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityBoth.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityBoth.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityBoth.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityBoth.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityBoth.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityBoth.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityBoth.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "any", "tail" : "(): F[Any]", "member" : "zio.prelude.IdentityBoth.any", "link" : "zio\/prelude\/IdentityBoth.html#any:F[Any]", "kind" : "abstract def"}, {"label" : "both", "tail" : "(fa: => F[A], fb: => F[B]): F[(A, B)]", "member" : "zio.prelude.AssociativeBoth.both", "link" : "zio\/prelude\/IdentityBoth.html#both[A,B](fa:=>F[A],fb:=>F[B]):F[(A,B)]", "kind" : "abstract def"}], "shortDescription" : "A binary operator that combines two values of types F[A] and F[B] toproduce an F[(A, B)] with an identity."}, {"name" : "zio.prelude.IdentityBothSyntax", "trait" : "zio\/prelude\/IdentityBothSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "IdentityBothAnyOps", "tail" : "", "member" : "zio.prelude.IdentityBothSyntax.IdentityBothAnyOps", "link" : "zio\/prelude\/IdentityBothSyntax.html#IdentityBothAnyOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityBothSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityBothSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityBothSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityBothSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityBothSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityBothSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityBothSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityBothSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityBothSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityBothSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityBothSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityBothSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityBothSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityBothSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityBothSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityBothSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.IdentityBothSyntax.IdentityBothAnyOps", "shortDescription" : "", "members_class" : [{"label" : "succeed", "tail" : "(both: IdentityBoth[F], covariant: Covariant[F]): F[A]", "member" : "zio.prelude.IdentityBothSyntax.IdentityBothAnyOps.succeed", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#succeed[F[+_]](implicitboth:zio.prelude.IdentityBoth[F],implicitcovariant:zio.prelude.Covariant[F]):F[A]", "kind" : "def"}, {"member" : "zio.prelude.IdentityBothSyntax.IdentityBothAnyOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/IdentityBothSyntax$IdentityBothAnyOps.html", "kind" : "class"}, {"name" : "zio.prelude.IdentityCompose", "trait" : "zio\/prelude\/IdentityCompose.html", "kind" : "trait", "members_trait" : [{"label" : "identityCompose", "tail" : "(ab: =>:[A, B])(eq: Equal[=>:[A, B]]): Boolean", "member" : "zio.prelude.IdentityCompose.identityCompose", "link" : "zio\/prelude\/IdentityCompose.html#identityCompose[A,B](ab:A=>:B)(impliciteq:zio.prelude.Equal[A=>:B]):Boolean", "kind" : "def"}, {"label" : "associativeCompose", "tail" : "(ab: =>:[A, B], bc: =>:[B, C], cd: =>:[C, D])(eq: Equal[=>:[A, D]]): Boolean", "member" : "zio.prelude.AssociativeCompose.associativeCompose", "link" : "zio\/prelude\/IdentityCompose.html#associativeCompose[A,B,C,D](ab:A=>:B,bc:B=>:C,cd:C=>:D)(impliciteq:zio.prelude.Equal[A=>:D]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityCompose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityCompose.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityCompose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityCompose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityCompose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityCompose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityCompose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityCompose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityCompose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityCompose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityCompose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityCompose.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityCompose.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityCompose.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityCompose.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityCompose.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityCompose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityCompose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityCompose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "identity", "tail" : "(): =>:[A, A]", "member" : "zio.prelude.IdentityCompose.identity", "link" : "zio\/prelude\/IdentityCompose.html#identity[A]:A=>:A", "kind" : "abstract def"}, {"label" : "compose", "tail" : "(bc: =>:[B, C], ab: =>:[A, B]): =>:[A, C]", "member" : "zio.prelude.AssociativeCompose.compose", "link" : "zio\/prelude\/IdentityCompose.html#compose[A,B,C](bc:B=>:C,ab:A=>:B):A=>:C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.IdentityEither", "object" : "zio\/prelude\/IdentityEither$.html", "members_object" : [{"label" : "apply", "tail" : "(identityEither: IdentityEither[F]): IdentityEither[F]", "member" : "zio.prelude.IdentityEither.apply", "link" : "zio\/prelude\/IdentityEither$.html#apply[F[_]](implicitidentityEither:zio.prelude.IdentityEither[F]):zio.prelude.IdentityEither[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityEither$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityEither$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityEither$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityEither$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityEither$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityEither$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityEither$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityEither$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityEither$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityEither$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityEither$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityEither$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityEither$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityEither$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityEither$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityEither$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/IdentityEither.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityEither.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityEither.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityEither.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityEither.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityEither.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityEither.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityEither.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEither.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityEither.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityEither.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityEither.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityEither.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityEither.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityEither.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityEither.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityEither.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityEither.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "none", "tail" : "(): F[Nothing]", "member" : "zio.prelude.IdentityEither.none", "link" : "zio\/prelude\/IdentityEither.html#none:F[Nothing]", "kind" : "abstract def"}, {"label" : "either", "tail" : "(fa: => F[A], fb: => F[B]): F[Either[A, B]]", "member" : "zio.prelude.AssociativeEither.either", "link" : "zio\/prelude\/IdentityEither.html#either[A,B](fa:=>F[A],fb:=>F[B]):F[Either[A,B]]", "kind" : "abstract def"}], "shortDescription" : "A binary operator that combines two values of types F[A] and F[B] toproduce an F[Either[A, B]] with an identity value."}, {"name" : "zio.prelude.IdentityEitherSyntax", "trait" : "zio\/prelude\/IdentityEitherSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "IdentityEitherAnyOps", "tail" : "", "member" : "zio.prelude.IdentityEitherSyntax.IdentityEitherAnyOps", "link" : "zio\/prelude\/IdentityEitherSyntax.html#IdentityEitherAnyOpsextendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityEitherSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityEitherSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityEitherSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityEitherSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityEitherSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityEitherSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityEitherSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityEitherSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityEitherSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityEitherSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityEitherSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityEitherSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityEitherSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityEitherSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityEitherSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityEitherSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.IdentityEitherSyntax.IdentityEitherAnyOps", "shortDescription" : "", "members_class" : [{"label" : "fail", "tail" : "(either: IdentityEither[F]): F[Nothing]", "member" : "zio.prelude.IdentityEitherSyntax.IdentityEitherAnyOps.fail", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#fail[F[_]](impliciteither:zio.prelude.IdentityEither[F]):F[Nothing]", "kind" : "def"}, {"member" : "zio.prelude.IdentityEitherSyntax.IdentityEitherAnyOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/IdentityEitherSyntax$IdentityEitherAnyOps.html", "kind" : "class"}, {"name" : "zio.prelude.IdentityFlatten", "object" : "zio\/prelude\/IdentityFlatten$.html", "members_object" : [{"label" : "apply", "tail" : "(identityFlatten: IdentityFlatten[F]): IdentityFlatten[F]", "member" : "zio.prelude.IdentityFlatten.apply", "link" : "zio\/prelude\/IdentityFlatten$.html#apply[F[+_]](implicitidentityFlatten:zio.prelude.IdentityFlatten[F]):zio.prelude.IdentityFlatten[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityFlatten$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityFlatten$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityFlatten$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityFlatten$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityFlatten$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityFlatten$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityFlatten$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityFlatten$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityFlatten$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityFlatten$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityFlatten$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityFlatten$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityFlatten$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityFlatten$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityFlatten$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityFlatten$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/IdentityFlatten.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentityFlatten.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentityFlatten.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentityFlatten.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentityFlatten.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentityFlatten.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentityFlatten.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentityFlatten.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentityFlatten.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentityFlatten.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentityFlatten.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentityFlatten.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentityFlatten.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentityFlatten.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentityFlatten.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentityFlatten.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentityFlatten.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentityFlatten.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "any", "tail" : "(): F[Any]", "member" : "zio.prelude.IdentityFlatten.any", "link" : "zio\/prelude\/IdentityFlatten.html#any:F[Any]", "kind" : "abstract def"}, {"label" : "flatten", "tail" : "(ffa: F[F[A]]): F[A]", "member" : "zio.prelude.AssociativeFlatten.flatten", "link" : "zio\/prelude\/IdentityFlatten.html#flatten[A](ffa:F[F[A]]):F[A]", "kind" : "abstract def"}], "shortDescription" : "IdentityFlatten described a type that can be \"flattened\" in anassociative way and has an identity element with respect to that operation."}, {"name" : "zio.prelude.IdentitySyntax", "trait" : "zio\/prelude\/IdentitySyntax.html", "kind" : "trait", "members_trait" : [{"label" : "IdentityOps", "tail" : "", "member" : "zio.prelude.IdentitySyntax.IdentityOps", "link" : "zio\/prelude\/IdentitySyntax.html#IdentityOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentitySyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentitySyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentitySyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentitySyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentitySyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentitySyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentitySyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentitySyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentitySyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentitySyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentitySyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentitySyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentitySyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentitySyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentitySyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentitySyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.IdentitySyntax.IdentityOps", "shortDescription" : "Provides infix syntax for combining two values with an associativeoperation.", "members_class" : [{"label" : "identity", "tail" : "(id: Identity[A]): A", "member" : "zio.prelude.IdentitySyntax.IdentityOps.identity", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#identity(implicitid:zio.prelude.Identity[A]):A", "kind" : "def"}, {"member" : "zio.prelude.IdentitySyntax.IdentityOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdentitySyntax$IdentityOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/IdentitySyntax$IdentityOps.html", "kind" : "class"}, {"name" : "zio.prelude.IdExports", "trait" : "zio\/prelude\/IdExports.html", "kind" : "trait", "members_trait" : [{"label" : "Id", "tail" : "", "member" : "zio.prelude.IdExports.Id", "link" : "zio\/prelude\/IdExports.html#Id[+A]=IdExports.this.Id.Type[A]", "kind" : "type"}, {"label" : "Id", "tail" : "", "member" : "zio.prelude.IdExports.Id", "link" : "zio\/prelude\/IdExports.html#Id", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdExports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdExports.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdExports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdExports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdExports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdExports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdExports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdExports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdExports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdExports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdExports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdExports.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdExports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdExports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdExports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdExports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.IdExports.Id", "shortDescription" : "", "object" : "zio\/prelude\/IdExports$Id$.html", "members_object" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/IdExports$Id$.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/IdExports$Id$.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/IdExports$Id$.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/IdExports$Id$.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/IdExports$Id$.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/IdExports$Id$.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/IdExports$Id$.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/IdExports$Id$.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/IdExports$Id$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/IdExports$Id$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/IdExports$Id$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/IdExports$Id$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/IdExports$Id$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/IdExports$Id$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/IdExports$Id$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports$Id$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports$Id$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/IdExports$Id$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/IdExports$Id$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/IdExports$Id$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/IdExports$Id$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/IdExports$Id$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/IdExports$Id$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/IdExports$Id$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/IdExports$Id$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/IdExports$Id$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/IdExports$Id$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "zio.prelude.Invariant", "object" : "zio\/prelude\/Invariant$.html", "members_object" : [{"label" : "DeriveBuildFrom", "tail" : "", "member" : "zio.prelude.InvariantVersionSpecific.DeriveBuildFrom", "link" : "zio\/prelude\/InvariantVersionSpecific.html#DeriveBuildFrom", "kind" : "object"}, {"label" : "DeriveBuildFrom", "tail" : "", "member" : "zio.prelude.InvariantVersionSpecific.DeriveBuildFrom", "link" : "zio\/prelude\/InvariantVersionSpecific.html#DeriveBuildFrom[F[+_]]extendsAnyRef", "kind" : "trait"}, {"label" : "ZSTMZivariantFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZSTM[R, e, O]]]", "member" : "zio.prelude.Invariant.ZSTMZivariantFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ZSTMZivariantFailureCovariant[R,O]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.stm.ZSTM[R,e,O]]]", "kind" : "implicit def"}, {"label" : "ZSTMZivariantCovariant", "tail" : "(): Covariant[[+o]ZSTM[R, E, o]]", "member" : "zio.prelude.Invariant.ZSTMZivariantCovariant", "link" : "zio\/prelude\/Invariant$.html#ZSTMZivariantCovariant[R,E]:zio.prelude.Covariant[[+o]zio.stm.ZSTM[R,E,o]]", "kind" : "implicit def"}, {"label" : "ZStreamFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZStream[R, e, O]]]", "member" : "zio.prelude.Invariant.ZStreamFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ZStreamFailureCovariant[R,O]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.stream.ZStream[R,e,O]]]", "kind" : "implicit def"}, {"label" : "ZStreamCovariant", "tail" : "(): Covariant[[+o]ZStream[R, E, o]]", "member" : "zio.prelude.Invariant.ZStreamCovariant", "link" : "zio\/prelude\/Invariant$.html#ZStreamCovariant[R,E]:zio.prelude.Covariant[[+o]zio.stream.ZStream[R,E,o]]", "kind" : "implicit def"}, {"label" : "ZRefMFailureOutCovariant", "tail" : "(): Covariant[[+eb]Type[ZRefM[RA, RB, EA, eb, A, B]]]", "member" : "zio.prelude.Invariant.ZRefMFailureOutCovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefMFailureOutCovariant[RA,RB,EA,A,B]:zio.prelude.Covariant[[+eb]zio.prelude.newtypes.FailureOut.newtypeF.Type[zio.ZRefM[RA,RB,EA,eb,A,B]]]", "kind" : "implicit def"}, {"label" : "ZRefMFailureInACovariant", "tail" : "(): Covariant[[+ea]Type[ZRefM[RA, RB, ea, EB, A, B]]]", "member" : "zio.prelude.Invariant.ZRefMFailureInACovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefMFailureInACovariant[RA,RB,EB,A,B]:zio.prelude.Covariant[[+ea]zio.prelude.newtypes.FailureIn.newtypeF.Type[zio.ZRefM[RA,RB,ea,EB,A,B]]]", "kind" : "implicit def"}, {"label" : "ZRefMCovariant", "tail" : "(): Covariant[[+b]ZRefM[RA, RB, EA, EB, A, b]]", "member" : "zio.prelude.Invariant.ZRefMCovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefMCovariant[RA,RB,EA,EB,A]:zio.prelude.Covariant[[+b]zio.ZRefM[RA,RB,EA,EB,A,b]]", "kind" : "implicit def"}, {"label" : "ZRefFailureOutCovariant", "tail" : "(): Covariant[[+eb]Type[ZRef[EA, eb, A, B]]]", "member" : "zio.prelude.Invariant.ZRefFailureOutCovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefFailureOutCovariant[EA,A,B]:zio.prelude.Covariant[[+eb]zio.prelude.newtypes.FailureOut.newtypeF.Type[zio.ZRef[EA,eb,A,B]]]", "kind" : "implicit def"}, {"label" : "ZRefFailureInCovariant", "tail" : "(): Covariant[[+ea]Type[ZRef[ea, EB, A, B]]]", "member" : "zio.prelude.Invariant.ZRefFailureInCovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefFailureInCovariant[EB,A,B]:zio.prelude.Covariant[[+ea]zio.prelude.newtypes.FailureIn.newtypeF.Type[zio.ZRef[ea,EB,A,B]]]", "kind" : "implicit def"}, {"label" : "ZRefCovariant", "tail" : "(): Covariant[[+b]ZRef[EA, EB, A, b]]", "member" : "zio.prelude.Invariant.ZRefCovariant", "link" : "zio\/prelude\/Invariant$.html#ZRefCovariant[EA,EB,A]:zio.prelude.Covariant[[+b]zio.ZRef[EA,EB,A,b]]", "kind" : "implicit def"}, {"label" : "ZQueueCovariant", "tail" : "(): Covariant[[+b]ZQueue[RA, RB, EA, EB, A, b]]", "member" : "zio.prelude.Invariant.ZQueueCovariant", "link" : "zio\/prelude\/Invariant$.html#ZQueueCovariant[RA,RB,EA,EB,A]:zio.prelude.Covariant[[+b]zio.ZQueue[RA,RB,EA,EB,A,b]]", "kind" : "implicit def"}, {"label" : "ZManagedFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZManaged[R, e, A]]]", "member" : "zio.prelude.Invariant.ZManagedFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ZManagedFailureCovariant[R,A]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZManaged[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZManagedCovariant", "tail" : "(): Covariant[[+a]ZManaged[R, E, a]]", "member" : "zio.prelude.Invariant.ZManagedCovariant", "link" : "zio\/prelude\/Invariant$.html#ZManagedCovariant[R,E]:zio.prelude.Covariant[[+a]zio.ZManaged[R,E,a]]", "kind" : "implicit def"}, {"label" : "ZLayerFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZLayer[R, e, Out]]]", "member" : "zio.prelude.Invariant.ZLayerFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ZLayerFailureCovariant[R,Out]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZLayer[R,e,Out]]]", "kind" : "implicit def"}, {"label" : "ZLayerCovariant", "tail" : "(): Covariant[[+rout]ZLayer[R, E, rout]]", "member" : "zio.prelude.Invariant.ZLayerCovariant", "link" : "zio\/prelude\/Invariant$.html#ZLayerCovariant[R,E]:zio.prelude.Covariant[[+rout]zio.ZLayer[R,E,rout]]", "kind" : "implicit def"}, {"label" : "ZIOFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZIO[R, e, A]]]", "member" : "zio.prelude.Invariant.ZIOFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ZIOFailureCovariant[R,A]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.ZIO[R,e,A]]]", "kind" : "implicit def"}, {"label" : "ZIOCovariant", "tail" : "(): Covariant[[+a]ZIO[R, E, a]]", "member" : "zio.prelude.Invariant.ZIOCovariant", "link" : "zio\/prelude\/Invariant$.html#ZIOCovariant[R,E]:zio.prelude.Covariant[[+a]zio.ZIO[R,E,a]]", "kind" : "implicit def"}, {"label" : "VectorForEach", "tail" : ": ForEach[Vector]", "member" : "zio.prelude.Invariant.VectorForEach", "link" : "zio\/prelude\/Invariant$.html#VectorForEach:zio.prelude.ForEach[Vector]", "kind" : "implicit val"}, {"label" : "Tuple22Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, x)]", "member" : "zio.prelude.Invariant.Tuple22Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple22Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,x)]", "kind" : "implicit def"}, {"label" : "Tuple21Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, x)]", "member" : "zio.prelude.Invariant.Tuple21Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple21Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,x)]", "kind" : "implicit def"}, {"label" : "Tuple20Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, x)]", "member" : "zio.prelude.Invariant.Tuple20Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple20Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,x)]", "kind" : "implicit def"}, {"label" : "Tuple19Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, x)]", "member" : "zio.prelude.Invariant.Tuple19Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple19Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,x)]", "kind" : "implicit def"}, {"label" : "Tuple18Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, x)]", "member" : "zio.prelude.Invariant.Tuple18Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple18Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,x)]", "kind" : "implicit def"}, {"label" : "Tuple17Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, x)]", "member" : "zio.prelude.Invariant.Tuple17Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple17Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,x)]", "kind" : "implicit def"}, {"label" : "Tuple16Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, x)]", "member" : "zio.prelude.Invariant.Tuple16Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple16Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,x)]", "kind" : "implicit def"}, {"label" : "Tuple15Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, x)]", "member" : "zio.prelude.Invariant.Tuple15Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple15Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,x)]", "kind" : "implicit def"}, {"label" : "Tuple14Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, x)]", "member" : "zio.prelude.Invariant.Tuple14Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple14Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,x)]", "kind" : "implicit def"}, {"label" : "Tuple13Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, x)]", "member" : "zio.prelude.Invariant.Tuple13Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple13Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,x)]", "kind" : "implicit def"}, {"label" : "Tuple12Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, x)]", "member" : "zio.prelude.Invariant.Tuple12Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple12Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,x)]", "kind" : "implicit def"}, {"label" : "Tuple11Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, x)]", "member" : "zio.prelude.Invariant.Tuple11Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple11Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,x)]", "kind" : "implicit def"}, {"label" : "Tuple10Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, x)]", "member" : "zio.prelude.Invariant.Tuple10Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple10Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,x)]", "kind" : "implicit def"}, {"label" : "Tuple9Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, x)]", "member" : "zio.prelude.Invariant.Tuple9Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple9Covariant[T1,T2,T3,T4,T5,T6,T7,T8]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,x)]", "kind" : "implicit def"}, {"label" : "Tuple8Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, x)]", "member" : "zio.prelude.Invariant.Tuple8Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple8Covariant[T1,T2,T3,T4,T5,T6,T7]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,x)]", "kind" : "implicit def"}, {"label" : "Tuple7Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, x)]", "member" : "zio.prelude.Invariant.Tuple7Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple7Covariant[T1,T2,T3,T4,T5,T6]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,x)]", "kind" : "implicit def"}, {"label" : "Tuple6Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, x)]", "member" : "zio.prelude.Invariant.Tuple6Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple6Covariant[T1,T2,T3,T4,T5]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,x)]", "kind" : "implicit def"}, {"label" : "Tuple5Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, x)]", "member" : "zio.prelude.Invariant.Tuple5Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple5Covariant[T1,T2,T3,T4]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,x)]", "kind" : "implicit def"}, {"label" : "Tuple4Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, x)]", "member" : "zio.prelude.Invariant.Tuple4Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple4Covariant[T1,T2,T3]:zio.prelude.Covariant[[+x](T1,T2,T3,x)]", "kind" : "implicit def"}, {"label" : "Tuple3Covariant", "tail" : "(): Covariant[[+x](T1, T2, x)]", "member" : "zio.prelude.Invariant.Tuple3Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple3Covariant[T1,T2]:zio.prelude.Covariant[[+x](T1,T2,x)]", "kind" : "implicit def"}, {"label" : "Tuple2Covariant", "tail" : "(): Covariant[[+x](T1, x)]", "member" : "zio.prelude.Invariant.Tuple2Covariant", "link" : "zio\/prelude\/Invariant$.html#Tuple2Covariant[T1]:zio.prelude.Covariant[[+x](T1,x)]", "kind" : "implicit def"}, {"label" : "TryCovariant", "tail" : ": Covariant[Try]", "member" : "zio.prelude.Invariant.TryCovariant", "link" : "zio\/prelude\/Invariant$.html#TryCovariant:zio.prelude.Covariant[scala.util.Try]", "kind" : "implicit val"}, {"label" : "SetInvariant", "tail" : ": Invariant[Set]", "member" : "zio.prelude.Invariant.SetInvariant", "link" : "zio\/prelude\/Invariant$.html#SetInvariant:zio.prelude.Invariant[Set]", "kind" : "implicit val"}, {"label" : "ScheduleCovariant", "tail" : "(): Covariant[[+b]Schedule[R, A, b]]", "member" : "zio.prelude.Invariant.ScheduleCovariant", "link" : "zio\/prelude\/Invariant$.html#ScheduleCovariant[R,A]:zio.prelude.Covariant[[+b]zio.Schedule[R,A,b]]", "kind" : "implicit def"}, {"label" : "OptionForEach", "tail" : ": ForEach[Option]", "member" : "zio.prelude.Invariant.OptionForEach", "link" : "zio\/prelude\/Invariant$.html#OptionForEach:zio.prelude.ForEach[Option]", "kind" : "implicit val"}, {"label" : "NonEmptyChunkNonEmptyForEach", "tail" : ": NonEmptyForEach[NonEmptyChunk]", "member" : "zio.prelude.Invariant.NonEmptyChunkNonEmptyForEach", "link" : "zio\/prelude\/Invariant$.html#NonEmptyChunkNonEmptyForEach:zio.prelude.NonEmptyForEach[zio.NonEmptyChunk]", "kind" : "implicit val"}, {"label" : "MapForEach", "tail" : "(): ForEach[[+v]Map[K, v]]", "member" : "zio.prelude.Invariant.MapForEach", "link" : "zio\/prelude\/Invariant$.html#MapForEach[K]:zio.prelude.ForEach[[+v]scala.collection.immutable.Map[K,v]]", "kind" : "implicit def"}, {"label" : "ListForEach", "tail" : ": ForEach[List]", "member" : "zio.prelude.Invariant.ListForEach", "link" : "zio\/prelude\/Invariant$.html#ListForEach:zio.prelude.ForEach[List]", "kind" : "implicit val"}, {"label" : "InverseInvariant", "tail" : ": Invariant[Inverse]", "member" : "zio.prelude.Invariant.InverseInvariant", "link" : "zio\/prelude\/Invariant$.html#InverseInvariant:zio.prelude.Invariant[zio.prelude.Inverse]", "kind" : "implicit val"}, {"label" : "IdentityInvariant", "tail" : ": Invariant[Identity]", "member" : "zio.prelude.Invariant.IdentityInvariant", "link" : "zio\/prelude\/Invariant$.html#IdentityInvariant:zio.prelude.Invariant[zio.prelude.Identity]", "kind" : "implicit val"}, {"label" : "IdNonEmptyForEach", "tail" : ": NonEmptyForEach[prelude.Id]", "member" : "zio.prelude.Invariant.IdNonEmptyForEach", "link" : "zio\/prelude\/Invariant$.html#IdNonEmptyForEach:zio.prelude.NonEmptyForEach[zio.prelude.Id]", "kind" : "implicit val"}, {"label" : "FutureCovariant", "tail" : "(ec: ExecutionContext): Covariant[Future]", "member" : "zio.prelude.Invariant.FutureCovariant", "link" : "zio\/prelude\/Invariant$.html#FutureCovariant(implicitec:scala.concurrent.ExecutionContext):zio.prelude.Covariant[scala.concurrent.Future]", "kind" : "implicit def"}, {"label" : "Function22Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22) => x]", "member" : "zio.prelude.Invariant.Function22Covariant", "link" : "zio\/prelude\/Invariant$.html#Function22Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21,T22)=>x]", "kind" : "implicit def"}, {"label" : "Function21Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21) => x]", "member" : "zio.prelude.Invariant.Function21Covariant", "link" : "zio\/prelude\/Invariant$.html#Function21Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20,T21)=>x]", "kind" : "implicit def"}, {"label" : "Function20Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20) => x]", "member" : "zio.prelude.Invariant.Function20Covariant", "link" : "zio\/prelude\/Invariant$.html#Function20Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20)=>x]", "kind" : "implicit def"}, {"label" : "Function19Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19) => x]", "member" : "zio.prelude.Invariant.Function19Covariant", "link" : "zio\/prelude\/Invariant$.html#Function19Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19)=>x]", "kind" : "implicit def"}, {"label" : "Function18Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18) => x]", "member" : "zio.prelude.Invariant.Function18Covariant", "link" : "zio\/prelude\/Invariant$.html#Function18Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18)=>x]", "kind" : "implicit def"}, {"label" : "Function17Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17) => x]", "member" : "zio.prelude.Invariant.Function17Covariant", "link" : "zio\/prelude\/Invariant$.html#Function17Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17)=>x]", "kind" : "implicit def"}, {"label" : "Function16Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16) => x]", "member" : "zio.prelude.Invariant.Function16Covariant", "link" : "zio\/prelude\/Invariant$.html#Function16Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16)=>x]", "kind" : "implicit def"}, {"label" : "Function15Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15) => x]", "member" : "zio.prelude.Invariant.Function15Covariant", "link" : "zio\/prelude\/Invariant$.html#Function15Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15)=>x]", "kind" : "implicit def"}, {"label" : "Function14Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14) => x]", "member" : "zio.prelude.Invariant.Function14Covariant", "link" : "zio\/prelude\/Invariant$.html#Function14Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14)=>x]", "kind" : "implicit def"}, {"label" : "Function13Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13) => x]", "member" : "zio.prelude.Invariant.Function13Covariant", "link" : "zio\/prelude\/Invariant$.html#Function13Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13)=>x]", "kind" : "implicit def"}, {"label" : "Function12Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12) => x]", "member" : "zio.prelude.Invariant.Function12Covariant", "link" : "zio\/prelude\/Invariant$.html#Function12Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12)=>x]", "kind" : "implicit def"}, {"label" : "Function11Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11) => x]", "member" : "zio.prelude.Invariant.Function11Covariant", "link" : "zio\/prelude\/Invariant$.html#Function11Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11)=>x]", "kind" : "implicit def"}, {"label" : "Function10Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) => x]", "member" : "zio.prelude.Invariant.Function10Covariant", "link" : "zio\/prelude\/Invariant$.html#Function10Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9,T10]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9,T10)=>x]", "kind" : "implicit def"}, {"label" : "Function9Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8, T9) => x]", "member" : "zio.prelude.Invariant.Function9Covariant", "link" : "zio\/prelude\/Invariant$.html#Function9Covariant[T1,T2,T3,T4,T5,T6,T7,T8,T9]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8,T9)=>x]", "kind" : "implicit def"}, {"label" : "Function8Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7, T8) => x]", "member" : "zio.prelude.Invariant.Function8Covariant", "link" : "zio\/prelude\/Invariant$.html#Function8Covariant[T1,T2,T3,T4,T5,T6,T7,T8]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7,T8)=>x]", "kind" : "implicit def"}, {"label" : "Function7Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6, T7) => x]", "member" : "zio.prelude.Invariant.Function7Covariant", "link" : "zio\/prelude\/Invariant$.html#Function7Covariant[T1,T2,T3,T4,T5,T6,T7]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6,T7)=>x]", "kind" : "implicit def"}, {"label" : "Function6Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5, T6) => x]", "member" : "zio.prelude.Invariant.Function6Covariant", "link" : "zio\/prelude\/Invariant$.html#Function6Covariant[T1,T2,T3,T4,T5,T6]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5,T6)=>x]", "kind" : "implicit def"}, {"label" : "Function5Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4, T5) => x]", "member" : "zio.prelude.Invariant.Function5Covariant", "link" : "zio\/prelude\/Invariant$.html#Function5Covariant[T1,T2,T3,T4,T5]:zio.prelude.Covariant[[+x](T1,T2,T3,T4,T5)=>x]", "kind" : "implicit def"}, {"label" : "Function4Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3, T4) => x]", "member" : "zio.prelude.Invariant.Function4Covariant", "link" : "zio\/prelude\/Invariant$.html#Function4Covariant[T1,T2,T3,T4]:zio.prelude.Covariant[[+x](T1,T2,T3,T4)=>x]", "kind" : "implicit def"}, {"label" : "Function3Covariant", "tail" : "(): Covariant[[+x](T1, T2, T3) => x]", "member" : "zio.prelude.Invariant.Function3Covariant", "link" : "zio\/prelude\/Invariant$.html#Function3Covariant[T1,T2,T3]:zio.prelude.Covariant[[+x](T1,T2,T3)=>x]", "kind" : "implicit def"}, {"label" : "Function2Covariant", "tail" : "(): Covariant[[+x](T1, T2) => x]", "member" : "zio.prelude.Invariant.Function2Covariant", "link" : "zio\/prelude\/Invariant$.html#Function2Covariant[T1,T2]:zio.prelude.Covariant[[+x](T1,T2)=>x]", "kind" : "implicit def"}, {"label" : "Function1Covariant", "tail" : "(): Covariant[[+x](T) => x]", "member" : "zio.prelude.Invariant.Function1Covariant", "link" : "zio\/prelude\/Invariant$.html#Function1Covariant[T]:zio.prelude.Covariant[[+x]T=>x]", "kind" : "implicit def"}, {"label" : "FiberCovariant", "tail" : "(): Covariant[[+a]Fiber[E, a]]", "member" : "zio.prelude.Invariant.FiberCovariant", "link" : "zio\/prelude\/Invariant$.html#FiberCovariant[E]:zio.prelude.Covariant[[+a]zio.Fiber[E,a]]", "kind" : "implicit def"}, {"label" : "ExitFailureCovariant", "tail" : "(): Covariant[[+e]Type[Exit[e, A]]]", "member" : "zio.prelude.Invariant.ExitFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#ExitFailureCovariant[A]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.Exit[e,A]]]", "kind" : "implicit def"}, {"label" : "ExitCovariant", "tail" : "(): Covariant[[+a]Exit[E, a]]", "member" : "zio.prelude.Invariant.ExitCovariant", "link" : "zio\/prelude\/Invariant$.html#ExitCovariant[E]:zio.prelude.Covariant[[+a]zio.Exit[E,a]]", "kind" : "implicit def"}, {"label" : "EitherForEach", "tail" : "(): ForEach[[+a]Either[E, a]] with Bicovariant[Either]", "member" : "zio.prelude.Invariant.EitherForEach", "link" : "zio\/prelude\/Invariant$.html#EitherForEach[E]:zio.prelude.ForEach[[+a]scala.util.Either[E,a]]withzio.prelude.Bicovariant[Either]", "kind" : "implicit def"}, {"label" : "EitherFailureCovariant", "tail" : "(): Covariant[[+l]Type[Either[l, R]]]", "member" : "zio.prelude.Invariant.EitherFailureCovariant", "link" : "zio\/prelude\/Invariant$.html#EitherFailureCovariant[R]:zio.prelude.Covariant[[+l]zio.prelude.newtypes.Failure.newtypeF.Type[scala.util.Either[l,R]]]", "kind" : "implicit def"}, {"label" : "ConstForEach", "tail" : "(): ForEach[[+B]Type[A]]", "member" : "zio.prelude.Invariant.ConstForEach", "link" : "zio\/prelude\/Invariant$.html#ConstForEach[A]:zio.prelude.ForEach[[+B]zio.prelude.Const.newtypeF.Type[A]]", "kind" : "implicit def"}, {"label" : "CommutativeInvariant", "tail" : ": Invariant[Commutative]", "member" : "zio.prelude.Invariant.CommutativeInvariant", "link" : "zio\/prelude\/Invariant$.html#CommutativeInvariant:zio.prelude.Invariant[zio.prelude.Commutative]", "kind" : "implicit val"}, {"label" : "ChunkForEach", "tail" : ": ForEach[Chunk]", "member" : "zio.prelude.Invariant.ChunkForEach", "link" : "zio\/prelude\/Invariant$.html#ChunkForEach:zio.prelude.ForEach[zio.Chunk]", "kind" : "implicit val"}, {"label" : "CauseCovariant", "tail" : "(): Covariant[Cause]", "member" : "zio.prelude.Invariant.CauseCovariant", "link" : "zio\/prelude\/Invariant$.html#CauseCovariant:zio.prelude.Covariant[zio.Cause]", "kind" : "implicit def"}, {"label" : "AssociativeInvariant", "tail" : ": Invariant[Associative]", "member" : "zio.prelude.Invariant.AssociativeInvariant", "link" : "zio\/prelude\/Invariant$.html#AssociativeInvariant:zio.prelude.Invariant[zio.prelude.Associative]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(invariant: Invariant[F]): Invariant[F]", "member" : "zio.prelude.Invariant.apply", "link" : "zio\/prelude\/Invariant$.html#apply[F[_]](implicitinvariant:zio.prelude.Invariant[F]):zio.prelude.Invariant[F]", "kind" : "def"}, {"label" : "IterableForEach", "tail" : "(derive: DeriveBuildFrom[F]): ForEach[F]", "member" : "zio.prelude.InvariantVersionSpecific.IterableForEach", "link" : "zio\/prelude\/Invariant$.html#IterableForEach[F[+a]<:Iterable[a]](implicitderive:InvariantVersionSpecific.this.DeriveBuildFrom[F]):zio.prelude.ForEach[F]", "kind" : "implicit def"}, {"label" : "ZSTMZivariantContravariant", "tail" : "(): Contravariant[[-x]ZSTM[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZSTMZivariantContravariant", "link" : "zio\/prelude\/Invariant$.html#ZSTMZivariantContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.stm.ZSTM[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZStreamContravariant", "tail" : "(): Contravariant[[-x]ZStream[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZStreamContravariant", "link" : "zio\/prelude\/Invariant$.html#ZStreamContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.stream.ZStream[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZSinkContravariant", "tail" : "(): Contravariant[[-x]ZSink[R, E, x, L, Z]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZSinkContravariant", "link" : "zio\/prelude\/Invariant$.html#ZSinkContravariant[R,E,L,Z]:zio.prelude.Contravariant[[-x]zio.stream.ZSink[R,E,x,L,Z]]", "kind" : "implicit def"}, {"label" : "ZRefMContravariant", "tail" : "(): Contravariant[[-x]ZRefM[RA, RB, EA, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZRefMContravariant", "link" : "zio\/prelude\/Invariant$.html#ZRefMContravariant[RA,RB,EA,EB,B]:zio.prelude.Contravariant[[-x]zio.ZRefM[RA,RB,EA,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZRefContravariant", "tail" : "(): Contravariant[[-x]ZRef[EA, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZRefContravariant", "link" : "zio\/prelude\/Invariant$.html#ZRefContravariant[EA,EB,B]:zio.prelude.Contravariant[[-x]zio.ZRef[EA,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZQueueContravariant", "tail" : "(): Contravariant[[-x]ZQueue[RA, EA, RB, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZQueueContravariant", "link" : "zio\/prelude\/Invariant$.html#ZQueueContravariant[RA,EA,RB,EB,B]:zio.prelude.Contravariant[[-x]zio.ZQueue[RA,EA,RB,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZManagedContravariant", "tail" : "(): Contravariant[[-x]ZManaged[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZManagedContravariant", "link" : "zio\/prelude\/Invariant$.html#ZManagedContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.ZManaged[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZLayerContravariant", "tail" : "(): Contravariant[[-x]ZLayer[x, E, ROut]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZLayerContravariant", "link" : "zio\/prelude\/Invariant$.html#ZLayerContravariant[E,ROut]:zio.prelude.Contravariant[[-x]zio.ZLayer[x,E,ROut]]", "kind" : "implicit def"}, {"label" : "ZIOContravariant", "tail" : "(): Contravariant[[-x]ZIO[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZIOContravariant", "link" : "zio\/prelude\/Invariant$.html#ZIOContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.ZIO[x,E,A]]", "kind" : "implicit def"}, {"label" : "ScheduleContravariant", "tail" : "(): Contravariant[[-x]Schedule[R, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ScheduleContravariant", "link" : "zio\/prelude\/Invariant$.html#ScheduleContravariant[R,B]:zio.prelude.Contravariant[[-x]zio.Schedule[R,x,B]]", "kind" : "implicit def"}, {"label" : "Function22Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => W]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function22Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function22Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>W]", "kind" : "implicit def"}, {"label" : "Function21Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => V]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function21Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function21Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>V]", "kind" : "implicit def"}, {"label" : "Function20Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => U]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function20Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function20Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>U]", "kind" : "implicit def"}, {"label" : "Function19Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => T]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function19Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function19Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>T]", "kind" : "implicit def"}, {"label" : "Function18Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => S]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function18Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function18Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>S]", "kind" : "implicit def"}, {"label" : "Function17Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => R]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function17Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function17Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>R]", "kind" : "implicit def"}, {"label" : "Function16Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => Q]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function16Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function16Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>Q]", "kind" : "implicit def"}, {"label" : "Function15Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => P]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function15Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function15Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>P]", "kind" : "implicit def"}, {"label" : "Function14Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N) => O]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function14Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function14Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N)=>O]", "kind" : "implicit def"}, {"label" : "Function13Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M) => N]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function13Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function13Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M)=>N]", "kind" : "implicit def"}, {"label" : "Function12Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L) => M]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function12Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function12Contravariant[B,C,D,E,F,G,H,I,J,K,L,M]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L)=>M]", "kind" : "implicit def"}, {"label" : "Function11Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K) => L]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function11Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function11Contravariant[B,C,D,E,F,G,H,I,J,K,L]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K)=>L]", "kind" : "implicit def"}, {"label" : "Function10Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J) => K]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function10Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function10Contravariant[B,C,D,E,F,G,H,I,J,K]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J)=>K]", "kind" : "implicit def"}, {"label" : "Function9Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I) => J]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function9Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function9Contravariant[B,C,D,E,F,G,H,I,J]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I)=>J]", "kind" : "implicit def"}, {"label" : "Function8Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H) => I]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function8Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function8Contravariant[B,C,D,E,F,G,H,I]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H)=>I]", "kind" : "implicit def"}, {"label" : "Function7Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G) => H]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function7Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function7Contravariant[B,C,D,E,F,G,H]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G)=>H]", "kind" : "implicit def"}, {"label" : "Function6Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F) => G]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function6Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function6Contravariant[B,C,D,E,F,G]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F)=>G]", "kind" : "implicit def"}, {"label" : "Function5Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E) => F]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function5Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function5Contravariant[B,C,D,E,F]:zio.prelude.Contravariant[[-x](x,B,C,D,E)=>F]", "kind" : "implicit def"}, {"label" : "Function4Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D) => E]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function4Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function4Contravariant[B,C,D,E]:zio.prelude.Contravariant[[-x](x,B,C,D)=>E]", "kind" : "implicit def"}, {"label" : "Function3Contravariant", "tail" : "(): Contravariant[[-x](x, B, C) => D]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function3Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function3Contravariant[B,C,D]:zio.prelude.Contravariant[[-x](x,B,C)=>D]", "kind" : "implicit def"}, {"label" : "Function2Contravariant", "tail" : "(): Contravariant[[-x](x, B) => C]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function2Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function2Contravariant[B,C]:zio.prelude.Contravariant[[-x](x,B)=>C]", "kind" : "implicit def"}, {"label" : "Function1Contravariant", "tail" : "(): Contravariant[[-x](x) => B]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function1Contravariant", "link" : "zio\/prelude\/Invariant$.html#Function1Contravariant[B]:zio.prelude.Contravariant[[-x]x=>B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Invariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Invariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Invariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Invariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Invariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Invariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Invariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Invariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Invariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Invariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Invariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Invariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Invariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Invariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Invariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Invariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Invariant.html", "kind" : "trait", "members_trait" : [{"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/Invariant.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/Invariant.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/Invariant.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Invariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Invariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Invariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Invariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Invariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Invariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Invariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Invariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Invariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Invariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Invariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Invariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Invariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Invariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Invariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Invariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Invariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Invariant.invmap", "link" : "zio\/prelude\/Invariant.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.InvariantSyntax", "trait" : "zio\/prelude\/InvariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "InvariantOps", "tail" : "", "member" : "zio.prelude.InvariantSyntax.InvariantOps", "link" : "zio\/prelude\/InvariantSyntax.html#InvariantOps[F[_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/InvariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/InvariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/InvariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/InvariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/InvariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/InvariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/InvariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/InvariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/InvariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/InvariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/InvariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/InvariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/InvariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/InvariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/InvariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/InvariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.InvariantSyntax.InvariantOps", "shortDescription" : "Provides infix syntax for mapping over invariant values.", "members_class" : [{"label" : "invmap", "tail" : "(f: <=>[A, B])(F: Invariant[F]): F[B]", "member" : "zio.prelude.InvariantSyntax.InvariantOps.invmap", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#invmap[B](f:A<=>B)(implicitF:zio.prelude.Invariant[F]):F[B]", "kind" : "def"}, {"member" : "zio.prelude.InvariantSyntax.InvariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/InvariantSyntax$InvariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/InvariantSyntax$InvariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.InvariantVersionSpecific", "trait" : "zio\/prelude\/InvariantVersionSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "DeriveBuildFrom", "tail" : "", "member" : "zio.prelude.InvariantVersionSpecific.DeriveBuildFrom", "link" : "zio\/prelude\/InvariantVersionSpecific.html#DeriveBuildFrom", "kind" : "object"}, {"label" : "DeriveBuildFrom", "tail" : "", "member" : "zio.prelude.InvariantVersionSpecific.DeriveBuildFrom", "link" : "zio\/prelude\/InvariantVersionSpecific.html#DeriveBuildFrom[F[+_]]extendsAnyRef", "kind" : "trait"}, {"label" : "IterableForEach", "tail" : "(derive: DeriveBuildFrom[F]): ForEach[F]", "member" : "zio.prelude.InvariantVersionSpecific.IterableForEach", "link" : "zio\/prelude\/InvariantVersionSpecific.html#IterableForEach[F[+a]<:Iterable[a]](implicitderive:InvariantVersionSpecific.this.DeriveBuildFrom[F]):zio.prelude.ForEach[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/InvariantVersionSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/InvariantVersionSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/InvariantVersionSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/InvariantVersionSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/InvariantVersionSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/InvariantVersionSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/InvariantVersionSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantVersionSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantVersionSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InvariantVersionSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/InvariantVersionSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/InvariantVersionSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/InvariantVersionSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/InvariantVersionSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/InvariantVersionSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/InvariantVersionSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/InvariantVersionSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/InvariantVersionSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/InvariantVersionSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.Inverse", "object" : "zio\/prelude\/Inverse$.html", "members_object" : [{"label" : "Tuple22Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q], arg17: Inverse[R], arg18: Inverse[S], arg19: Inverse[T], arg20: Inverse[U], arg21: Inverse[V]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Inverse.Tuple22Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple22Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$231:zio.prelude.Inverse[A],implicitevidence$232:zio.prelude.Inverse[B],implicitevidence$233:zio.prelude.Inverse[C],implicitevidence$234:zio.prelude.Inverse[D],implicitevidence$235:zio.prelude.Inverse[E],implicitevidence$236:zio.prelude.Inverse[F],implicitevidence$237:zio.prelude.Inverse[G],implicitevidence$238:zio.prelude.Inverse[H],implicitevidence$239:zio.prelude.Inverse[I],implicitevidence$240:zio.prelude.Inverse[J],implicitevidence$241:zio.prelude.Inverse[K],implicitevidence$242:zio.prelude.Inverse[L],implicitevidence$243:zio.prelude.Inverse[M],implicitevidence$244:zio.prelude.Inverse[N],implicitevidence$245:zio.prelude.Inverse[O],implicitevidence$246:zio.prelude.Inverse[P],implicitevidence$247:zio.prelude.Inverse[Q],implicitevidence$248:zio.prelude.Inverse[R],implicitevidence$249:zio.prelude.Inverse[S],implicitevidence$250:zio.prelude.Inverse[T],implicitevidence$251:zio.prelude.Inverse[U],implicitevidence$252:zio.prelude.Inverse[V]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q], arg17: Inverse[R], arg18: Inverse[S], arg19: Inverse[T], arg20: Inverse[U]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Inverse.Tuple21Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple21Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$210:zio.prelude.Inverse[A],implicitevidence$211:zio.prelude.Inverse[B],implicitevidence$212:zio.prelude.Inverse[C],implicitevidence$213:zio.prelude.Inverse[D],implicitevidence$214:zio.prelude.Inverse[E],implicitevidence$215:zio.prelude.Inverse[F],implicitevidence$216:zio.prelude.Inverse[G],implicitevidence$217:zio.prelude.Inverse[H],implicitevidence$218:zio.prelude.Inverse[I],implicitevidence$219:zio.prelude.Inverse[J],implicitevidence$220:zio.prelude.Inverse[K],implicitevidence$221:zio.prelude.Inverse[L],implicitevidence$222:zio.prelude.Inverse[M],implicitevidence$223:zio.prelude.Inverse[N],implicitevidence$224:zio.prelude.Inverse[O],implicitevidence$225:zio.prelude.Inverse[P],implicitevidence$226:zio.prelude.Inverse[Q],implicitevidence$227:zio.prelude.Inverse[R],implicitevidence$228:zio.prelude.Inverse[S],implicitevidence$229:zio.prelude.Inverse[T],implicitevidence$230:zio.prelude.Inverse[U]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q], arg17: Inverse[R], arg18: Inverse[S], arg19: Inverse[T]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Inverse.Tuple20Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple20Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$190:zio.prelude.Inverse[A],implicitevidence$191:zio.prelude.Inverse[B],implicitevidence$192:zio.prelude.Inverse[C],implicitevidence$193:zio.prelude.Inverse[D],implicitevidence$194:zio.prelude.Inverse[E],implicitevidence$195:zio.prelude.Inverse[F],implicitevidence$196:zio.prelude.Inverse[G],implicitevidence$197:zio.prelude.Inverse[H],implicitevidence$198:zio.prelude.Inverse[I],implicitevidence$199:zio.prelude.Inverse[J],implicitevidence$200:zio.prelude.Inverse[K],implicitevidence$201:zio.prelude.Inverse[L],implicitevidence$202:zio.prelude.Inverse[M],implicitevidence$203:zio.prelude.Inverse[N],implicitevidence$204:zio.prelude.Inverse[O],implicitevidence$205:zio.prelude.Inverse[P],implicitevidence$206:zio.prelude.Inverse[Q],implicitevidence$207:zio.prelude.Inverse[R],implicitevidence$208:zio.prelude.Inverse[S],implicitevidence$209:zio.prelude.Inverse[T]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q], arg17: Inverse[R], arg18: Inverse[S]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Inverse.Tuple19Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple19Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$171:zio.prelude.Inverse[A],implicitevidence$172:zio.prelude.Inverse[B],implicitevidence$173:zio.prelude.Inverse[C],implicitevidence$174:zio.prelude.Inverse[D],implicitevidence$175:zio.prelude.Inverse[E],implicitevidence$176:zio.prelude.Inverse[F],implicitevidence$177:zio.prelude.Inverse[G],implicitevidence$178:zio.prelude.Inverse[H],implicitevidence$179:zio.prelude.Inverse[I],implicitevidence$180:zio.prelude.Inverse[J],implicitevidence$181:zio.prelude.Inverse[K],implicitevidence$182:zio.prelude.Inverse[L],implicitevidence$183:zio.prelude.Inverse[M],implicitevidence$184:zio.prelude.Inverse[N],implicitevidence$185:zio.prelude.Inverse[O],implicitevidence$186:zio.prelude.Inverse[P],implicitevidence$187:zio.prelude.Inverse[Q],implicitevidence$188:zio.prelude.Inverse[R],implicitevidence$189:zio.prelude.Inverse[S]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q], arg17: Inverse[R]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Inverse.Tuple18Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple18Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$153:zio.prelude.Inverse[A],implicitevidence$154:zio.prelude.Inverse[B],implicitevidence$155:zio.prelude.Inverse[C],implicitevidence$156:zio.prelude.Inverse[D],implicitevidence$157:zio.prelude.Inverse[E],implicitevidence$158:zio.prelude.Inverse[F],implicitevidence$159:zio.prelude.Inverse[G],implicitevidence$160:zio.prelude.Inverse[H],implicitevidence$161:zio.prelude.Inverse[I],implicitevidence$162:zio.prelude.Inverse[J],implicitevidence$163:zio.prelude.Inverse[K],implicitevidence$164:zio.prelude.Inverse[L],implicitevidence$165:zio.prelude.Inverse[M],implicitevidence$166:zio.prelude.Inverse[N],implicitevidence$167:zio.prelude.Inverse[O],implicitevidence$168:zio.prelude.Inverse[P],implicitevidence$169:zio.prelude.Inverse[Q],implicitevidence$170:zio.prelude.Inverse[R]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P], arg16: Inverse[Q]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Inverse.Tuple17Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple17Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$136:zio.prelude.Inverse[A],implicitevidence$137:zio.prelude.Inverse[B],implicitevidence$138:zio.prelude.Inverse[C],implicitevidence$139:zio.prelude.Inverse[D],implicitevidence$140:zio.prelude.Inverse[E],implicitevidence$141:zio.prelude.Inverse[F],implicitevidence$142:zio.prelude.Inverse[G],implicitevidence$143:zio.prelude.Inverse[H],implicitevidence$144:zio.prelude.Inverse[I],implicitevidence$145:zio.prelude.Inverse[J],implicitevidence$146:zio.prelude.Inverse[K],implicitevidence$147:zio.prelude.Inverse[L],implicitevidence$148:zio.prelude.Inverse[M],implicitevidence$149:zio.prelude.Inverse[N],implicitevidence$150:zio.prelude.Inverse[O],implicitevidence$151:zio.prelude.Inverse[P],implicitevidence$152:zio.prelude.Inverse[Q]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O], arg15: Inverse[P]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Inverse.Tuple16Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple16Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$120:zio.prelude.Inverse[A],implicitevidence$121:zio.prelude.Inverse[B],implicitevidence$122:zio.prelude.Inverse[C],implicitevidence$123:zio.prelude.Inverse[D],implicitevidence$124:zio.prelude.Inverse[E],implicitevidence$125:zio.prelude.Inverse[F],implicitevidence$126:zio.prelude.Inverse[G],implicitevidence$127:zio.prelude.Inverse[H],implicitevidence$128:zio.prelude.Inverse[I],implicitevidence$129:zio.prelude.Inverse[J],implicitevidence$130:zio.prelude.Inverse[K],implicitevidence$131:zio.prelude.Inverse[L],implicitevidence$132:zio.prelude.Inverse[M],implicitevidence$133:zio.prelude.Inverse[N],implicitevidence$134:zio.prelude.Inverse[O],implicitevidence$135:zio.prelude.Inverse[P]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N], arg14: Inverse[O]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Inverse.Tuple15Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple15Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$105:zio.prelude.Inverse[A],implicitevidence$106:zio.prelude.Inverse[B],implicitevidence$107:zio.prelude.Inverse[C],implicitevidence$108:zio.prelude.Inverse[D],implicitevidence$109:zio.prelude.Inverse[E],implicitevidence$110:zio.prelude.Inverse[F],implicitevidence$111:zio.prelude.Inverse[G],implicitevidence$112:zio.prelude.Inverse[H],implicitevidence$113:zio.prelude.Inverse[I],implicitevidence$114:zio.prelude.Inverse[J],implicitevidence$115:zio.prelude.Inverse[K],implicitevidence$116:zio.prelude.Inverse[L],implicitevidence$117:zio.prelude.Inverse[M],implicitevidence$118:zio.prelude.Inverse[N],implicitevidence$119:zio.prelude.Inverse[O]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M], arg13: Inverse[N]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Inverse.Tuple14Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple14Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$91:zio.prelude.Inverse[A],implicitevidence$92:zio.prelude.Inverse[B],implicitevidence$93:zio.prelude.Inverse[C],implicitevidence$94:zio.prelude.Inverse[D],implicitevidence$95:zio.prelude.Inverse[E],implicitevidence$96:zio.prelude.Inverse[F],implicitevidence$97:zio.prelude.Inverse[G],implicitevidence$98:zio.prelude.Inverse[H],implicitevidence$99:zio.prelude.Inverse[I],implicitevidence$100:zio.prelude.Inverse[J],implicitevidence$101:zio.prelude.Inverse[K],implicitevidence$102:zio.prelude.Inverse[L],implicitevidence$103:zio.prelude.Inverse[M],implicitevidence$104:zio.prelude.Inverse[N]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L], arg12: Inverse[M]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Inverse.Tuple13Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple13Inverse[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$78:zio.prelude.Inverse[A],implicitevidence$79:zio.prelude.Inverse[B],implicitevidence$80:zio.prelude.Inverse[C],implicitevidence$81:zio.prelude.Inverse[D],implicitevidence$82:zio.prelude.Inverse[E],implicitevidence$83:zio.prelude.Inverse[F],implicitevidence$84:zio.prelude.Inverse[G],implicitevidence$85:zio.prelude.Inverse[H],implicitevidence$86:zio.prelude.Inverse[I],implicitevidence$87:zio.prelude.Inverse[J],implicitevidence$88:zio.prelude.Inverse[K],implicitevidence$89:zio.prelude.Inverse[L],implicitevidence$90:zio.prelude.Inverse[M]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K], arg11: Inverse[L]): Inverse[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Inverse.Tuple12Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple12Inverse[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$66:zio.prelude.Inverse[A],implicitevidence$67:zio.prelude.Inverse[B],implicitevidence$68:zio.prelude.Inverse[C],implicitevidence$69:zio.prelude.Inverse[D],implicitevidence$70:zio.prelude.Inverse[E],implicitevidence$71:zio.prelude.Inverse[F],implicitevidence$72:zio.prelude.Inverse[G],implicitevidence$73:zio.prelude.Inverse[H],implicitevidence$74:zio.prelude.Inverse[I],implicitevidence$75:zio.prelude.Inverse[J],implicitevidence$76:zio.prelude.Inverse[K],implicitevidence$77:zio.prelude.Inverse[L]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J], arg10: Inverse[K]): Inverse[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Inverse.Tuple11Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple11Inverse[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$55:zio.prelude.Inverse[A],implicitevidence$56:zio.prelude.Inverse[B],implicitevidence$57:zio.prelude.Inverse[C],implicitevidence$58:zio.prelude.Inverse[D],implicitevidence$59:zio.prelude.Inverse[E],implicitevidence$60:zio.prelude.Inverse[F],implicitevidence$61:zio.prelude.Inverse[G],implicitevidence$62:zio.prelude.Inverse[H],implicitevidence$63:zio.prelude.Inverse[I],implicitevidence$64:zio.prelude.Inverse[J],implicitevidence$65:zio.prelude.Inverse[K]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I], arg9: Inverse[J]): Inverse[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Inverse.Tuple10Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple10Inverse[A,B,C,D,E,F,G,H,I,J](implicitevidence$45:zio.prelude.Inverse[A],implicitevidence$46:zio.prelude.Inverse[B],implicitevidence$47:zio.prelude.Inverse[C],implicitevidence$48:zio.prelude.Inverse[D],implicitevidence$49:zio.prelude.Inverse[E],implicitevidence$50:zio.prelude.Inverse[F],implicitevidence$51:zio.prelude.Inverse[G],implicitevidence$52:zio.prelude.Inverse[H],implicitevidence$53:zio.prelude.Inverse[I],implicitevidence$54:zio.prelude.Inverse[J]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H], arg8: Inverse[I]): Inverse[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Inverse.Tuple9Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple9Inverse[A,B,C,D,E,F,G,H,I](implicitevidence$36:zio.prelude.Inverse[A],implicitevidence$37:zio.prelude.Inverse[B],implicitevidence$38:zio.prelude.Inverse[C],implicitevidence$39:zio.prelude.Inverse[D],implicitevidence$40:zio.prelude.Inverse[E],implicitevidence$41:zio.prelude.Inverse[F],implicitevidence$42:zio.prelude.Inverse[G],implicitevidence$43:zio.prelude.Inverse[H],implicitevidence$44:zio.prelude.Inverse[I]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G], arg7: Inverse[H]): Inverse[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Inverse.Tuple8Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple8Inverse[A,B,C,D,E,F,G,H](implicitevidence$28:zio.prelude.Inverse[A],implicitevidence$29:zio.prelude.Inverse[B],implicitevidence$30:zio.prelude.Inverse[C],implicitevidence$31:zio.prelude.Inverse[D],implicitevidence$32:zio.prelude.Inverse[E],implicitevidence$33:zio.prelude.Inverse[F],implicitevidence$34:zio.prelude.Inverse[G],implicitevidence$35:zio.prelude.Inverse[H]):zio.prelude.Inverse[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F], arg6: Inverse[G]): Inverse[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Inverse.Tuple7Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple7Inverse[A,B,C,D,E,F,G](implicitevidence$21:zio.prelude.Inverse[A],implicitevidence$22:zio.prelude.Inverse[B],implicitevidence$23:zio.prelude.Inverse[C],implicitevidence$24:zio.prelude.Inverse[D],implicitevidence$25:zio.prelude.Inverse[E],implicitevidence$26:zio.prelude.Inverse[F],implicitevidence$27:zio.prelude.Inverse[G]):zio.prelude.Inverse[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E], arg5: Inverse[F]): Inverse[(A, B, C, D, E, F)]", "member" : "zio.prelude.Inverse.Tuple6Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple6Inverse[A,B,C,D,E,F](implicitevidence$15:zio.prelude.Inverse[A],implicitevidence$16:zio.prelude.Inverse[B],implicitevidence$17:zio.prelude.Inverse[C],implicitevidence$18:zio.prelude.Inverse[D],implicitevidence$19:zio.prelude.Inverse[E],implicitevidence$20:zio.prelude.Inverse[F]):zio.prelude.Inverse[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D], arg4: Inverse[E]): Inverse[(A, B, C, D, E)]", "member" : "zio.prelude.Inverse.Tuple5Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple5Inverse[A,B,C,D,E](implicitevidence$10:zio.prelude.Inverse[A],implicitevidence$11:zio.prelude.Inverse[B],implicitevidence$12:zio.prelude.Inverse[C],implicitevidence$13:zio.prelude.Inverse[D],implicitevidence$14:zio.prelude.Inverse[E]):zio.prelude.Inverse[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C], arg3: Inverse[D]): Inverse[(A, B, C, D)]", "member" : "zio.prelude.Inverse.Tuple4Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple4Inverse[A,B,C,D](implicitevidence$6:zio.prelude.Inverse[A],implicitevidence$7:zio.prelude.Inverse[B],implicitevidence$8:zio.prelude.Inverse[C],implicitevidence$9:zio.prelude.Inverse[D]):zio.prelude.Inverse[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B], arg2: Inverse[C]): Inverse[(A, B, C)]", "member" : "zio.prelude.Inverse.Tuple3Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple3Inverse[A,B,C](implicitevidence$3:zio.prelude.Inverse[A],implicitevidence$4:zio.prelude.Inverse[B],implicitevidence$5:zio.prelude.Inverse[C]):zio.prelude.Inverse[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Inverse", "tail" : "(arg0: Inverse[A], arg1: Inverse[B]): Inverse[(A, B)]", "member" : "zio.prelude.Inverse.Tuple2Inverse", "link" : "zio\/prelude\/Inverse$.html#Tuple2Inverse[A,B](implicitevidence$1:zio.prelude.Inverse[A],implicitevidence$2:zio.prelude.Inverse[B]):zio.prelude.Inverse[(A,B)]", "kind" : "implicit def"}, {"label" : "DeriveInverse", "tail" : "(derive: Derive[F, Inverse], inverse: Inverse[A]): Inverse[F[A]]", "member" : "zio.prelude.Inverse.DeriveInverse", "link" : "zio\/prelude\/Inverse$.html#DeriveInverse[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Inverse],implicitinverse:zio.prelude.Inverse[A]):zio.prelude.Inverse[F[A]]", "kind" : "implicit def"}, {"label" : "makeFrom", "tail" : "(identity: Identity[A], inverse: (A, A) => A): Inverse[A]", "member" : "zio.prelude.Inverse.makeFrom", "link" : "zio\/prelude\/Inverse$.html#makeFrom[A](identity:zio.prelude.Identity[A],inverse:(A,A)=>A):zio.prelude.Inverse[A]", "kind" : "def"}, {"label" : "make", "tail" : "(identity0: A, op: (A, A) => A, inv: (A, A) => A): Inverse[A]", "member" : "zio.prelude.Inverse.make", "link" : "zio\/prelude\/Inverse$.html#make[A](identity0:A,op:(A,A)=>A,inv:(A,A)=>A):zio.prelude.Inverse[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(Inverse: Inverse[A]): Inverse[A]", "member" : "zio.prelude.Inverse.apply", "link" : "zio\/prelude\/Inverse$.html#apply[A](implicitInverse:zio.prelude.Inverse[A]):zio.prelude.Inverse[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Inverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Inverse$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Inverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Inverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Inverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Inverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Inverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Inverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Inverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Inverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Inverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Inverse$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Inverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Inverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Inverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Inverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Inverse.html", "kind" : "trait", "members_trait" : [{"label" : "multiplyOption", "tail" : "(n: Int)(a: A): Some[A]", "member" : "zio.prelude.Inverse.multiplyOption", "link" : "zio\/prelude\/Inverse.html#multiplyOption(n:Int)(a:A):Some[A]", "kind" : "def"}, {"label" : "multiply", "tail" : "(n: Int)(a: A): A", "member" : "zio.prelude.Inverse.multiply", "link" : "zio\/prelude\/Inverse.html#multiply(n:Int)(a:A):A", "kind" : "def"}, {"label" : "repeat", "tail" : "(a: A)(n: Int): A", "member" : "zio.prelude.Associative.repeat", "link" : "zio\/prelude\/Inverse.html#repeat(a:A)(n:Int):A", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Inverse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Inverse.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Inverse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Inverse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Inverse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Inverse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Inverse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Inverse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Inverse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Inverse.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Inverse.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Inverse.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Inverse.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Inverse.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Inverse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Inverse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Inverse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inverse", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Inverse.inverse", "link" : "zio\/prelude\/Inverse.html#inverse(l:=>A,r:=>A):A", "kind" : "abstract def"}, {"label" : "identity", "tail" : "(): A", "member" : "zio.prelude.Identity.identity", "link" : "zio\/prelude\/Inverse.html#identity:A", "kind" : "abstract def"}, {"label" : "combine", "tail" : "(l: => A, r: => A): A", "member" : "zio.prelude.Associative.combine", "link" : "zio\/prelude\/Inverse.html#combine(l:=>A,r:=>A):A", "kind" : "abstract def"}], "shortDescription" : "The Inverse type class describes an associative binary operator for atype A that has an identity element and an inverse binary operator."}, {"name" : "zio.prelude.InverseSyntax", "trait" : "zio\/prelude\/InverseSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "InverseOps", "tail" : "", "member" : "zio.prelude.InverseSyntax.InverseOps", "link" : "zio\/prelude\/InverseSyntax.html#InverseOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/InverseSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/InverseSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/InverseSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/InverseSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/InverseSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/InverseSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/InverseSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/InverseSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/InverseSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/InverseSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/InverseSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/InverseSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/InverseSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/InverseSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/InverseSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/InverseSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.InverseSyntax.InverseOps", "shortDescription" : "Provides infix syntax for combining two values with an inverseoperation.", "members_class" : [{"label" : "multiply", "tail" : "(n: Int)(inverse: Inverse[A]): A", "member" : "zio.prelude.InverseSyntax.InverseOps.multiply", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#multiply(n:Int)(implicitinverse:zio.prelude.Inverse[A]):A", "kind" : "def"}, {"label" : "inverse", "tail" : "(r: => A1)(inverse: Inverse[A1]): A1", "member" : "zio.prelude.InverseSyntax.InverseOps.inverse", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#inverse[A1>:A](r:=>A1)(implicitinverse:zio.prelude.Inverse[A1]):A1", "kind" : "def"}, {"label" : "~~", "tail" : "(r: => A1)(inverse: Inverse[A1]): A1", "member" : "zio.prelude.InverseSyntax.InverseOps.~~", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#~~[A1>:A](r:=>A1)(implicitinverse:zio.prelude.Inverse[A1]):A1", "kind" : "def"}, {"member" : "zio.prelude.InverseSyntax.InverseOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/InverseSyntax$InverseOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/InverseSyntax$InverseOps.html", "kind" : "class"}, {"name" : "zio.prelude.LowPriorityInvariantImplicits", "trait" : "zio\/prelude\/LowPriorityInvariantImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "ZSTMZivariantContravariant", "tail" : "(): Contravariant[[-x]ZSTM[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZSTMZivariantContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZSTMZivariantContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.stm.ZSTM[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZStreamContravariant", "tail" : "(): Contravariant[[-x]ZStream[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZStreamContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZStreamContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.stream.ZStream[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZSinkContravariant", "tail" : "(): Contravariant[[-x]ZSink[R, E, x, L, Z]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZSinkContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZSinkContravariant[R,E,L,Z]:zio.prelude.Contravariant[[-x]zio.stream.ZSink[R,E,x,L,Z]]", "kind" : "implicit def"}, {"label" : "ZRefMContravariant", "tail" : "(): Contravariant[[-x]ZRefM[RA, RB, EA, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZRefMContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZRefMContravariant[RA,RB,EA,EB,B]:zio.prelude.Contravariant[[-x]zio.ZRefM[RA,RB,EA,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZRefContravariant", "tail" : "(): Contravariant[[-x]ZRef[EA, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZRefContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZRefContravariant[EA,EB,B]:zio.prelude.Contravariant[[-x]zio.ZRef[EA,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZQueueContravariant", "tail" : "(): Contravariant[[-x]ZQueue[RA, EA, RB, EB, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZQueueContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZQueueContravariant[RA,EA,RB,EB,B]:zio.prelude.Contravariant[[-x]zio.ZQueue[RA,EA,RB,EB,x,B]]", "kind" : "implicit def"}, {"label" : "ZManagedContravariant", "tail" : "(): Contravariant[[-x]ZManaged[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZManagedContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZManagedContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.ZManaged[x,E,A]]", "kind" : "implicit def"}, {"label" : "ZLayerContravariant", "tail" : "(): Contravariant[[-x]ZLayer[x, E, ROut]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZLayerContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZLayerContravariant[E,ROut]:zio.prelude.Contravariant[[-x]zio.ZLayer[x,E,ROut]]", "kind" : "implicit def"}, {"label" : "ZIOContravariant", "tail" : "(): Contravariant[[-x]ZIO[x, E, A]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ZIOContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ZIOContravariant[E,A]:zio.prelude.Contravariant[[-x]zio.ZIO[x,E,A]]", "kind" : "implicit def"}, {"label" : "ScheduleContravariant", "tail" : "(): Contravariant[[-x]Schedule[R, x, B]]", "member" : "zio.prelude.LowPriorityInvariantImplicits.ScheduleContravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ScheduleContravariant[R,B]:zio.prelude.Contravariant[[-x]zio.Schedule[R,x,B]]", "kind" : "implicit def"}, {"label" : "Function22Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V) => W]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function22Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function22Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)=>W]", "kind" : "implicit def"}, {"label" : "Function21Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U) => V]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function21Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function21Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)=>V]", "kind" : "implicit def"}, {"label" : "Function20Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T) => U]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function20Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function20Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)=>U]", "kind" : "implicit def"}, {"label" : "Function19Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S) => T]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function19Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function19Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)=>T]", "kind" : "implicit def"}, {"label" : "Function18Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R) => S]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function18Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function18Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)=>S]", "kind" : "implicit def"}, {"label" : "Function17Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q) => R]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function17Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function17Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)=>R]", "kind" : "implicit def"}, {"label" : "Function16Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P) => Q]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function16Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function16Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)=>Q]", "kind" : "implicit def"}, {"label" : "Function15Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N, O) => P]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function15Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function15Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O,P]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N,O)=>P]", "kind" : "implicit def"}, {"label" : "Function14Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M, N) => O]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function14Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function14Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N,O]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M,N)=>O]", "kind" : "implicit def"}, {"label" : "Function13Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L, M) => N]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function13Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function13Contravariant[B,C,D,E,F,G,H,I,J,K,L,M,N]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L,M)=>N]", "kind" : "implicit def"}, {"label" : "Function12Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K, L) => M]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function12Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function12Contravariant[B,C,D,E,F,G,H,I,J,K,L,M]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K,L)=>M]", "kind" : "implicit def"}, {"label" : "Function11Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J, K) => L]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function11Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function11Contravariant[B,C,D,E,F,G,H,I,J,K,L]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J,K)=>L]", "kind" : "implicit def"}, {"label" : "Function10Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I, J) => K]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function10Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function10Contravariant[B,C,D,E,F,G,H,I,J,K]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I,J)=>K]", "kind" : "implicit def"}, {"label" : "Function9Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H, I) => J]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function9Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function9Contravariant[B,C,D,E,F,G,H,I,J]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H,I)=>J]", "kind" : "implicit def"}, {"label" : "Function8Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G, H) => I]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function8Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function8Contravariant[B,C,D,E,F,G,H,I]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G,H)=>I]", "kind" : "implicit def"}, {"label" : "Function7Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F, G) => H]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function7Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function7Contravariant[B,C,D,E,F,G,H]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F,G)=>H]", "kind" : "implicit def"}, {"label" : "Function6Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E, F) => G]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function6Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function6Contravariant[B,C,D,E,F,G]:zio.prelude.Contravariant[[-x](x,B,C,D,E,F)=>G]", "kind" : "implicit def"}, {"label" : "Function5Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D, E) => F]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function5Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function5Contravariant[B,C,D,E,F]:zio.prelude.Contravariant[[-x](x,B,C,D,E)=>F]", "kind" : "implicit def"}, {"label" : "Function4Contravariant", "tail" : "(): Contravariant[[-x](x, B, C, D) => E]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function4Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function4Contravariant[B,C,D,E]:zio.prelude.Contravariant[[-x](x,B,C,D)=>E]", "kind" : "implicit def"}, {"label" : "Function3Contravariant", "tail" : "(): Contravariant[[-x](x, B, C) => D]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function3Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function3Contravariant[B,C,D]:zio.prelude.Contravariant[[-x](x,B,C)=>D]", "kind" : "implicit def"}, {"label" : "Function2Contravariant", "tail" : "(): Contravariant[[-x](x, B) => C]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function2Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function2Contravariant[B,C]:zio.prelude.Contravariant[[-x](x,B)=>C]", "kind" : "implicit def"}, {"label" : "Function1Contravariant", "tail" : "(): Contravariant[[-x](x) => B]", "member" : "zio.prelude.LowPriorityInvariantImplicits.Function1Contravariant", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#Function1Contravariant[B]:zio.prelude.Contravariant[[-x]x=>B]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/LowPriorityInvariantImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.LowPriorityNonEmptyListImplicits", "trait" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "NonEmptyListPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[NonEmptyList[A]]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListPartialOrd", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#NonEmptyListPartialOrd[A](implicitevidence$10:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListOrd", "tail" : "(arg0: Ord[A]): Ord[NonEmptyList[A]]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListOrd", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#NonEmptyListOrd[A](implicitevidence$9:zio.prelude.Ord[A]):zio.prelude.Ord[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListCommutativeBoth", "tail" : ": CommutativeBoth[NonEmptyList]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListCommutativeBoth", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#NonEmptyListCommutativeBoth:zio.prelude.CommutativeBoth[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/LowPriorityNonEmptyListImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.LowPriorityValidationImplicits", "trait" : "zio\/prelude\/LowPriorityValidationImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "ZValidationHash", "tail" : "(arg0: Hash[A]): Hash[ZValidation[W, E, A]]", "member" : "zio.prelude.LowPriorityValidationImplicits.ZValidationHash", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#ZValidationHash[W,E,A](implicitevidence$17:zio.prelude.Hash[A]):zio.prelude.Hash[zio.prelude.ZValidation[W,E,A]]", "kind" : "implicit def"}, {"label" : "ZValidationCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.LowPriorityValidationImplicits.ZValidationCommutativeBoth", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#ZValidationCommutativeBoth[W,E]:zio.prelude.CommutativeBoth[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/LowPriorityValidationImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.LowPriorityZNonEmptySetImplicits", "trait" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "ZNonEmptySetPartialOrd", "tail" : "(arg0: PartialOrd[B], ev: Identity[Sum[B]]): PartialOrd[ZNonEmptySet[A, B]]", "member" : "zio.prelude.LowPriorityZNonEmptySetImplicits.ZNonEmptySetPartialOrd", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#ZNonEmptySetPartialOrd[A,B](implicitevidence$7:zio.prelude.PartialOrd[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.PartialOrd[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/LowPriorityZNonEmptySetImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.LowPriorityZSetImplicits", "trait" : "zio\/prelude\/LowPriorityZSetImplicits.html", "kind" : "trait", "members_trait" : [{"label" : "ZSetPartialOrd", "tail" : "(arg0: PartialOrd[B], ev: Identity[Sum[B]]): PartialOrd[ZSet[A, B]]", "member" : "zio.prelude.LowPriorityZSetImplicits.ZSetPartialOrd", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#ZSetPartialOrd[A,B](implicitevidence$10:zio.prelude.PartialOrd[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.PartialOrd[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/LowPriorityZSetImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.MapSyntax", "shortDescription" : "", "members_class" : [{"label" : "compareStrict", "tail" : "(r: Map[K, V])(V: Equal[V]): PartialOrdering", "member" : "zio.prelude.MapSyntax.compareStrict", "link" : "zio\/prelude\/package$$MapSyntax.html#compareStrict(r:Map[K,V])(implicitV:zio.prelude.Equal[V]):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "compareSoft", "tail" : "(r: Map[K, V])(V: PartialOrd[V]): PartialOrdering", "member" : "zio.prelude.MapSyntax.compareSoft", "link" : "zio\/prelude\/package$$MapSyntax.html#compareSoft(r:Map[K,V])(implicitV:zio.prelude.PartialOrd[V]):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "compareWith", "tail" : "(compareValues: (Ordering, Iterable[(V, V)]) => PartialOrdering)(r: Map[K, V]): PartialOrdering", "member" : "zio.prelude.MapSyntax.compareWith", "link" : "zio\/prelude\/package$$MapSyntax.html#compareWith(compareValues:(zio.prelude.Ordering,Iterable[(V,V)])=>zio.prelude.PartialOrdering)(r:Map[K,V]):zio.prelude.PartialOrdering", "kind" : "def"}, {"member" : "zio.prelude.MapSyntax#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "zio\/prelude\/package$$MapSyntax.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "zio\/prelude\/package$$MapSyntax.html###:Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/package$$MapSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/package$$MapSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "zio\/prelude\/package$$MapSyntax.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "zio\/prelude\/package$$MapSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "zio\/prelude\/package$$MapSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/package$$MapSyntax.html", "kind" : "class"}, {"name" : "zio.prelude.NewtypeCompanionVersionSpecific", "trait" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "unsafeWrapAll", "tail" : "(newtype: T, value: F[A]): F[unsafeWrapAll.T.Type]", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.unsafeWrapAll", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#unsafeWrapAll[F[_],A,T<:zio.prelude.NewtypeModule#Newtype[A]](newtype:T,value:F[A]):F[T#Type]", "kind" : "def"}, {"label" : "unsafeWrap", "tail" : "(newtype: T, value: A): unsafeWrap.T.Type", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.unsafeWrap", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#unsafeWrap[A,T<:zio.prelude.NewtypeModule#Newtype[A]](newtype:T,value:A):T#Type", "kind" : "def"}, {"label" : "assert", "tail" : "(assertion: Assertion[A]): QuotedAssertion[A]", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.assert", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#assert[A](assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeCompanionVersionSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NewtypeExports", "trait" : "zio\/prelude\/NewtypeExports.html", "kind" : "trait", "members_trait" : [{"label" : "Subtype", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype", "link" : "zio\/prelude\/NewtypeExports.html#Subtype[A]extendsNewtypeModule.instance.Subtype[A]", "kind" : "abstract class"}, {"label" : "Newtype", "tail" : "", "member" : "zio.prelude.NewtypeExports.Newtype", "link" : "zio\/prelude\/NewtypeExports.html#Newtype", "kind" : "object"}, {"label" : "Newtype", "tail" : "", "member" : "zio.prelude.NewtypeExports.Newtype", "link" : "zio\/prelude\/NewtypeExports.html#Newtype[A]extendsNewtypeModule.instance.Newtype[A]", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeExports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeExports.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeExports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeExports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeExports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeExports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeExports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeExports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeExports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeExports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeExports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeExports.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeExports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeExports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeExports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeExports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NewtypeExports.Newtype", "shortDescription" : "The class of objects corresponding to newtypes.", "object" : "zio\/prelude\/NewtypeExports$Newtype$.html", "members_class" : [{"label" : "unwrapAll", "tail" : "(value: F[Type]): F[A]", "member" : "zio.prelude.NewtypeExports.Newtype.unwrapAll", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#unwrapAll[F[_]](value:F[Newtype.this.Type]):F[A]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeExports.Newtype.Type", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#Type=Newtype.this.newtype.TypewithNewtype.this.Tag", "kind" : "type"}, {"label" : "Tag", "tail" : "", "member" : "zio.prelude.NewtypeExports.Newtype.Tag", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#TagextendsAny", "kind" : "trait"}, {"label" : "newtype", "tail" : ": NewtypeModule.Newtype[A]", "member" : "zio.prelude.NewtypeExports.Newtype.newtype", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#newtype:zio.prelude.NewtypeModule.instance.Newtype[A]", "kind" : "val"}, {"member" : "zio.prelude.NewtypeExports.Newtype#<init>", "error" : "unsupported entity"}, {"label" : "unwrap", "tail" : "(value: Type): A", "member" : "zio.prelude.NewtypeModule.Newtype.unwrap", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#unwrap(value:Newtype.this.Type):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type", "member" : "zio.prelude.NewtypeModule.Newtype.wrap", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#wrap(value:A):Newtype.this.Type", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type): Some[A]", "member" : "zio.prelude.NewtypeModule.Newtype.unapply", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#unapply(value:Newtype.this.Type):Some[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(instance: TypeClass[A]): TypeClass[Type]", "member" : "zio.prelude.NewtypeModule.Newtype.derive", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#derive[TypeClass[_]](implicitinstance:TypeClass[A]):TypeClass[Newtype.this.Type]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[A]): QuotedAssertion[A]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[A])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: A): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A, values: A*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeExports$Newtype.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Newtype.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "unsafeWrapAll", "tail" : "(newtype: T, value: F[A]): F[NewtypeCompanionVersionSpecific.unsafeWrapAll.T.Type]", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.unsafeWrapAll", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#unsafeWrapAll[F[_],A,T<:zio.prelude.NewtypeModule#Newtype[A]](newtype:T,value:F[A]):F[T#Type]", "kind" : "def"}, {"label" : "unsafeWrap", "tail" : "(newtype: T, value: A): NewtypeCompanionVersionSpecific.unsafeWrap.T.Type", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.unsafeWrap", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#unsafeWrap[A,T<:zio.prelude.NewtypeModule#Newtype[A]](newtype:T,value:A):T#Type", "kind" : "def"}, {"label" : "assert", "tail" : "(assertion: Assertion[A]): QuotedAssertion[A]", "member" : "zio.prelude.NewtypeCompanionVersionSpecific.assert", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#assert[A](assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Newtype$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NewtypeExports$Newtype.html", "kind" : "class"}, {"name" : "zio.prelude.NewtypeExports.Subtype", "shortDescription" : "The class of objects corresponding to subtypes.", "members_class" : [{"label" : "unwrapAll", "tail" : "(value: F[Type]): F[A]", "member" : "zio.prelude.NewtypeExports.Subtype.unwrapAll", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#unwrapAll[F[_]](value:F[Subtype.this.Type]):F[A]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(value: Type): A", "member" : "zio.prelude.NewtypeExports.Subtype.unwrap", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#unwrap(value:Subtype.this.Type):A", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Type", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#Type=Subtype.this.subtype.TypewithSubtype.this.Tag", "kind" : "type"}, {"label" : "Tag", "tail" : "", "member" : "zio.prelude.NewtypeExports.Subtype.Tag", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#TagextendsAny", "kind" : "trait"}, {"label" : "subtype", "tail" : ": NewtypeModule.Subtype[A]", "member" : "zio.prelude.NewtypeExports.Subtype.subtype", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#subtype:zio.prelude.NewtypeModule.instance.Subtype[A]", "kind" : "val"}, {"member" : "zio.prelude.NewtypeExports.Subtype#<init>", "error" : "unsupported entity"}, {"label" : "wrap", "tail" : "(value: A): Type", "member" : "zio.prelude.NewtypeModule.Newtype.wrap", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#wrap(value:A):Newtype.this.Type", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type): Some[A]", "member" : "zio.prelude.NewtypeModule.Newtype.unapply", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#unapply(value:Newtype.this.Type):Some[A]", "kind" : "def"}, {"label" : "derive", "tail" : "(instance: TypeClass[A]): TypeClass[Type]", "member" : "zio.prelude.NewtypeModule.Newtype.derive", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#derive[TypeClass[_]](implicitinstance:TypeClass[A]):TypeClass[Newtype.this.Type]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[A]): QuotedAssertion[A]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[A])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: A): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A, values: A*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeExports$Subtype.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeExports$Subtype.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NewtypeExports$Subtype.html", "kind" : "class"}, {"name" : "zio.prelude.NewtypeFExports", "trait" : "zio\/prelude\/NewtypeFExports.html", "kind" : "trait", "members_trait" : [{"label" : "SubtypeF", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF", "link" : "zio\/prelude\/NewtypeFExports.html#SubtypeFextendsNewtypeModuleF.instance.SubtypeF", "kind" : "abstract class"}, {"label" : "NewtypeF", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF", "link" : "zio\/prelude\/NewtypeFExports.html#NewtypeFextendsNewtypeModuleF.instance.NewtypeF", "kind" : "abstract class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeFExports.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeFExports.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeFExports.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeFExports.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeFExports.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeFExports.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeFExports.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeFExports.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeFExports.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeFExports.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeFExports.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeFExports.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeFExports.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeFExports.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeFExports.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeFExports.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NewtypeFExports.NewtypeF", "shortDescription" : "The class of objects corresponding to parameterized newtypes.", "members_class" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.unwrapAll", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#unwrapAll[F[_],A](value:F[NewtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.NewtypeF.wrapAll", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#wrapAll[F[_],A](value:F[A]):F[NewtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.NewtypeF.Type", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#Type[+A]=NewtypeF.this.newtypeF.Type[A]", "kind" : "type"}, {"label" : "newtypeF", "tail" : ": NewtypeModuleF.NewtypeF", "member" : "zio.prelude.NewtypeFExports.NewtypeF.newtypeF", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#newtypeF:zio.prelude.NewtypeModuleF.instance.NewtypeF", "kind" : "val"}, {"member" : "zio.prelude.NewtypeFExports.NewtypeF#<init>", "error" : "unsupported entity"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeFExports$NewtypeF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NewtypeFExports$NewtypeF.html", "kind" : "class"}, {"name" : "zio.prelude.NewtypeFExports.SubtypeF", "shortDescription" : "The class of objects corresponding to parameterized subtypes.", "members_class" : [{"label" : "unwrapAll", "tail" : "(value: F[Type[A]]): F[A]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.unwrapAll", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#unwrapAll[F[_],A](value:F[SubtypeF.this.Type[A]]):F[A]", "kind" : "def"}, {"label" : "wrapAll", "tail" : "(value: F[A]): F[Type[A]]", "member" : "zio.prelude.NewtypeFExports.SubtypeF.wrapAll", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#wrapAll[F[_],A](value:F[A]):F[SubtypeF.this.Type[A]]", "kind" : "def"}, {"label" : "Type", "tail" : "", "member" : "zio.prelude.NewtypeFExports.SubtypeF.Type", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#Type[+A]=SubtypeF.this.subtypeF.Type[A]", "kind" : "type"}, {"label" : "subtypeF", "tail" : ": NewtypeModuleF.SubtypeF", "member" : "zio.prelude.NewtypeFExports.SubtypeF.subtypeF", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#subtypeF:zio.prelude.NewtypeModuleF.instance.SubtypeF", "kind" : "val"}, {"member" : "zio.prelude.NewtypeFExports.SubtypeF#<init>", "error" : "unsupported entity"}, {"label" : "unwrap", "tail" : "(value: Type[A]): A", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unwrap", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#unwrap[A](value:NewtypeF.this.Type[A]):A", "kind" : "def"}, {"label" : "wrap", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.wrap", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#wrap[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(value: Type[A]): Some[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.unapply", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#unapply[A](value:NewtypeF.this.Type[A]):Some[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: A): Type[A]", "member" : "zio.prelude.NewtypeModuleF.NewtypeF.apply", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#apply[A](value:A):NewtypeF.this.Type[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeFExports$SubtypeF.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NewtypeFExports$SubtypeF.html", "kind" : "class"}, {"name" : "zio.prelude.NewtypeVersionSpecific", "trait" : "zio\/prelude\/NewtypeVersionSpecific.html", "kind" : "trait", "members_trait" : [{"label" : "wrapAll", "tail" : "(value: F[A]): F[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.wrapAll", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#wrapAll[F[_]](value:F[A]):F[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "assert", "tail" : "(assertion: Assertion[A]): QuotedAssertion[A]", "member" : "zio.prelude.NewtypeVersionSpecific.assert", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#assert(assertion:zio.prelude.Assertion[A]):zio.prelude.QuotedAssertion[A]", "kind" : "macro def"}, {"label" : "makeAll", "tail" : "(value: F[A])(arg0: ForEach[F]): Validation[String, F[Type]]", "member" : "zio.prelude.NewtypeVersionSpecific.makeAll", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#makeAll[F[+_]](value:F[A])(implicitevidence$1:zio.prelude.ForEach[F]):zio.prelude.Validation[String,F[NewtypeVersionSpecific.this.Type]]", "kind" : "macro def"}, {"label" : "make", "tail" : "(value: A): Validation[String, Type]", "member" : "zio.prelude.NewtypeVersionSpecific.make", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#make(value:A):zio.prelude.Validation[String,NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A, values: A*): NonEmptyChunk[Type]", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#apply(value:A,values:A*):zio.NonEmptyChunk[NewtypeVersionSpecific.this.Type]", "kind" : "macro def"}, {"label" : "apply", "tail" : "(value: A): Type", "member" : "zio.prelude.NewtypeVersionSpecific.apply", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#apply(value:A):NewtypeVersionSpecific.this.Type", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NewtypeVersionSpecific.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NewtypeVersionSpecific.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NonEmptyForEach", "object" : "zio\/prelude\/NonEmptyForEach$.html", "members_object" : [{"label" : "apply", "tail" : "(nonEmptyForEach: NonEmptyForEach[F]): NonEmptyForEach[F]", "member" : "zio.prelude.NonEmptyForEach.apply", "link" : "zio\/prelude\/NonEmptyForEach$.html#apply[F[+_]](implicitnonEmptyForEach:zio.prelude.NonEmptyForEach[F]):zio.prelude.NonEmptyForEach[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyForEach$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyForEach$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyForEach$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyForEach$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyForEach$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyForEach$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyForEach$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyForEach$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyForEach$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyForEach$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyForEach$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyForEach$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyForEach$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyForEach$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyForEach$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyForEach$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/NonEmptyForEach.html", "kind" : "trait", "members_trait" : [{"label" : "toNonEmptyList", "tail" : "(fa: F[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyForEach.toNonEmptyList", "link" : "zio\/prelude\/NonEmptyForEach.html#toNonEmptyList[A](fa:F[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "toNonEmptyChunk", "tail" : "(fa: F[A]): NonEmptyChunk[A]", "member" : "zio.prelude.NonEmptyForEach.toNonEmptyChunk", "link" : "zio\/prelude\/NonEmptyForEach.html#toNonEmptyChunk[A](fa:F[A]):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "reduceMapRight", "tail" : "(fa: F[A])(map: (A) => B)(reduce: (A, B) => B): B", "member" : "zio.prelude.NonEmptyForEach.reduceMapRight", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceMapRight[A,B](fa:F[A])(map:A=>B)(reduce:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceMapLeft", "tail" : "(fa: F[A])(map: (A) => B)(reduce: (B, A) => B): B", "member" : "zio.prelude.NonEmptyForEach.reduceMapLeft", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceMapLeft[A,B](fa:F[A])(map:A=>B)(reduce:(B,A)=>B):B", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): B", "member" : "zio.prelude.NonEmptyForEach.reduceMap", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$16:zio.prelude.Associative[B]):B", "kind" : "def"}, {"label" : "reduceIdempotent1", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): A", "member" : "zio.prelude.NonEmptyForEach.reduceIdempotent1", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceIdempotent1[A](fa:F[A])(implicitevidence$14:zio.prelude.Idempotent[A],implicitevidence$15:zio.prelude.Equal[A]):A", "kind" : "def"}, {"label" : "reduce1", "tail" : "(fa: F[A])(arg0: Associative[A]): A", "member" : "zio.prelude.NonEmptyForEach.reduce1", "link" : "zio\/prelude\/NonEmptyForEach.html#reduce1[A](fa:F[A])(implicitevidence$13:zio.prelude.Associative[A]):A", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(fa: F[A])(f: (A, A) => A): A", "member" : "zio.prelude.NonEmptyForEach.reduceAll", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceAll[A](fa:F[A])(f:(A,A)=>A):A", "kind" : "def"}, {"label" : "minBy", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): A", "member" : "zio.prelude.NonEmptyForEach.minBy", "link" : "zio\/prelude\/NonEmptyForEach.html#minBy[A,B](fa:F[A])(f:A=>B)(implicitevidence$12:zio.prelude.Ord[B]):A", "kind" : "def"}, {"label" : "min", "tail" : "(fa: F[A])(arg0: Ord[A]): A", "member" : "zio.prelude.NonEmptyForEach.min", "link" : "zio\/prelude\/NonEmptyForEach.html#min[A](fa:F[A])(implicitevidence$11:zio.prelude.Ord[A]):A", "kind" : "def"}, {"label" : "maxBy", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): A", "member" : "zio.prelude.NonEmptyForEach.maxBy", "link" : "zio\/prelude\/NonEmptyForEach.html#maxBy[A,B](fa:F[A])(f:A=>B)(implicitevidence$10:zio.prelude.Ord[B]):A", "kind" : "def"}, {"label" : "max", "tail" : "(fa: F[A])(arg0: Ord[A]): A", "member" : "zio.prelude.NonEmptyForEach.max", "link" : "zio\/prelude\/NonEmptyForEach.html#max[A](fa:F[A])(implicitevidence$9:zio.prelude.Ord[A]):A", "kind" : "def"}, {"label" : "forEach1_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.NonEmptyForEach.forEach1_", "link" : "zio\/prelude\/NonEmptyForEach.html#forEach1_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$7:zio.prelude.AssociativeBoth[G],implicitevidence$8:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forEach", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.NonEmptyForEach.forEach", "link" : "zio\/prelude\/NonEmptyForEach.html#forEach[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$5:zio.prelude.IdentityBoth[G],implicitevidence$6:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "def"}, {"label" : "flip1", "tail" : "(fa: F[G[A]])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.NonEmptyForEach.flip1", "link" : "zio\/prelude\/NonEmptyForEach.html#flip1[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.AssociativeBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: ForEach[G]): ForEach[[+A]F[G[A]]]", "member" : "zio.prelude.ForEach.compose", "link" : "zio\/prelude\/NonEmptyForEach.html#compose[G[+_]](implicitevidence$29:zio.prelude.ForEach[G]):zio.prelude.ForEach[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "zipWithIndex", "tail" : "(fa: F[A]): F[(A, Int)]", "member" : "zio.prelude.ForEach.zipWithIndex", "link" : "zio\/prelude\/NonEmptyForEach.html#zipWithIndex[A](fa:F[A]):F[(A,Int)]", "kind" : "def"}, {"label" : "zipAllWith", "tail" : "(fa: F[A], fb: F[B])(f: (These[A, B]) => C)(both: IdentityBoth[F], either: IdentityEither[F]): F[C]", "member" : "zio.prelude.ForEach.zipAllWith", "link" : "zio\/prelude\/NonEmptyForEach.html#zipAllWith[A,B,C](fa:F[A],fb:F[B])(f:zio.prelude.These[A,B]=>C)(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[C]", "kind" : "def"}, {"label" : "zipAll", "tail" : "(fa: F[A], fb: F[B])(both: IdentityBoth[F], either: IdentityEither[F]): F[These[A, B]]", "member" : "zio.prelude.ForEach.zipAll", "link" : "zio\/prelude\/NonEmptyForEach.html#zipAll[A,B,C](fa:F[A],fb:F[B])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):F[zio.prelude.These[A,B]]", "kind" : "def"}, {"label" : "toList", "tail" : "(fa: F[A]): List[A]", "member" : "zio.prelude.ForEach.toList", "link" : "zio\/prelude\/NonEmptyForEach.html#toList[A](fa:F[A]):List[A]", "kind" : "def"}, {"label" : "toChunk", "tail" : "(fa: F[A]): Chunk[A]", "member" : "zio.prelude.ForEach.toChunk", "link" : "zio\/prelude\/NonEmptyForEach.html#toChunk[A](fa:F[A]):zio.Chunk[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: F[A])(ev: Identity[Sum[A]]): A", "member" : "zio.prelude.ForEach.sum", "link" : "zio\/prelude\/NonEmptyForEach.html#sum[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[A]]):A", "kind" : "def"}, {"label" : "size", "tail" : "(fa: F[A]): Int", "member" : "zio.prelude.ForEach.size", "link" : "zio\/prelude\/NonEmptyForEach.html#size[A](fa:F[A]):Int", "kind" : "def"}, {"label" : "reverse", "tail" : "(fa: F[A]): F[A]", "member" : "zio.prelude.ForEach.reverse", "link" : "zio\/prelude\/NonEmptyForEach.html#reverse[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "reduceOption", "tail" : "(fa: F[A])(f: (A, A) => A): Option[A]", "member" : "zio.prelude.ForEach.reduceOption", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceOption[A](fa:F[A])(f:(A,A)=>A):Option[A]", "kind" : "def"}, {"label" : "reduceMapOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Associative[B]): Option[B]", "member" : "zio.prelude.ForEach.reduceMapOption", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceMapOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$28:zio.prelude.Associative[B]):Option[B]", "kind" : "def"}, {"label" : "reduceIdentity", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.reduceIdentity", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceIdentity[A](fa:F[A])(implicitevidence$27:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "reduceIdempotent", "tail" : "(fa: F[A])(arg0: Idempotent[A], arg1: Equal[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceIdempotent", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceIdempotent[A](fa:F[A])(implicitevidence$25:zio.prelude.Idempotent[A],implicitevidence$26:zio.prelude.Equal[A]):Option[A]", "kind" : "def"}, {"label" : "reduceAssociative", "tail" : "(fa: F[A])(arg0: Associative[A]): Option[A]", "member" : "zio.prelude.ForEach.reduceAssociative", "link" : "zio\/prelude\/NonEmptyForEach.html#reduceAssociative[A](fa:F[A])(implicitevidence$24:zio.prelude.Associative[A]):Option[A]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: F[A])(ev: Identity[Prod[A]]): A", "member" : "zio.prelude.ForEach.product", "link" : "zio\/prelude\/NonEmptyForEach.html#product[A](fa:F[A])(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Prod[A]]):A", "kind" : "def"}, {"label" : "partitionMapM", "tail" : "(fa: F[A])(f: (A) => G[Either[B, C]])(arg0: IdentityFlatten[G], arg1: Covariant[G], both: IdentityBoth[F], either: IdentityEither[F]): G[(F[B], F[C])]", "member" : "zio.prelude.ForEach.partitionMapM", "link" : "zio\/prelude\/NonEmptyForEach.html#partitionMapM[G[+_],A,B,C](fa:F[A])(f:A=>G[Either[B,C]])(implicitevidence$22:zio.prelude.IdentityFlatten[G],implicitevidence$23:zio.prelude.Covariant[G],implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):G[(F[B],F[C])]", "kind" : "def"}, {"label" : "partitionMap", "tail" : "(fa: F[A])(f: (A) => Either[B, C])(both: IdentityBoth[F], either: IdentityEither[F]): (F[B], F[C])", "member" : "zio.prelude.ForEach.partitionMap", "link" : "zio\/prelude\/NonEmptyForEach.html#partitionMap[A,B,C](fa:F[A])(f:A=>Either[B,C])(implicitboth:zio.prelude.IdentityBoth[F],impliciteither:zio.prelude.IdentityEither[F]):(F[B],F[C])", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.nonEmpty", "link" : "zio\/prelude\/NonEmptyForEach.html#nonEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "minByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.minByOption", "link" : "zio\/prelude\/NonEmptyForEach.html#minByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$21:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "minOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.minOption", "link" : "zio\/prelude\/NonEmptyForEach.html#minOption[A](fa:F[A])(implicitevidence$20:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "maxByOption", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Ord[B]): Option[A]", "member" : "zio.prelude.ForEach.maxByOption", "link" : "zio\/prelude\/NonEmptyForEach.html#maxByOption[A,B](fa:F[A])(f:A=>B)(implicitevidence$19:zio.prelude.Ord[B]):Option[A]", "kind" : "def"}, {"label" : "maxOption", "tail" : "(fa: F[A])(arg0: Ord[A]): Option[A]", "member" : "zio.prelude.ForEach.maxOption", "link" : "zio\/prelude\/NonEmptyForEach.html#maxOption[A](fa:F[A])(implicitevidence$18:zio.prelude.Ord[A]):Option[A]", "kind" : "def"}, {"label" : "mapAccum", "tail" : "(fa: F[A])(s: S)(f: (S, A) => (S, B)): (S, F[B])", "member" : "zio.prelude.ForEach.mapAccum", "link" : "zio\/prelude\/NonEmptyForEach.html#mapAccum[S,A,B](fa:F[A])(s:S)(f:(S,A)=>(S,B)):(S,F[B])", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): (F[A]) => F[B]", "member" : "zio.prelude.ForEach.map", "link" : "zio\/prelude\/NonEmptyForEach.html#map[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(fa: F[A]): Boolean", "member" : "zio.prelude.ForEach.isEmpty", "link" : "zio\/prelude\/NonEmptyForEach.html#isEmpty[A](fa:F[A]):Boolean", "kind" : "def"}, {"label" : "groupByNonEmptyM", "tail" : "(fa: F[V])(f: (V) => G[K])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Map[K, NonEmptyChunk[V]]]", "member" : "zio.prelude.ForEach.groupByNonEmptyM", "link" : "zio\/prelude\/NonEmptyForEach.html#groupByNonEmptyM[G[+_],V,K](fa:F[V])(f:V=>G[K])(implicitevidence$16:zio.prelude.IdentityBoth[G],implicitevidence$17:zio.prelude.Covariant[G]):G[Map[K,zio.NonEmptyChunk[V]]]", "kind" : "def"}, {"label" : "groupByNonEmpty", "tail" : "(fa: F[V])(f: (V) => K): Map[K, NonEmptyChunk[V]]", "member" : "zio.prelude.ForEach.groupByNonEmpty", "link" : "zio\/prelude\/NonEmptyForEach.html#groupByNonEmpty[V,K](fa:F[V])(f:V=>K):Map[K,zio.NonEmptyChunk[V]]", "kind" : "def"}, {"label" : "forEach_", "tail" : "(fa: F[A])(f: (A) => G[Any])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[Unit]", "member" : "zio.prelude.ForEach.forEach_", "link" : "zio\/prelude\/NonEmptyForEach.html#forEach_[G[+_],A](fa:F[A])(f:A=>G[Any])(implicitevidence$14:zio.prelude.IdentityBoth[G],implicitevidence$15:zio.prelude.Covariant[G]):G[Unit]", "kind" : "def"}, {"label" : "forall", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.forall", "link" : "zio\/prelude\/NonEmptyForEach.html#forall[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foldRightM", "tail" : "(fa: F[A])(s: S)(f: (A, S) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldRightM", "link" : "zio\/prelude\/NonEmptyForEach.html#foldRightM[G[+_],S,A](fa:F[A])(s:S)(f:(A,S)=>G[S])(implicitevidence$12:zio.prelude.IdentityFlatten[G],implicitevidence$13:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldRight", "tail" : "(fa: F[A])(s: S)(f: (A, S) => S): S", "member" : "zio.prelude.ForEach.foldRight", "link" : "zio\/prelude\/NonEmptyForEach.html#foldRight[S,A](fa:F[A])(s:S)(f:(A,S)=>S):S", "kind" : "def"}, {"label" : "foldMapM", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: Covariant[G], arg1: IdentityFlatten[G], arg2: Identity[B]): G[B]", "member" : "zio.prelude.ForEach.foldMapM", "link" : "zio\/prelude\/NonEmptyForEach.html#foldMapM[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$9:zio.prelude.Covariant[G],implicitevidence$10:zio.prelude.IdentityFlatten[G],implicitevidence$11:zio.prelude.Identity[B]):G[B]", "kind" : "def"}, {"label" : "foldMap", "tail" : "(fa: F[A])(f: (A) => B)(arg0: Identity[B]): B", "member" : "zio.prelude.ForEach.foldMap", "link" : "zio\/prelude\/NonEmptyForEach.html#foldMap[A,B](fa:F[A])(f:A=>B)(implicitevidence$8:zio.prelude.Identity[B]):B", "kind" : "def"}, {"label" : "foldLeftM", "tail" : "(fa: F[A])(s: S)(f: (S, A) => G[S])(arg0: IdentityFlatten[G], arg1: Covariant[G]): G[S]", "member" : "zio.prelude.ForEach.foldLeftM", "link" : "zio\/prelude\/NonEmptyForEach.html#foldLeftM[G[+_],S,A](fa:F[A])(s:S)(f:(S,A)=>G[S])(implicitevidence$6:zio.prelude.IdentityFlatten[G],implicitevidence$7:zio.prelude.Covariant[G]):G[S]", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(fa: F[A])(s: S)(f: (S, A) => S): S", "member" : "zio.prelude.ForEach.foldLeft", "link" : "zio\/prelude\/NonEmptyForEach.html#foldLeft[S,A](fa:F[A])(s:S)(f:(S,A)=>S):S", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: F[A])(arg0: Identity[A]): A", "member" : "zio.prelude.ForEach.fold", "link" : "zio\/prelude\/NonEmptyForEach.html#fold[A](fa:F[A])(implicitevidence$5:zio.prelude.Identity[A]):A", "kind" : "def"}, {"label" : "flip", "tail" : "(fa: F[G[A]])(arg0: IdentityBoth[G], arg1: Covariant[G]): G[F[A]]", "member" : "zio.prelude.ForEach.flip", "link" : "zio\/prelude\/NonEmptyForEach.html#flip[G[+_],A](fa:F[G[A]])(implicitevidence$3:zio.prelude.IdentityBoth[G],implicitevidence$4:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(fa: F[A])(f: (A) => Boolean): Option[A]", "member" : "zio.prelude.ForEach.find", "link" : "zio\/prelude\/NonEmptyForEach.html#find[A](fa:F[A])(f:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(fa: F[A])(f: (A) => Boolean): Boolean", "member" : "zio.prelude.ForEach.exists", "link" : "zio\/prelude\/NonEmptyForEach.html#exists[A](fa:F[A])(f:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "count", "tail" : "(fa: F[A])(f: (A) => Boolean): Int", "member" : "zio.prelude.ForEach.count", "link" : "zio\/prelude\/NonEmptyForEach.html#count[A](fa:F[A])(f:A=>Boolean):Int", "kind" : "def"}, {"label" : "contains", "tail" : "(fa: F[A])(a: A1)(A: Equal[A1]): Boolean", "member" : "zio.prelude.ForEach.contains", "link" : "zio\/prelude\/NonEmptyForEach.html#contains[A,A1>:A](fa:F[A])(a:A1)(implicitA:zio.prelude.Equal[A1]):Boolean", "kind" : "def"}, {"label" : "compose", "tail" : "(g: Contravariant[G]): Contravariant[[-A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/NonEmptyForEach.html#compose[G[-_]](implicitg:zio.prelude.Contravariant[G]):zio.prelude.Contravariant[[-A]F[G[A]]]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Covariant[G]): Covariant[[+A]F[G[A]]]", "member" : "zio.prelude.Covariant.compose", "link" : "zio\/prelude\/NonEmptyForEach.html#compose[G[+_]](implicitg:zio.prelude.Covariant[G]):zio.prelude.Covariant[[+A]F[G[A]]]", "kind" : "final def"}, {"label" : "invmap", "tail" : "(f: <=>[A, B]): <=>[F[A], F[B]]", "member" : "zio.prelude.Covariant.invmap", "link" : "zio\/prelude\/NonEmptyForEach.html#invmap[A,B](f:A<=>B):F[A]<=>F[B]", "kind" : "final def"}, {"label" : "fproductLeft", "tail" : "(f: (A) => B): (F[A]) => F[(B, A)]", "member" : "zio.prelude.Covariant.fproductLeft", "link" : "zio\/prelude\/NonEmptyForEach.html#fproductLeft[A,B](f:A=>B):F[A]=>F[(B,A)]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(f: (A) => B): (F[A]) => F[(A, B)]", "member" : "zio.prelude.Covariant.fproduct", "link" : "zio\/prelude\/NonEmptyForEach.html#fproduct[A,B](f:A=>B):F[A]=>F[(A,B)]", "kind" : "def"}, {"label" : "mapSubset", "tail" : "(f: (A) => B)(arg0: AnyType[B]): (F[A]) => F[B]", "member" : "zio.prelude.Covariant.mapSubset", "link" : "zio\/prelude\/NonEmptyForEach.html#mapSubset[A,B](f:A=>B)(implicitevidence$2:zio.prelude.AnyType[B]):F[A]=>F[B]", "kind" : "final def"}, {"label" : "compose", "tail" : "(g: Invariant[G]): Invariant[[A]F[G[A]]]", "member" : "zio.prelude.Invariant.compose", "link" : "zio\/prelude\/NonEmptyForEach.html#compose[G[_]](implicitg:zio.prelude.Invariant[G]):zio.prelude.Invariant[[A]F[G[A]]]", "kind" : "final def"}, {"label" : "compositionLaw", "tail" : "(fa: F[A], f: <=>[A, B], g: <=>[B, C])(equal: Equal[F[C]]): Boolean", "member" : "zio.prelude.Invariant.compositionLaw", "link" : "zio\/prelude\/NonEmptyForEach.html#compositionLaw[A,B,C](fa:F[A],f:A<=>B,g:B<=>C)(implicitequal:zio.prelude.Equal[F[C]]):Boolean", "kind" : "def"}, {"label" : "identityLaw1", "tail" : "(fa: F[A])(equal: Equal[F[A]]): Boolean", "member" : "zio.prelude.Invariant.identityLaw1", "link" : "zio\/prelude\/NonEmptyForEach.html#identityLaw1[A](fa:F[A])(implicitequal:zio.prelude.Equal[F[A]]):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyForEach.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyForEach.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyForEach.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyForEach.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyForEach.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyForEach.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyForEach.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEach.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyForEach.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyForEach.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyForEach.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyForEach.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyForEach.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyForEach.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyForEach.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyForEach.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyForEach.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "forEach1", "tail" : "(fa: F[A])(f: (A) => G[B])(arg0: AssociativeBoth[G], arg1: Covariant[G]): G[F[B]]", "member" : "zio.prelude.NonEmptyForEach.forEach1", "link" : "zio\/prelude\/NonEmptyForEach.html#forEach1[G[+_],A,B](fa:F[A])(f:A=>G[B])(implicitevidence$1:zio.prelude.AssociativeBoth[G],implicitevidence$2:zio.prelude.Covariant[G]):G[F[B]]", "kind" : "abstract def"}], "shortDescription" : "A NonEmptyForEach describes a ForEach that is guaranteed tocontain at least one element, such as a NonEmptyList, a NonEmptyChunk,or certain tree like data structures."}, {"name" : "zio.prelude.NonEmptyForEachSyntax", "trait" : "zio\/prelude\/NonEmptyForEachSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "Flip1Ops", "tail" : "", "member" : "zio.prelude.NonEmptyForEachSyntax.Flip1Ops", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#Flip1Ops[F[+_],G[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "NonEmptyForEachOps", "tail" : "", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#NonEmptyForEachOps[F[+_],A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NonEmptyForEachSyntax.Flip1Ops", "shortDescription" : "Provides infix syntax for flip1.", "members_class" : [{"label" : "flip1", "tail" : "(nonEmptyForEach: NonEmptyForEach[F], associativeBoth: AssociativeBoth[G], covariant: Covariant[G]): G[F[A]]", "member" : "zio.prelude.NonEmptyForEachSyntax.Flip1Ops.flip1", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#flip1[B](implicitnonEmptyForEach:zio.prelude.NonEmptyForEach[F],implicitassociativeBoth:zio.prelude.AssociativeBoth[G],implicitcovariant:zio.prelude.Covariant[G]):G[F[A]]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptyForEachSyntax.Flip1Ops#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptyForEachSyntax$Flip1Ops.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps", "shortDescription" : "Provides infix syntax for traversing collections.", "members_class" : [{"label" : "toNonEmptyList", "tail" : "(F: NonEmptyForEach[F]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.toNonEmptyList", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#toNonEmptyList(implicitF:zio.prelude.NonEmptyForEach[F]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "toNonEmptyChunk", "tail" : "(F: NonEmptyForEach[F]): NonEmptyChunk[A]", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.toNonEmptyChunk", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#toNonEmptyChunk(implicitF:zio.prelude.NonEmptyForEach[F]):zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "reduceMapRight", "tail" : "(map: (A) => B)(reduce: (A, B) => B)(F: NonEmptyForEach[F]): B", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduceMapRight", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduceMapRight[B](map:A=>B)(reduce:(A,B)=>B)(implicitF:zio.prelude.NonEmptyForEach[F]):B", "kind" : "def"}, {"label" : "reduceMapLeft", "tail" : "(map: (A) => B)(reduce: (B, A) => B)(F: NonEmptyForEach[F]): B", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduceMapLeft", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduceMapLeft[B](map:A=>B)(reduce:(B,A)=>B)(implicitF:zio.prelude.NonEmptyForEach[F]):B", "kind" : "def"}, {"label" : "reduceMap", "tail" : "(f: (A) => B)(arg0: Associative[B], F: NonEmptyForEach[F]): B", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduceMap", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduceMap[B](f:A=>B)(implicitevidence$21:zio.prelude.Associative[B],implicitF:zio.prelude.NonEmptyForEach[F]):B", "kind" : "def"}, {"label" : "reduceIdempotent1", "tail" : "(F: NonEmptyForEach[F], ia: Idempotent[A], ea: Equal[A]): A", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduceIdempotent1", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduceIdempotent1(implicitF:zio.prelude.NonEmptyForEach[F],implicitia:zio.prelude.Idempotent[A],implicitea:zio.prelude.Equal[A]):A", "kind" : "def"}, {"label" : "reduce1", "tail" : "(F: NonEmptyForEach[F], A: Associative[A]): A", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduce1", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduce1(implicitF:zio.prelude.NonEmptyForEach[F],implicitA:zio.prelude.Associative[A]):A", "kind" : "def"}, {"label" : "reduceAll", "tail" : "(f: (A, A) => A)(F: NonEmptyForEach[F]): A", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.reduceAll", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#reduceAll(f:(A,A)=>A)(implicitF:zio.prelude.NonEmptyForEach[F]):A", "kind" : "def"}, {"label" : "forEach1_", "tail" : "(f: (A) => G[Any])(arg0: AssociativeBoth[G], arg1: Covariant[G], F: NonEmptyForEach[F]): G[Unit]", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.forEach1_", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#forEach1_[G[+_]](f:A=>G[Any])(implicitevidence$19:zio.prelude.AssociativeBoth[G],implicitevidence$20:zio.prelude.Covariant[G],implicitF:zio.prelude.NonEmptyForEach[F]):G[Unit]", "kind" : "def"}, {"label" : "forEach1", "tail" : "(f: (A) => G[B])(arg0: AssociativeBoth[G], arg1: Covariant[G], F: NonEmptyForEach[F]): G[F[B]]", "member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps.forEach1", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#forEach1[G[+_],B](f:A=>G[B])(implicitevidence$17:zio.prelude.AssociativeBoth[G],implicitevidence$18:zio.prelude.Covariant[G],implicitF:zio.prelude.NonEmptyForEach[F]):G[F[B]]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptyForEachSyntax.NonEmptyForEachOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptyForEachSyntax$NonEmptyForEachOps.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptyList", "object" : "zio\/prelude\/NonEmptyList$.html", "members_object" : [{"label" : "unfold", "tail" : "(start: S)(project: (S) => A)(iterate: (S) => Option[S]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.unfold", "link" : "zio\/prelude\/NonEmptyList$.html#unfold[S,A](start:S)(project:S=>A)(iterate:S=>Option[S]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "toCons", "tail" : "(nonEmptyList: NonEmptyList[A]): ::[A]", "member" : "zio.prelude.NonEmptyList.toCons", "link" : "zio\/prelude\/NonEmptyList$.html#toCons[A](nonEmptyList:zio.prelude.NonEmptyList[A]):::[A]", "kind" : "implicit def"}, {"label" : "single", "tail" : "(head: A): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.single", "link" : "zio\/prelude\/NonEmptyList$.html#single[A](head:A):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(start: A)(iterate: (A) => Option[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.iterate", "link" : "zio\/prelude\/NonEmptyList$.html#iterate[A](start:A)(iterate:A=>Option[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "fromNonEmptyChunk", "tail" : "(nonEmptyChunk: NonEmptyChunk[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.fromNonEmptyChunk", "link" : "zio\/prelude\/NonEmptyList$.html#fromNonEmptyChunk[A](nonEmptyChunk:zio.NonEmptyChunk[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(head: A, tail: Iterable[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.fromIterable", "link" : "zio\/prelude\/NonEmptyList$.html#fromIterable[A](head:A,tail:Iterable[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "fromIterableOption", "tail" : "(iterable: Iterable[A]): Option[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.fromIterableOption", "link" : "zio\/prelude\/NonEmptyList$.html#fromIterableOption[A](iterable:Iterable[A]):Option[zio.prelude.NonEmptyList[A]]", "kind" : "def"}, {"label" : "fromCons", "tail" : "(cons: ::[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.fromCons", "link" : "zio\/prelude\/NonEmptyList$.html#fromCons[A](cons:::[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "cons", "tail" : "(head: A, tail: NonEmptyList[A]): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.cons", "link" : "zio\/prelude\/NonEmptyList$.html#cons[A](head:A,tail:zio.prelude.NonEmptyList[A]):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(head: A, tail: A*): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.apply", "link" : "zio\/prelude\/NonEmptyList$.html#apply[A](head:A,tail:A*):zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "NonEmptyListNonEmptyForEach", "tail" : ": NonEmptyForEach[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListNonEmptyForEach", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListNonEmptyForEach:zio.prelude.NonEmptyForEach[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListIdentityBoth", "tail" : ": IdentityBoth[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListIdentityBoth", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListIdentityBoth:zio.prelude.IdentityBoth[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListHash", "tail" : "(arg0: Hash[A]): Hash[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.NonEmptyListHash", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListHash[A](implicitevidence$6:zio.prelude.Hash[A]):zio.prelude.Hash[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListDeriveEqual", "tail" : ": DeriveEqual[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListDeriveEqual", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListDeriveEqual:zio.prelude.DeriveEqual[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListEqual", "tail" : "(arg0: Equal[A]): Equal[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.NonEmptyListEqual", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListEqual[A](implicitevidence$4:zio.prelude.Equal[A]):zio.prelude.Equal[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListDebug", "tail" : "(arg0: Debug[A]): Debug[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.NonEmptyListDebug", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListDebug[A](implicitevidence$3:zio.prelude.Debug[A]):zio.prelude.Debug[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListCovariant", "tail" : ": Covariant[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListCovariant", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListCovariant:zio.prelude.Covariant[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListIdentityFlatten", "tail" : ": IdentityFlatten[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListIdentityFlatten", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListIdentityFlatten:zio.prelude.IdentityFlatten[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListAssociativeEither", "tail" : ": AssociativeEither[NonEmptyList]", "member" : "zio.prelude.NonEmptyList.NonEmptyListAssociativeEither", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListAssociativeEither:zio.prelude.AssociativeEither[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "NonEmptyListAssociative", "tail" : "(): Associative[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.NonEmptyListAssociative", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListAssociative[A]:zio.prelude.Associative[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "Single", "tail" : "", "member" : "zio.prelude.NonEmptyList.Single", "link" : "zio\/prelude\/NonEmptyList$.html#Single[+A]extendsNonEmptyList[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Cons", "tail" : "", "member" : "zio.prelude.NonEmptyList.Cons", "link" : "zio\/prelude\/NonEmptyList$.html#Cons[+A]extendsNonEmptyList[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "NonEmptyListPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[NonEmptyList[A]]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListPartialOrd", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListPartialOrd[A](implicitevidence$10:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListOrd", "tail" : "(arg0: Ord[A]): Ord[NonEmptyList[A]]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListOrd", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListOrd[A](implicitevidence$9:zio.prelude.Ord[A]):zio.prelude.Ord[zio.prelude.NonEmptyList[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyListCommutativeBoth", "tail" : ": CommutativeBoth[NonEmptyList]", "member" : "zio.prelude.LowPriorityNonEmptyListImplicits.NonEmptyListCommutativeBoth", "link" : "zio\/prelude\/NonEmptyList$.html#NonEmptyListCommutativeBoth:zio.prelude.CommutativeBoth[zio.prelude.NonEmptyList]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyList$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyList$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/NonEmptyList.html", "kind" : "trait", "members_trait" : [{"label" : "zipWithIndex", "tail" : "(): NonEmptyList[(A, Int)]", "member" : "zio.prelude.NonEmptyList.zipWithIndex", "link" : "zio\/prelude\/NonEmptyList.html#zipWithIndex:zio.prelude.NonEmptyList[(A,Int)]", "kind" : "final def"}, {"label" : "zipWith", "tail" : "(that: NonEmptyList[B])(f: (A, B) => C): NonEmptyList[C]", "member" : "zio.prelude.NonEmptyList.zipWith", "link" : "zio\/prelude\/NonEmptyList.html#zipWith[B,C](that:zio.prelude.NonEmptyList[B])(f:(A,B)=>C):zio.prelude.NonEmptyList[C]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: NonEmptyList[B]): NonEmptyList[(A, B)]", "member" : "zio.prelude.NonEmptyList.zip", "link" : "zio\/prelude\/NonEmptyList.html#zip[B](that:zio.prelude.NonEmptyList[B]):zio.prelude.NonEmptyList[(A,B)]", "kind" : "final def"}, {"label" : "toNonEmptyChunk", "tail" : "(): NonEmptyChunk[A]", "member" : "zio.prelude.NonEmptyList.toNonEmptyChunk", "link" : "zio\/prelude\/NonEmptyList.html#toNonEmptyChunk:zio.NonEmptyChunk[A]", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.prelude.NonEmptyList.toString", "link" : "zio\/prelude\/NonEmptyList.html#toString():String", "kind" : "final def"}, {"label" : "toCons", "tail" : "(): ::[A1]", "member" : "zio.prelude.NonEmptyList.toCons", "link" : "zio\/prelude\/NonEmptyList.html#toCons[A1>:A]:::[A1]", "kind" : "final def"}, {"label" : "takeWhile", "tail" : "(f: (A) => Boolean): List[A]", "member" : "zio.prelude.NonEmptyList.takeWhile", "link" : "zio\/prelude\/NonEmptyList.html#takeWhile(f:A=>Boolean):List[A]", "kind" : "final def"}, {"label" : "takeRight", "tail" : "(n: Int): List[A]", "member" : "zio.prelude.NonEmptyList.takeRight", "link" : "zio\/prelude\/NonEmptyList.html#takeRight(n:Int):List[A]", "kind" : "final def"}, {"label" : "take", "tail" : "(n: Int): List[A]", "member" : "zio.prelude.NonEmptyList.take", "link" : "zio\/prelude\/NonEmptyList.html#take(n:Int):List[A]", "kind" : "final def"}, {"label" : "tails", "tail" : "(): NonEmptyList[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.tails", "link" : "zio\/prelude\/NonEmptyList.html#tails:zio.prelude.NonEmptyList[zio.prelude.NonEmptyList[A]]", "kind" : "final def"}, {"label" : "tailNonEmpty", "tail" : "(): Option[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyList.tailNonEmpty", "link" : "zio\/prelude\/NonEmptyList.html#tailNonEmpty:Option[zio.prelude.NonEmptyList[A]]", "kind" : "final def"}, {"label" : "sum", "tail" : "(A: Associative[Sum[A1]]): A1", "member" : "zio.prelude.NonEmptyList.sum", "link" : "zio\/prelude\/NonEmptyList.html#sum[A1>:A](implicitA:zio.prelude.Associative[zio.prelude.newtypes.Sum[A1]]):A1", "kind" : "final def"}, {"label" : "reverse", "tail" : "(): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.reverse", "link" : "zio\/prelude\/NonEmptyList.html#reverse:zio.prelude.NonEmptyList[A]", "kind" : "final def"}, {"label" : "reduceRight", "tail" : "(f: (A1, A1) => A1): A1", "member" : "zio.prelude.NonEmptyList.reduceRight", "link" : "zio\/prelude\/NonEmptyList.html#reduceRight[A1>:A](f:(A1,A1)=>A1):A1", "kind" : "final def"}, {"label" : "reduceMapRight", "tail" : "(map: (A) => B)(reduce: (A, B) => B): B", "member" : "zio.prelude.NonEmptyList.reduceMapRight", "link" : "zio\/prelude\/NonEmptyList.html#reduceMapRight[B](map:A=>B)(reduce:(A,B)=>B):B", "kind" : "final def"}, {"label" : "reduceMapLeft", "tail" : "(map: (A) => B)(reduce: (B, A) => B): B", "member" : "zio.prelude.NonEmptyList.reduceMapLeft", "link" : "zio\/prelude\/NonEmptyList.html#reduceMapLeft[B](map:A=>B)(reduce:(B,A)=>B):B", "kind" : "final def"}, {"label" : "reduceMap", "tail" : "(f: (A) => B)(B: Associative[B]): B", "member" : "zio.prelude.NonEmptyList.reduceMap", "link" : "zio\/prelude\/NonEmptyList.html#reduceMap[B](f:A=>B)(implicitB:zio.prelude.Associative[B]):B", "kind" : "final def"}, {"label" : "reduceLeft", "tail" : "(f: (A1, A1) => A1): A1", "member" : "zio.prelude.NonEmptyList.reduceLeft", "link" : "zio\/prelude\/NonEmptyList.html#reduceLeft[A1>:A](f:(A1,A1)=>A1):A1", "kind" : "final def"}, {"label" : "reduce", "tail" : "(A: Associative[A1]): A1", "member" : "zio.prelude.NonEmptyList.reduce", "link" : "zio\/prelude\/NonEmptyList.html#reduce[A1>:A](implicitA:zio.prelude.Associative[A1]):A1", "kind" : "final def"}, {"label" : "product", "tail" : "(A: Associative[Prod[A1]]): A1", "member" : "zio.prelude.NonEmptyList.product", "link" : "zio\/prelude\/NonEmptyList.html#product[A1>:A](implicitA:zio.prelude.Associative[zio.prelude.newtypes.Prod[A1]]):A1", "kind" : "final def"}, {"label" : "mkString", "tail" : "(start: String, sep: String, end: String): String", "member" : "zio.prelude.NonEmptyList.mkString", "link" : "zio\/prelude\/NonEmptyList.html#mkString(start:String,sep:String,end:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(sep: String): String", "member" : "zio.prelude.NonEmptyList.mkString", "link" : "zio\/prelude\/NonEmptyList.html#mkString(sep:String):String", "kind" : "final def"}, {"label" : "mkString", "tail" : "(): String", "member" : "zio.prelude.NonEmptyList.mkString", "link" : "zio\/prelude\/NonEmptyList.html#mkString:String", "kind" : "final def"}, {"label" : "minBy", "tail" : "(f: (A) => B)(B: Ord[B]): A", "member" : "zio.prelude.NonEmptyList.minBy", "link" : "zio\/prelude\/NonEmptyList.html#minBy[B](f:A=>B)(implicitB:zio.prelude.Ord[B]):A", "kind" : "final def"}, {"label" : "min", "tail" : "(A: Ord[A]): A", "member" : "zio.prelude.NonEmptyList.min", "link" : "zio\/prelude\/NonEmptyList.html#min(implicitA:zio.prelude.Ord[A]):A", "kind" : "final def"}, {"label" : "maxBy", "tail" : "(f: (A) => B)(B: Ord[B]): A", "member" : "zio.prelude.NonEmptyList.maxBy", "link" : "zio\/prelude\/NonEmptyList.html#maxBy[B](f:A=>B)(implicitB:zio.prelude.Ord[B]):A", "kind" : "final def"}, {"label" : "max", "tail" : "(A: Ord[A]): A", "member" : "zio.prelude.NonEmptyList.max", "link" : "zio\/prelude\/NonEmptyList.html#max(implicitA:zio.prelude.Ord[A]):A", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): NonEmptyList[B]", "member" : "zio.prelude.NonEmptyList.map", "link" : "zio\/prelude\/NonEmptyList.html#map[B](f:A=>B):zio.prelude.NonEmptyList[B]", "kind" : "final def"}, {"label" : "length", "tail" : "(): Int", "member" : "zio.prelude.NonEmptyList.length", "link" : "zio\/prelude\/NonEmptyList.html#length:Int", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.prelude.NonEmptyList.hashCode", "link" : "zio\/prelude\/NonEmptyList.html#hashCode():Int", "kind" : "final def"}, {"label" : "forEach", "tail" : "(f: (A) => F[B])(arg0: AssociativeBoth[F], arg1: Covariant[F]): F[NonEmptyList[B]]", "member" : "zio.prelude.NonEmptyList.forEach", "link" : "zio\/prelude\/NonEmptyList.html#forEach[F[+_],B](f:A=>F[B])(implicitevidence$1:zio.prelude.AssociativeBoth[F],implicitevidence$2:zio.prelude.Covariant[F]):F[zio.prelude.NonEmptyList[B]]", "kind" : "final def"}, {"label" : "forall", "tail" : "(f: (A) => Boolean): Boolean", "member" : "zio.prelude.NonEmptyList.forall", "link" : "zio\/prelude\/NonEmptyList.html#forall(f:A=>Boolean):Boolean", "kind" : "final def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) => B): B", "member" : "zio.prelude.NonEmptyList.foldRight", "link" : "zio\/prelude\/NonEmptyList.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "final def"}, {"label" : "foldLeft", "tail" : "(z: B)(f: (B, A) => B): B", "member" : "zio.prelude.NonEmptyList.foldLeft", "link" : "zio\/prelude\/NonEmptyList.html#foldLeft[B](z:B)(f:(B,A)=>B):B", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, NonEmptyList[B]]): NonEmptyList[B]", "member" : "zio.prelude.NonEmptyList.flatten", "link" : "zio\/prelude\/NonEmptyList.html#flatten[B](implicitev:A<:<zio.prelude.NonEmptyList[B]):zio.prelude.NonEmptyList[B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => NonEmptyList[B]): NonEmptyList[B]", "member" : "zio.prelude.NonEmptyList.flatMap", "link" : "zio\/prelude\/NonEmptyList.html#flatMap[B](f:A=>zio.prelude.NonEmptyList[B]):zio.prelude.NonEmptyList[B]", "kind" : "final def"}, {"label" : "find", "tail" : "(f: (A) => Boolean): Option[A]", "member" : "zio.prelude.NonEmptyList.find", "link" : "zio\/prelude\/NonEmptyList.html#find(f:A=>Boolean):Option[A]", "kind" : "final def"}, {"label" : "exists", "tail" : "(f: (A) => Boolean): Boolean", "member" : "zio.prelude.NonEmptyList.exists", "link" : "zio\/prelude\/NonEmptyList.html#exists(f:A=>Boolean):Boolean", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.prelude.NonEmptyList.equals", "link" : "zio\/prelude\/NonEmptyList.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "dropWhile", "tail" : "(f: (A) => Boolean): List[A]", "member" : "zio.prelude.NonEmptyList.dropWhile", "link" : "zio\/prelude\/NonEmptyList.html#dropWhile(f:A=>Boolean):List[A]", "kind" : "final def"}, {"label" : "dropRight", "tail" : "(n: Int): List[A]", "member" : "zio.prelude.NonEmptyList.dropRight", "link" : "zio\/prelude\/NonEmptyList.html#dropRight(n:Int):List[A]", "kind" : "final def"}, {"label" : "drop", "tail" : "(n: Int): List[A]", "member" : "zio.prelude.NonEmptyList.drop", "link" : "zio\/prelude\/NonEmptyList.html#drop(n:Int):List[A]", "kind" : "final def"}, {"label" : "peelNonEmpty", "tail" : "(): (A, Option[NonEmptyList[A]])", "member" : "zio.prelude.NonEmptyList.peelNonEmpty", "link" : "zio\/prelude\/NonEmptyList.html#peelNonEmpty:(A,Option[zio.prelude.NonEmptyList[A]])", "kind" : "final def"}, {"label" : "peel", "tail" : "(): (A, List[A])", "member" : "zio.prelude.NonEmptyList.peel", "link" : "zio\/prelude\/NonEmptyList.html#peel:(A,List[A])", "kind" : "final def"}, {"label" : "distinct", "tail" : "(): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyList.distinct", "link" : "zio\/prelude\/NonEmptyList.html#distinct:zio.prelude.NonEmptyList[A]", "kind" : "final def"}, {"label" : "count", "tail" : "(f: (A) => Boolean): Int", "member" : "zio.prelude.NonEmptyList.count", "link" : "zio\/prelude\/NonEmptyList.html#count(f:A=>Boolean):Int", "kind" : "final def"}, {"label" : "corresponds", "tail" : "(that: NonEmptyList[B])(f: (A, B) => Boolean): Boolean", "member" : "zio.prelude.NonEmptyList.corresponds", "link" : "zio\/prelude\/NonEmptyList.html#corresponds[B](that:zio.prelude.NonEmptyList[B])(f:(A,B)=>Boolean):Boolean", "kind" : "final def"}, {"label" : "contains", "tail" : "(a: A1)(A: Equal[A1]): Boolean", "member" : "zio.prelude.NonEmptyList.contains", "link" : "zio\/prelude\/NonEmptyList.html#contains[A1>:A](a:A1)(implicitA:zio.prelude.Equal[A1]):Boolean", "kind" : "final def"}, {"label" : "++", "tail" : "(that: NonEmptyList[A1]): NonEmptyList[A1]", "member" : "zio.prelude.NonEmptyList.++", "link" : "zio\/prelude\/NonEmptyList.html#++[A1>:A](that:zio.prelude.NonEmptyList[A1]):zio.prelude.NonEmptyList[A1]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyList.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyList.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyList.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "head", "tail" : "(): A", "member" : "zio.prelude.NonEmptyList.head", "link" : "zio\/prelude\/NonEmptyList.html#head:A", "kind" : "abstract def"}], "shortDescription" : "A NonEmptyList[A] is a list of one or more values of type A."}, {"name" : "zio.prelude.NonEmptyListSyntax", "trait" : "zio\/prelude\/NonEmptyListSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "NonEmptyListConsOps", "tail" : "", "member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListConsOps", "link" : "zio\/prelude\/NonEmptyListSyntax.html#NonEmptyListConsOps[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "NonEmptyListListOps", "tail" : "", "member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListListOps", "link" : "zio\/prelude\/NonEmptyListSyntax.html#NonEmptyListListOps[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyListSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyListSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyListSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyListSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyListSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyListSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyListSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyListSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyListSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyListSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyListSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyListSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyListSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyListSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NonEmptyListSyntax.NonEmptyListConsOps", "shortDescription" : "", "members_class" : [{"label" : "toNonEmptyList", "tail" : "(): NonEmptyList[A]", "member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListConsOps.toNonEmptyList", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#toNonEmptyList:zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListConsOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListConsOps.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptyListSyntax.NonEmptyListListOps", "shortDescription" : "", "members_class" : [{"label" : "toNonEmptyList", "tail" : "(): Option[NonEmptyList[A]]", "member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListListOps.toNonEmptyList", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#toNonEmptyList:Option[zio.prelude.NonEmptyList[A]]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptyListSyntax.NonEmptyListListOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptyListSyntax$NonEmptyListListOps.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptySet", "shortDescription" : "", "object" : "zio\/prelude\/NonEmptySet$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "zio.prelude.NonEmptySet.toString", "link" : "zio\/prelude\/NonEmptySet.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.prelude.NonEmptySet.equals", "link" : "zio\/prelude\/NonEmptySet.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.prelude.NonEmptySet.hashCode", "link" : "zio\/prelude\/NonEmptySet.html#hashCode():Int", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => B): NonEmptySet[B]", "member" : "zio.prelude.NonEmptySet.map", "link" : "zio\/prelude\/NonEmptySet.html#map[B](f:A=>B):zio.prelude.NonEmptySet[B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, NonEmptySet[B]]): NonEmptySet[B]", "member" : "zio.prelude.NonEmptySet.flatten", "link" : "zio\/prelude\/NonEmptySet.html#flatten[B](implicitev:A<:<zio.prelude.NonEmptySet[B]):zio.prelude.NonEmptySet[B]", "kind" : "def"}, {"label" : "tailNonEmpty", "tail" : "(): Option[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.tailNonEmpty", "link" : "zio\/prelude\/NonEmptySet.html#tailNonEmpty:Option[zio.prelude.NonEmptySet[A]]", "kind" : "def"}, {"label" : "remove", "tail" : "(elem: A): Set[A]", "member" : "zio.prelude.NonEmptySet.remove", "link" : "zio\/prelude\/NonEmptySet.html#remove(elem:A):Set[A]", "kind" : "def"}, {"label" : "add", "tail" : "(elem: A): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.add", "link" : "zio\/prelude\/NonEmptySet.html#add(elem:A):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "++", "tail" : "(elems: Iterable[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.++", "link" : "zio\/prelude\/NonEmptySet.html#++(elems:Iterable[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "union", "tail" : "(that: Set[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.union", "link" : "zio\/prelude\/NonEmptySet.html#union(that:Set[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: A): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.+", "link" : "zio\/prelude\/NonEmptySet.html#+(elem:A):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "toNonEmptyList", "tail" : "(): NonEmptyList[A]", "member" : "zio.prelude.NonEmptySet.toNonEmptyList", "link" : "zio\/prelude\/NonEmptySet.html#toNonEmptyList:zio.prelude.NonEmptyList[A]", "kind" : "def"}, {"label" : "toNonEmptyChunk", "tail" : "(): NonEmptyChunk[A]", "member" : "zio.prelude.NonEmptySet.toNonEmptyChunk", "link" : "zio\/prelude\/NonEmptySet.html#toNonEmptyChunk:zio.NonEmptyChunk[A]", "kind" : "def"}, {"label" : "peelNonEmpty", "tail" : "(): (A, Option[NonEmptySet[A]])", "member" : "zio.prelude.NonEmptySet.peelNonEmpty", "link" : "zio\/prelude\/NonEmptySet.html#peelNonEmpty:(A,Option[zio.prelude.NonEmptySet[A]])", "kind" : "def"}, {"label" : "peel", "tail" : "(): (A, Set[A])", "member" : "zio.prelude.NonEmptySet.peel", "link" : "zio\/prelude\/NonEmptySet.html#peel:(A,Set[A])", "kind" : "def"}, {"label" : "toSet", "tail" : "(): Set[A]", "member" : "zio.prelude.NonEmptySet.toSet", "link" : "zio\/prelude\/NonEmptySet.html#toSet:Set[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptySet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptySet.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptySet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptySet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptySet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptySet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptySet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptySet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptySet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptySet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptySet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptySet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptySet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toSet", "tail" : "(nonEmptySet: NonEmptySet[A]): Set[A]", "member" : "zio.prelude.NonEmptySet.toSet", "link" : "zio\/prelude\/NonEmptySet$.html#toSet[A](nonEmptySet:zio.prelude.NonEmptySet[A]):Set[A]", "kind" : "implicit def"}, {"label" : "NonEmptySetInvariant", "tail" : ": Invariant[NonEmptySet]", "member" : "zio.prelude.NonEmptySet.NonEmptySetInvariant", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetInvariant:zio.prelude.Invariant[zio.prelude.NonEmptySet]", "kind" : "implicit val"}, {"label" : "NonEmptySetHashPartialOrd", "tail" : "(): Hash[NonEmptySet[A]] with PartialOrd[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.NonEmptySetHashPartialOrd", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetHashPartialOrd[A]:zio.prelude.Hash[zio.prelude.NonEmptySet[A]]withzio.prelude.PartialOrd[zio.prelude.NonEmptySet[A]]", "kind" : "implicit def"}, {"label" : "NonEmptySetDeriveEqual", "tail" : ": DeriveEqual[NonEmptySet]", "member" : "zio.prelude.NonEmptySet.NonEmptySetDeriveEqual", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetDeriveEqual:zio.prelude.DeriveEqual[zio.prelude.NonEmptySet]", "kind" : "implicit val"}, {"label" : "NonEmptySetDebug", "tail" : "(arg0: Debug[A]): Debug[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.NonEmptySetDebug", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetDebug[A](implicitevidence$1:zio.prelude.Debug[A]):zio.prelude.Debug[zio.prelude.NonEmptySet[A]]", "kind" : "implicit def"}, {"label" : "NonEmptySetCommutativeIdempotent", "tail" : "(): Commutative[NonEmptySet[A]] with Idempotent[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.NonEmptySetCommutativeIdempotent", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetCommutativeIdempotent[A]:zio.prelude.Commutative[zio.prelude.NonEmptySet[A]]withzio.prelude.Idempotent[zio.prelude.NonEmptySet[A]]", "kind" : "implicit def"}, {"label" : "NonEmptySetCommutativeEither", "tail" : ": CommutativeEither[NonEmptySet]", "member" : "zio.prelude.NonEmptySet.NonEmptySetCommutativeEither", "link" : "zio\/prelude\/NonEmptySet$.html#NonEmptySetCommutativeEither:zio.prelude.CommutativeEither[zio.prelude.NonEmptySet]", "kind" : "implicit val"}, {"label" : "union", "tail" : "(l: Set[A], r: NonEmptySet[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.union", "link" : "zio\/prelude\/NonEmptySet$.html#union[A](l:Set[A],r:zio.prelude.NonEmptySet[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "union", "tail" : "(l: NonEmptySet[A], r: Set[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.union", "link" : "zio\/prelude\/NonEmptySet$.html#union[A](l:zio.prelude.NonEmptySet[A],r:Set[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "single", "tail" : "(head: A): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.single", "link" : "zio\/prelude\/NonEmptySet$.html#single[A](head:A):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "fromIterableOption", "tail" : "(iterable: Iterable[A]): Option[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.fromIterableOption", "link" : "zio\/prelude\/NonEmptySet$.html#fromIterableOption[A](iterable:Iterable[A]):Option[zio.prelude.NonEmptySet[A]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(head: A, tail: Iterable[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.fromIterable", "link" : "zio\/prelude\/NonEmptySet$.html#fromIterable[A](head:A,tail:Iterable[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "fromSetOption", "tail" : "(set: Set[A]): Option[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySet.fromSetOption", "link" : "zio\/prelude\/NonEmptySet$.html#fromSetOption[A](set:Set[A]):Option[zio.prelude.NonEmptySet[A]]", "kind" : "def"}, {"label" : "fromSet", "tail" : "(elem: A, others: Set[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.fromSet", "link" : "zio\/prelude\/NonEmptySet$.html#fromSet[A](elem:A,others:Set[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "fromNonEmptyList", "tail" : "(elems: NonEmptyList[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.fromNonEmptyList", "link" : "zio\/prelude\/NonEmptySet$.html#fromNonEmptyList[A](elems:zio.prelude.NonEmptyList[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "fromNonEmptyChunk", "tail" : "(elems: NonEmptyChunk[A]): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.fromNonEmptyChunk", "link" : "zio\/prelude\/NonEmptySet$.html#fromNonEmptyChunk[A](elems:zio.NonEmptyChunk[A]):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "unapply", "tail" : "(arg: NonEmptySet[A]): Some[(A, Set[A])]", "member" : "zio.prelude.NonEmptySet.unapply", "link" : "zio\/prelude\/NonEmptySet$.html#unapply[A](arg:zio.prelude.NonEmptySet[A]):Some[(A,Set[A])]", "kind" : "def"}, {"label" : "apply", "tail" : "(elem: A, others: A*): NonEmptySet[A]", "member" : "zio.prelude.NonEmptySet.apply", "link" : "zio\/prelude\/NonEmptySet$.html#apply[A](elem:A,others:A*):zio.prelude.NonEmptySet[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptySet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptySet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptySet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptySet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptySet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptySet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptySet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptySet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptySet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptySet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptySet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptySet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptySet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptySet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptySet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptySet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptySet.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptySetSyntax", "trait" : "zio\/prelude\/NonEmptySetSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "NonEmptySetSetOps", "tail" : "", "member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetSetOps", "link" : "zio\/prelude\/NonEmptySetSyntax.html#NonEmptySetSetOps[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "NonEmptySetIterableOps", "tail" : "", "member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetIterableOps", "link" : "zio\/prelude\/NonEmptySetSyntax.html#NonEmptySetIterableOps[A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptySetSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptySetSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptySetSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptySetSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptySetSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptySetSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptySetSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptySetSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptySetSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptySetSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptySetSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptySetSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptySetSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptySetSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.NonEmptySetSyntax.NonEmptySetIterableOps", "shortDescription" : "", "members_class" : [{"label" : "toNonEmptySet", "tail" : "(): Option[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetIterableOps.toNonEmptySet", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#toNonEmptySet:Option[zio.prelude.NonEmptySet[A]]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetIterableOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetIterableOps.html", "kind" : "class"}, {"name" : "zio.prelude.NonEmptySetSyntax.NonEmptySetSetOps", "shortDescription" : "", "members_class" : [{"label" : "toNonEmptySet", "tail" : "(): Option[NonEmptySet[A]]", "member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetSetOps.toNonEmptySet", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#toNonEmptySet:Option[zio.prelude.NonEmptySet[A]]", "kind" : "def"}, {"member" : "zio.prelude.NonEmptySetSyntax.NonEmptySetSetOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/NonEmptySetSyntax$NonEmptySetSetOps.html", "kind" : "class"}, {"name" : "zio.prelude.Not", "object" : "zio\/prelude\/Not$.html", "members_object" : [{"label" : "NotAmbiguous2", "tail" : "(ev: A): Not[A]", "member" : "zio.prelude.Not.NotAmbiguous2", "link" : "zio\/prelude\/Not$.html#NotAmbiguous2[A](implicitev:A):zio.prelude.Not[A]", "kind" : "implicit def"}, {"label" : "NotAmbiguous1", "tail" : "(ev: A): Not[A]", "member" : "zio.prelude.Not.NotAmbiguous1", "link" : "zio\/prelude\/Not$.html#NotAmbiguous1[A](implicitev:A):zio.prelude.Not[A]", "kind" : "implicit def"}, {"label" : "Not", "tail" : "(): Not[A]", "member" : "zio.prelude.Not.Not", "link" : "zio\/prelude\/Not$.html#Not[A]:zio.prelude.Not[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Not$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Not$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Not$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Not$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Not$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Not$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Not$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Not$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Not$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Not$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Not$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Not$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Not$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Not$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Not$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Not$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Not.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Not.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Not.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Not.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Not.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Not.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Not.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Not.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Not.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Not.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Not.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Not.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Not.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Not.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Not.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Not.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Not.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Not.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Provides implicit evidence that an instance of A is not in implicit scope."}, {"name" : "zio.prelude.Ord", "object" : "zio\/prelude\/Ord$.html", "members_object" : [{"label" : "VectorOrd", "tail" : "(arg0: Ord[A]): Ord[Vector[A]]", "member" : "zio.prelude.Ord.VectorOrd", "link" : "zio\/prelude\/Ord$.html#VectorOrd[A](implicitevidence$259:zio.prelude.Ord[A]):zio.prelude.Ord[Vector[A]]", "kind" : "implicit def"}, {"label" : "Tuple22Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q], arg17: Ord[R], arg18: Ord[S], arg19: Ord[T], arg20: Ord[U], arg21: Ord[V]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.Ord.Tuple22Ord", "link" : "zio\/prelude\/Ord$.html#Tuple22Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$237:zio.prelude.Ord[A],implicitevidence$238:zio.prelude.Ord[B],implicitevidence$239:zio.prelude.Ord[C],implicitevidence$240:zio.prelude.Ord[D],implicitevidence$241:zio.prelude.Ord[E],implicitevidence$242:zio.prelude.Ord[F],implicitevidence$243:zio.prelude.Ord[G],implicitevidence$244:zio.prelude.Ord[H],implicitevidence$245:zio.prelude.Ord[I],implicitevidence$246:zio.prelude.Ord[J],implicitevidence$247:zio.prelude.Ord[K],implicitevidence$248:zio.prelude.Ord[L],implicitevidence$249:zio.prelude.Ord[M],implicitevidence$250:zio.prelude.Ord[N],implicitevidence$251:zio.prelude.Ord[O],implicitevidence$252:zio.prelude.Ord[P],implicitevidence$253:zio.prelude.Ord[Q],implicitevidence$254:zio.prelude.Ord[R],implicitevidence$255:zio.prelude.Ord[S],implicitevidence$256:zio.prelude.Ord[T],implicitevidence$257:zio.prelude.Ord[U],implicitevidence$258:zio.prelude.Ord[V]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q], arg17: Ord[R], arg18: Ord[S], arg19: Ord[T], arg20: Ord[U]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.Ord.Tuple21Ord", "link" : "zio\/prelude\/Ord$.html#Tuple21Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$216:zio.prelude.Ord[A],implicitevidence$217:zio.prelude.Ord[B],implicitevidence$218:zio.prelude.Ord[C],implicitevidence$219:zio.prelude.Ord[D],implicitevidence$220:zio.prelude.Ord[E],implicitevidence$221:zio.prelude.Ord[F],implicitevidence$222:zio.prelude.Ord[G],implicitevidence$223:zio.prelude.Ord[H],implicitevidence$224:zio.prelude.Ord[I],implicitevidence$225:zio.prelude.Ord[J],implicitevidence$226:zio.prelude.Ord[K],implicitevidence$227:zio.prelude.Ord[L],implicitevidence$228:zio.prelude.Ord[M],implicitevidence$229:zio.prelude.Ord[N],implicitevidence$230:zio.prelude.Ord[O],implicitevidence$231:zio.prelude.Ord[P],implicitevidence$232:zio.prelude.Ord[Q],implicitevidence$233:zio.prelude.Ord[R],implicitevidence$234:zio.prelude.Ord[S],implicitevidence$235:zio.prelude.Ord[T],implicitevidence$236:zio.prelude.Ord[U]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q], arg17: Ord[R], arg18: Ord[S], arg19: Ord[T]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.Ord.Tuple20Ord", "link" : "zio\/prelude\/Ord$.html#Tuple20Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$196:zio.prelude.Ord[A],implicitevidence$197:zio.prelude.Ord[B],implicitevidence$198:zio.prelude.Ord[C],implicitevidence$199:zio.prelude.Ord[D],implicitevidence$200:zio.prelude.Ord[E],implicitevidence$201:zio.prelude.Ord[F],implicitevidence$202:zio.prelude.Ord[G],implicitevidence$203:zio.prelude.Ord[H],implicitevidence$204:zio.prelude.Ord[I],implicitevidence$205:zio.prelude.Ord[J],implicitevidence$206:zio.prelude.Ord[K],implicitevidence$207:zio.prelude.Ord[L],implicitevidence$208:zio.prelude.Ord[M],implicitevidence$209:zio.prelude.Ord[N],implicitevidence$210:zio.prelude.Ord[O],implicitevidence$211:zio.prelude.Ord[P],implicitevidence$212:zio.prelude.Ord[Q],implicitevidence$213:zio.prelude.Ord[R],implicitevidence$214:zio.prelude.Ord[S],implicitevidence$215:zio.prelude.Ord[T]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q], arg17: Ord[R], arg18: Ord[S]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.Ord.Tuple19Ord", "link" : "zio\/prelude\/Ord$.html#Tuple19Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$177:zio.prelude.Ord[A],implicitevidence$178:zio.prelude.Ord[B],implicitevidence$179:zio.prelude.Ord[C],implicitevidence$180:zio.prelude.Ord[D],implicitevidence$181:zio.prelude.Ord[E],implicitevidence$182:zio.prelude.Ord[F],implicitevidence$183:zio.prelude.Ord[G],implicitevidence$184:zio.prelude.Ord[H],implicitevidence$185:zio.prelude.Ord[I],implicitevidence$186:zio.prelude.Ord[J],implicitevidence$187:zio.prelude.Ord[K],implicitevidence$188:zio.prelude.Ord[L],implicitevidence$189:zio.prelude.Ord[M],implicitevidence$190:zio.prelude.Ord[N],implicitevidence$191:zio.prelude.Ord[O],implicitevidence$192:zio.prelude.Ord[P],implicitevidence$193:zio.prelude.Ord[Q],implicitevidence$194:zio.prelude.Ord[R],implicitevidence$195:zio.prelude.Ord[S]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q], arg17: Ord[R]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.Ord.Tuple18Ord", "link" : "zio\/prelude\/Ord$.html#Tuple18Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$159:zio.prelude.Ord[A],implicitevidence$160:zio.prelude.Ord[B],implicitevidence$161:zio.prelude.Ord[C],implicitevidence$162:zio.prelude.Ord[D],implicitevidence$163:zio.prelude.Ord[E],implicitevidence$164:zio.prelude.Ord[F],implicitevidence$165:zio.prelude.Ord[G],implicitevidence$166:zio.prelude.Ord[H],implicitevidence$167:zio.prelude.Ord[I],implicitevidence$168:zio.prelude.Ord[J],implicitevidence$169:zio.prelude.Ord[K],implicitevidence$170:zio.prelude.Ord[L],implicitevidence$171:zio.prelude.Ord[M],implicitevidence$172:zio.prelude.Ord[N],implicitevidence$173:zio.prelude.Ord[O],implicitevidence$174:zio.prelude.Ord[P],implicitevidence$175:zio.prelude.Ord[Q],implicitevidence$176:zio.prelude.Ord[R]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P], arg16: Ord[Q]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.Ord.Tuple17Ord", "link" : "zio\/prelude\/Ord$.html#Tuple17Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$142:zio.prelude.Ord[A],implicitevidence$143:zio.prelude.Ord[B],implicitevidence$144:zio.prelude.Ord[C],implicitevidence$145:zio.prelude.Ord[D],implicitevidence$146:zio.prelude.Ord[E],implicitevidence$147:zio.prelude.Ord[F],implicitevidence$148:zio.prelude.Ord[G],implicitevidence$149:zio.prelude.Ord[H],implicitevidence$150:zio.prelude.Ord[I],implicitevidence$151:zio.prelude.Ord[J],implicitevidence$152:zio.prelude.Ord[K],implicitevidence$153:zio.prelude.Ord[L],implicitevidence$154:zio.prelude.Ord[M],implicitevidence$155:zio.prelude.Ord[N],implicitevidence$156:zio.prelude.Ord[O],implicitevidence$157:zio.prelude.Ord[P],implicitevidence$158:zio.prelude.Ord[Q]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O], arg15: Ord[P]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.Ord.Tuple16Ord", "link" : "zio\/prelude\/Ord$.html#Tuple16Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$126:zio.prelude.Ord[A],implicitevidence$127:zio.prelude.Ord[B],implicitevidence$128:zio.prelude.Ord[C],implicitevidence$129:zio.prelude.Ord[D],implicitevidence$130:zio.prelude.Ord[E],implicitevidence$131:zio.prelude.Ord[F],implicitevidence$132:zio.prelude.Ord[G],implicitevidence$133:zio.prelude.Ord[H],implicitevidence$134:zio.prelude.Ord[I],implicitevidence$135:zio.prelude.Ord[J],implicitevidence$136:zio.prelude.Ord[K],implicitevidence$137:zio.prelude.Ord[L],implicitevidence$138:zio.prelude.Ord[M],implicitevidence$139:zio.prelude.Ord[N],implicitevidence$140:zio.prelude.Ord[O],implicitevidence$141:zio.prelude.Ord[P]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N], arg14: Ord[O]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.Ord.Tuple15Ord", "link" : "zio\/prelude\/Ord$.html#Tuple15Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$111:zio.prelude.Ord[A],implicitevidence$112:zio.prelude.Ord[B],implicitevidence$113:zio.prelude.Ord[C],implicitevidence$114:zio.prelude.Ord[D],implicitevidence$115:zio.prelude.Ord[E],implicitevidence$116:zio.prelude.Ord[F],implicitevidence$117:zio.prelude.Ord[G],implicitevidence$118:zio.prelude.Ord[H],implicitevidence$119:zio.prelude.Ord[I],implicitevidence$120:zio.prelude.Ord[J],implicitevidence$121:zio.prelude.Ord[K],implicitevidence$122:zio.prelude.Ord[L],implicitevidence$123:zio.prelude.Ord[M],implicitevidence$124:zio.prelude.Ord[N],implicitevidence$125:zio.prelude.Ord[O]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M], arg13: Ord[N]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.Ord.Tuple14Ord", "link" : "zio\/prelude\/Ord$.html#Tuple14Ord[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$97:zio.prelude.Ord[A],implicitevidence$98:zio.prelude.Ord[B],implicitevidence$99:zio.prelude.Ord[C],implicitevidence$100:zio.prelude.Ord[D],implicitevidence$101:zio.prelude.Ord[E],implicitevidence$102:zio.prelude.Ord[F],implicitevidence$103:zio.prelude.Ord[G],implicitevidence$104:zio.prelude.Ord[H],implicitevidence$105:zio.prelude.Ord[I],implicitevidence$106:zio.prelude.Ord[J],implicitevidence$107:zio.prelude.Ord[K],implicitevidence$108:zio.prelude.Ord[L],implicitevidence$109:zio.prelude.Ord[M],implicitevidence$110:zio.prelude.Ord[N]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L], arg12: Ord[M]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.Ord.Tuple13Ord", "link" : "zio\/prelude\/Ord$.html#Tuple13Ord[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$84:zio.prelude.Ord[A],implicitevidence$85:zio.prelude.Ord[B],implicitevidence$86:zio.prelude.Ord[C],implicitevidence$87:zio.prelude.Ord[D],implicitevidence$88:zio.prelude.Ord[E],implicitevidence$89:zio.prelude.Ord[F],implicitevidence$90:zio.prelude.Ord[G],implicitevidence$91:zio.prelude.Ord[H],implicitevidence$92:zio.prelude.Ord[I],implicitevidence$93:zio.prelude.Ord[J],implicitevidence$94:zio.prelude.Ord[K],implicitevidence$95:zio.prelude.Ord[L],implicitevidence$96:zio.prelude.Ord[M]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K], arg11: Ord[L]): Ord[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.Ord.Tuple12Ord", "link" : "zio\/prelude\/Ord$.html#Tuple12Ord[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$72:zio.prelude.Ord[A],implicitevidence$73:zio.prelude.Ord[B],implicitevidence$74:zio.prelude.Ord[C],implicitevidence$75:zio.prelude.Ord[D],implicitevidence$76:zio.prelude.Ord[E],implicitevidence$77:zio.prelude.Ord[F],implicitevidence$78:zio.prelude.Ord[G],implicitevidence$79:zio.prelude.Ord[H],implicitevidence$80:zio.prelude.Ord[I],implicitevidence$81:zio.prelude.Ord[J],implicitevidence$82:zio.prelude.Ord[K],implicitevidence$83:zio.prelude.Ord[L]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J], arg10: Ord[K]): Ord[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.Ord.Tuple11Ord", "link" : "zio\/prelude\/Ord$.html#Tuple11Ord[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$61:zio.prelude.Ord[A],implicitevidence$62:zio.prelude.Ord[B],implicitevidence$63:zio.prelude.Ord[C],implicitevidence$64:zio.prelude.Ord[D],implicitevidence$65:zio.prelude.Ord[E],implicitevidence$66:zio.prelude.Ord[F],implicitevidence$67:zio.prelude.Ord[G],implicitevidence$68:zio.prelude.Ord[H],implicitevidence$69:zio.prelude.Ord[I],implicitevidence$70:zio.prelude.Ord[J],implicitevidence$71:zio.prelude.Ord[K]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I], arg9: Ord[J]): Ord[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.Ord.Tuple10Ord", "link" : "zio\/prelude\/Ord$.html#Tuple10Ord[A,B,C,D,E,F,G,H,I,J](implicitevidence$51:zio.prelude.Ord[A],implicitevidence$52:zio.prelude.Ord[B],implicitevidence$53:zio.prelude.Ord[C],implicitevidence$54:zio.prelude.Ord[D],implicitevidence$55:zio.prelude.Ord[E],implicitevidence$56:zio.prelude.Ord[F],implicitevidence$57:zio.prelude.Ord[G],implicitevidence$58:zio.prelude.Ord[H],implicitevidence$59:zio.prelude.Ord[I],implicitevidence$60:zio.prelude.Ord[J]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H], arg8: Ord[I]): Ord[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.Ord.Tuple9Ord", "link" : "zio\/prelude\/Ord$.html#Tuple9Ord[A,B,C,D,E,F,G,H,I](implicitevidence$42:zio.prelude.Ord[A],implicitevidence$43:zio.prelude.Ord[B],implicitevidence$44:zio.prelude.Ord[C],implicitevidence$45:zio.prelude.Ord[D],implicitevidence$46:zio.prelude.Ord[E],implicitevidence$47:zio.prelude.Ord[F],implicitevidence$48:zio.prelude.Ord[G],implicitevidence$49:zio.prelude.Ord[H],implicitevidence$50:zio.prelude.Ord[I]):zio.prelude.Ord[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G], arg7: Ord[H]): Ord[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.Ord.Tuple8Ord", "link" : "zio\/prelude\/Ord$.html#Tuple8Ord[A,B,C,D,E,F,G,H](implicitevidence$34:zio.prelude.Ord[A],implicitevidence$35:zio.prelude.Ord[B],implicitevidence$36:zio.prelude.Ord[C],implicitevidence$37:zio.prelude.Ord[D],implicitevidence$38:zio.prelude.Ord[E],implicitevidence$39:zio.prelude.Ord[F],implicitevidence$40:zio.prelude.Ord[G],implicitevidence$41:zio.prelude.Ord[H]):zio.prelude.Ord[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F], arg6: Ord[G]): Ord[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.Ord.Tuple7Ord", "link" : "zio\/prelude\/Ord$.html#Tuple7Ord[A,B,C,D,E,F,G](implicitevidence$27:zio.prelude.Ord[A],implicitevidence$28:zio.prelude.Ord[B],implicitevidence$29:zio.prelude.Ord[C],implicitevidence$30:zio.prelude.Ord[D],implicitevidence$31:zio.prelude.Ord[E],implicitevidence$32:zio.prelude.Ord[F],implicitevidence$33:zio.prelude.Ord[G]):zio.prelude.Ord[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E], arg5: Ord[F]): Ord[(A, B, C, D, E, F)]", "member" : "zio.prelude.Ord.Tuple6Ord", "link" : "zio\/prelude\/Ord$.html#Tuple6Ord[A,B,C,D,E,F](implicitevidence$21:zio.prelude.Ord[A],implicitevidence$22:zio.prelude.Ord[B],implicitevidence$23:zio.prelude.Ord[C],implicitevidence$24:zio.prelude.Ord[D],implicitevidence$25:zio.prelude.Ord[E],implicitevidence$26:zio.prelude.Ord[F]):zio.prelude.Ord[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D], arg4: Ord[E]): Ord[(A, B, C, D, E)]", "member" : "zio.prelude.Ord.Tuple5Ord", "link" : "zio\/prelude\/Ord$.html#Tuple5Ord[A,B,C,D,E](implicitevidence$16:zio.prelude.Ord[A],implicitevidence$17:zio.prelude.Ord[B],implicitevidence$18:zio.prelude.Ord[C],implicitevidence$19:zio.prelude.Ord[D],implicitevidence$20:zio.prelude.Ord[E]):zio.prelude.Ord[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C], arg3: Ord[D]): Ord[(A, B, C, D)]", "member" : "zio.prelude.Ord.Tuple4Ord", "link" : "zio\/prelude\/Ord$.html#Tuple4Ord[A,B,C,D](implicitevidence$12:zio.prelude.Ord[A],implicitevidence$13:zio.prelude.Ord[B],implicitevidence$14:zio.prelude.Ord[C],implicitevidence$15:zio.prelude.Ord[D]):zio.prelude.Ord[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B], arg2: Ord[C]): Ord[(A, B, C)]", "member" : "zio.prelude.Ord.Tuple3Ord", "link" : "zio\/prelude\/Ord$.html#Tuple3Ord[A,B,C](implicitevidence$9:zio.prelude.Ord[A],implicitevidence$10:zio.prelude.Ord[B],implicitevidence$11:zio.prelude.Ord[C]):zio.prelude.Ord[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2Ord", "tail" : "(arg0: Ord[A], arg1: Ord[B]): Ord[(A, B)]", "member" : "zio.prelude.Ord.Tuple2Ord", "link" : "zio\/prelude\/Ord$.html#Tuple2Ord[A,B](implicitevidence$7:zio.prelude.Ord[A],implicitevidence$8:zio.prelude.Ord[B]):zio.prelude.Ord[(A,B)]", "kind" : "implicit def"}, {"label" : "OptionOrd", "tail" : "(arg0: Ord[A]): Ord[Option[A]]", "member" : "zio.prelude.Ord.OptionOrd", "link" : "zio\/prelude\/Ord$.html#OptionOrd[A](implicitevidence$6:zio.prelude.Ord[A]):zio.prelude.Ord[Option[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyChunkOrd", "tail" : "(arg0: Ord[A]): Ord[NonEmptyChunk[A]]", "member" : "zio.prelude.Ord.NonEmptyChunkOrd", "link" : "zio\/prelude\/Ord$.html#NonEmptyChunkOrd[A](implicitevidence$5:zio.prelude.Ord[A]):zio.prelude.Ord[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "ListOrd", "tail" : "(arg0: Ord[A]): Ord[List[A]]", "member" : "zio.prelude.Ord.ListOrd", "link" : "zio\/prelude\/Ord$.html#ListOrd[A](implicitevidence$4:zio.prelude.Ord[A]):zio.prelude.Ord[List[A]]", "kind" : "implicit def"}, {"label" : "EitherOrd", "tail" : "(arg0: Ord[A], arg1: Ord[B]): Ord[Either[A, B]]", "member" : "zio.prelude.Ord.EitherOrd", "link" : "zio\/prelude\/Ord$.html#EitherOrd[A,B](implicitevidence$2:zio.prelude.Ord[A],implicitevidence$3:zio.prelude.Ord[B]):zio.prelude.Ord[Either[A,B]]", "kind" : "implicit def"}, {"label" : "DeriveOrd", "tail" : "(derive: Derive[F, Ord], ord: Ord[A]): Ord[F[A]]", "member" : "zio.prelude.Ord.DeriveOrd", "link" : "zio\/prelude\/Ord$.html#DeriveOrd[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.Ord],implicitord:zio.prelude.Ord[A]):zio.prelude.Ord[F[A]]", "kind" : "implicit def"}, {"label" : "ChunkOrd", "tail" : "(arg0: Ord[A]): Ord[Chunk[A]]", "member" : "zio.prelude.Ord.ChunkOrd", "link" : "zio\/prelude\/Ord$.html#ChunkOrd[A](implicitevidence$1:zio.prelude.Ord[A]):zio.prelude.Ord[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "default", "tail" : "(ord: scala.math.Ordering[A]): Ord[A]", "member" : "zio.prelude.Ord.default", "link" : "zio\/prelude\/Ord$.html#default[A](implicitord:scala.math.Ordering[A]):zio.prelude.Ord[A]", "kind" : "def"}, {"label" : "makeFrom", "tail" : "(ord: (A, A) => Ordering, equal0: Equal[A]): Ord[A]", "member" : "zio.prelude.Ord.makeFrom", "link" : "zio\/prelude\/Ord$.html#makeFrom[A](ord:(A,A)=>zio.prelude.Ordering,equal0:zio.prelude.Equal[A]):zio.prelude.Ord[A]", "kind" : "def"}, {"label" : "make", "tail" : "(ord: (A, A) => Ordering): Ord[A]", "member" : "zio.prelude.Ord.make", "link" : "zio\/prelude\/Ord$.html#make[A](ord:(A,A)=>zio.prelude.Ordering):zio.prelude.Ord[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ord: Ord[A]): Ord[A]", "member" : "zio.prelude.Ord.apply", "link" : "zio\/prelude\/Ord$.html#apply[A](implicitord:zio.prelude.Ord[A]):zio.prelude.Ord[A]", "kind" : "def"}, {"label" : "OrdIdentityEither", "tail" : ": IdentityEither[Ord]", "member" : "zio.prelude.Ord.OrdIdentityEither", "link" : "zio\/prelude\/Ord$.html#OrdIdentityEither:zio.prelude.IdentityEither[zio.prelude.Ord]", "kind" : "implicit val"}, {"label" : "OrdIdentityBoth", "tail" : ": IdentityBoth[Ord]", "member" : "zio.prelude.Ord.OrdIdentityBoth", "link" : "zio\/prelude\/Ord$.html#OrdIdentityBoth:zio.prelude.IdentityBoth[zio.prelude.Ord]", "kind" : "implicit val"}, {"label" : "OrdContravariant", "tail" : ": Contravariant[Ord]", "member" : "zio.prelude.Ord.OrdContravariant", "link" : "zio\/prelude\/Ord$.html#OrdContravariant:zio.prelude.Contravariant[zio.prelude.Ord]", "kind" : "implicit val"}, {"label" : "fromScala", "tail" : "(ordering: scala.math.Ordering[A]): Ord[A]", "member" : "zio.prelude.Ord.fromScala", "link" : "zio\/prelude\/Ord$.html#fromScala[A](implicitordering:scala.math.Ordering[A]):zio.prelude.Ord[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Ord$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Ord$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Ord$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Ord$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Ord$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Ord$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Ord$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Ord$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Ord$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Ord$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Ord$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Ord$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Ord$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Ord$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Ord$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Ord$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Ord.html", "kind" : "trait", "members_trait" : [{"label" : "toScala", "tail" : "(): scala.math.Ordering[A1]", "member" : "zio.prelude.Ord.toScala", "link" : "zio\/prelude\/Ord.html#toScala[A1<:A]:scala.math.Ordering[A1]", "kind" : "def"}, {"label" : "reverse", "tail" : "(): Ord[A]", "member" : "zio.prelude.Ord.reverse", "link" : "zio\/prelude\/Ord.html#reverse:zio.prelude.Ord[A]", "kind" : "final def"}, {"label" : "min", "tail" : "(l: A1, r: A1): A1", "member" : "zio.prelude.Ord.min", "link" : "zio\/prelude\/Ord.html#min[A1<:A](l:A1,r:A1):A1", "kind" : "final def"}, {"label" : "max", "tail" : "(l: A1, r: A1): A1", "member" : "zio.prelude.Ord.max", "link" : "zio\/prelude\/Ord.html#max[A1<:A](l:A1,r:A1):A1", "kind" : "final def"}, {"label" : "mapOrdering", "tail" : "(f: (Ordering) => Ordering): Ord[A]", "member" : "zio.prelude.Ord.mapOrdering", "link" : "zio\/prelude\/Ord.html#mapOrdering(f:zio.prelude.Ordering=>zio.prelude.Ordering):zio.prelude.Ord[A]", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Ord[B])(f: (C) => Either[A, B]): Ord[C]", "member" : "zio.prelude.Ord.eitherWith", "link" : "zio\/prelude\/Ord.html#eitherWith[B,C](that:=>zio.prelude.Ord[B])(f:C=>Either[A,B]):zio.prelude.Ord[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Ord[B]): Ord[Either[A, B]]", "member" : "zio.prelude.Ord.either", "link" : "zio\/prelude\/Ord.html#either[B](that:=>zio.prelude.Ord[B]):zio.prelude.Ord[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): Ord[B]", "member" : "zio.prelude.Ord.contramap", "link" : "zio\/prelude\/Ord.html#contramap[B](f:B=>A):zio.prelude.Ord[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => Ord[B])(f: (C) => (A, B)): Ord[C]", "member" : "zio.prelude.Ord.bothWith", "link" : "zio\/prelude\/Ord.html#bothWith[B,C](that:=>zio.prelude.Ord[B])(f:C=>(A,B)):zio.prelude.Ord[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Ord[B]): Ord[(A, B)]", "member" : "zio.prelude.Ord.both", "link" : "zio\/prelude\/Ord.html#both[B](that:=>zio.prelude.Ord[B]):zio.prelude.Ord[(A,B)]", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Ord.checkEqual", "link" : "zio\/prelude\/Ord.html#checkEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(l: A, r: A): Ordering", "member" : "zio.prelude.Ord.compare", "link" : "zio\/prelude\/Ord.html#compare(l:A,r:A):zio.prelude.Ordering", "kind" : "final def"}, {"label" : "mapPartialOrdering", "tail" : "(f: (PartialOrdering) => PartialOrdering): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.mapPartialOrdering", "link" : "zio\/prelude\/Ord.html#mapPartialOrdering(f:zio.prelude.PartialOrdering=>zio.prelude.PartialOrdering):zio.prelude.PartialOrd[A]", "kind" : "final def"}, {"label" : "lessOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.lessOrEqual", "link" : "zio\/prelude\/Ord.html#lessOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "less", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.less", "link" : "zio\/prelude\/Ord.html#less(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greaterOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greaterOrEqual", "link" : "zio\/prelude\/Ord.html#greaterOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greater", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greater", "link" : "zio\/prelude\/Ord.html#greater(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "eitherWith", "tail" : "(that: => PartialOrd[B])(f: (C) => Either[A, B]): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.eitherWith", "link" : "zio\/prelude\/Ord.html#eitherWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>Either[A,B]):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => PartialOrd[B]): PartialOrd[Either[A, B]]", "member" : "zio.prelude.PartialOrd.either", "link" : "zio\/prelude\/Ord.html#either[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => PartialOrd[B])(f: (C) => (A, B)): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.bothWith", "link" : "zio\/prelude\/Ord.html#bothWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>(A,B)):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => PartialOrd[B]): PartialOrd[(A, B)]", "member" : "zio.prelude.PartialOrd.both", "link" : "zio\/prelude\/Ord.html#both[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[(A,B)]", "kind" : "final def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/Ord.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/Ord.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/Ord.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/Ord.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/Ord.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/Ord.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Ord.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Ord.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Ord.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Ord.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Ord.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Ord.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Ord.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ord.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Ord.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Ord.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Ord.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Ord.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Ord.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Ord.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Ord.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Ord.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Ord.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkCompare", "tail" : "(l: A, r: A): Ordering", "member" : "zio.prelude.Ord.checkCompare", "link" : "zio\/prelude\/Ord.html#checkCompare(l:A,r:A):zio.prelude.Ordering", "kind" : "abstract def"}], "shortDescription" : "Ord[A] provides implicit evidence that values of type A have a totalordering."}, {"name" : "zio.prelude.Ordering", "object" : "zio\/prelude\/Ordering$.html", "members_object" : [{"label" : "OrderingIdempotentIdentity", "tail" : ": Idempotent[Ordering] with Identity[Ordering]", "member" : "zio.prelude.Ordering.OrderingIdempotentIdentity", "link" : "zio\/prelude\/Ordering$.html#OrderingIdempotentIdentity:zio.prelude.Idempotent[zio.prelude.Ordering]withzio.prelude.Identity[zio.prelude.Ordering]", "kind" : "implicit val"}, {"label" : "OrderingHashOrd", "tail" : ": Hash[Ordering] with Ord[Ordering]", "member" : "zio.prelude.Ordering.OrderingHashOrd", "link" : "zio\/prelude\/Ordering$.html#OrderingHashOrd:zio.prelude.Hash[zio.prelude.Ordering]withzio.prelude.Ord[zio.prelude.Ordering]", "kind" : "implicit val"}, {"label" : "fromCompare", "tail" : "(n: Int): Ordering", "member" : "zio.prelude.Ordering.fromCompare", "link" : "zio\/prelude\/Ordering$.html#fromCompare(n:Int):zio.prelude.Ordering", "kind" : "def"}, {"label" : "GreaterThan", "tail" : "", "member" : "zio.prelude.Ordering.GreaterThan", "link" : "zio\/prelude\/Ordering$.html#GreaterThan", "kind" : "case object"}, {"label" : "Equals", "tail" : "", "member" : "zio.prelude.Ordering.Equals", "link" : "zio\/prelude\/Ordering$.html#Equals", "kind" : "case object"}, {"label" : "LessThan", "tail" : "", "member" : "zio.prelude.Ordering.LessThan", "link" : "zio\/prelude\/Ordering$.html#LessThan", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Ordering$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Ordering$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Ordering$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Ordering$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Ordering$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Ordering$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Ordering$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Ordering$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Ordering$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Ordering$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Ordering$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Ordering$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Ordering$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Ordering$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Ordering$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Ordering$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Ordering.html", "kind" : "trait", "members_trait" : [{"label" : "opposite", "tail" : "(): Ordering", "member" : "zio.prelude.Ordering.opposite", "link" : "zio\/prelude\/Ordering.html#opposite:zio.prelude.Ordering", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: => Ordering): Ordering", "member" : "zio.prelude.Ordering.orElse", "link" : "zio\/prelude\/Ordering.html#orElse(that:=>zio.prelude.Ordering):zio.prelude.Ordering", "kind" : "final def"}, {"label" : "ordinal", "tail" : "(): Int", "member" : "zio.prelude.Ordering.ordinal", "link" : "zio\/prelude\/Ordering.html#ordinal:Int", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => Ordering): Ordering", "member" : "zio.prelude.Ordering.<>", "link" : "zio\/prelude\/Ordering.html#<>(that:=>zio.prelude.Ordering):zio.prelude.Ordering", "kind" : "final def"}, {"label" : "unify", "tail" : "(that: PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.unify", "link" : "zio\/prelude\/Ordering.html#unify(that:zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: => PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.orElse", "link" : "zio\/prelude\/Ordering.html#orElse(that:=>zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "final def"}, {"label" : "isLessThan", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isLessThan", "link" : "zio\/prelude\/Ordering.html#isLessThan:Boolean", "kind" : "final def"}, {"label" : "isGreaterThan", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isGreaterThan", "link" : "zio\/prelude\/Ordering.html#isGreaterThan:Boolean", "kind" : "final def"}, {"label" : "isEqual", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isEqual", "link" : "zio\/prelude\/Ordering.html#isEqual:Boolean", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.<>", "link" : "zio\/prelude\/Ordering.html#<>(that:=>zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/Ordering.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/prelude\/Ordering.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/prelude\/Ordering.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/prelude\/Ordering.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Ordering.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Ordering.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Ordering.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Ordering.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Ordering.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Ordering.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Ordering.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Ordering.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Ordering.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Ordering.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Ordering.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Ordering.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Ordering.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Ordering.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Ordering.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Ordering.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Ordering.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/prelude\/Ordering.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/prelude\/Ordering.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/prelude\/Ordering.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "An Ordering is the result of comparing two values."}, {"name" : "zio.prelude.OrdSyntax", "trait" : "zio\/prelude\/OrdSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "OrdOps", "tail" : "", "member" : "zio.prelude.OrdSyntax.OrdOps", "link" : "zio\/prelude\/OrdSyntax.html#OrdOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/OrdSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/OrdSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/OrdSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/OrdSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/OrdSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/OrdSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/OrdSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/OrdSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/OrdSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/OrdSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/OrdSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/OrdSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/OrdSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/OrdSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/OrdSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/OrdSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.OrdSyntax.OrdOps", "shortDescription" : "Provides infix syntax for comparing two values with a total ordering.", "members_class" : [{"label" : "min", "tail" : "(r: A1)(ord: Ord[A1]): A1", "member" : "zio.prelude.OrdSyntax.OrdOps.min", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#min[A1>:A](r:A1)(implicitord:zio.prelude.Ord[A1]):A1", "kind" : "def"}, {"label" : "max", "tail" : "(r: A1)(ord: Ord[A1]): A1", "member" : "zio.prelude.OrdSyntax.OrdOps.max", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#max[A1>:A](r:A1)(implicitord:zio.prelude.Ord[A1]):A1", "kind" : "def"}, {"label" : "=?=", "tail" : "(r: A1)(ord: Ord[A1]): Ordering", "member" : "zio.prelude.OrdSyntax.OrdOps.=?=", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#=?=[A1>:A](r:A1)(implicitord:zio.prelude.Ord[A1]):zio.prelude.Ordering", "kind" : "def"}, {"member" : "zio.prelude.OrdSyntax.OrdOps#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": A", "member" : "zio.prelude.OrdSyntax.OrdOps.l", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#l:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/OrdSyntax$OrdOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/OrdSyntax$OrdOps.html", "kind" : "class"}, {"name" : "zio.prelude.ParSeq", "object" : "zio\/prelude\/ParSeq$.html", "members_object" : [{"label" : "parSeqHash", "tail" : "(): Hash[ParSeq[Z, A]]", "member" : "zio.prelude.ParSeq.parSeqHash", "link" : "zio\/prelude\/ParSeq$.html#parSeqHash[Z<:Unit,A]:zio.prelude.Hash[zio.prelude.ParSeq[Z,A]]", "kind" : "implicit def"}, {"label" : "parSeqForEach", "tail" : "(): ForEach[[+a]ParSeq[Z, a]]", "member" : "zio.prelude.ParSeq.parSeqForEach", "link" : "zio\/prelude\/ParSeq$.html#parSeqForEach[Z<:Unit]:zio.prelude.ForEach[[+a]zio.prelude.ParSeq[Z,a]]", "kind" : "implicit def"}, {"label" : "parSeqIdentityFlatten", "tail" : "(): IdentityFlatten[[+a]ParSeq[Z, a]]", "member" : "zio.prelude.ParSeq.parSeqIdentityFlatten", "link" : "zio\/prelude\/ParSeq$.html#parSeqIdentityFlatten[Z<:Unit]:zio.prelude.IdentityFlatten[[+a]zio.prelude.ParSeq[Z,a]]", "kind" : "implicit def"}, {"label" : "parSeqIdentityBoth", "tail" : "(): IdentityBoth[[+a]ParSeq[Z, a]]", "member" : "zio.prelude.ParSeq.parSeqIdentityBoth", "link" : "zio\/prelude\/ParSeq$.html#parSeqIdentityBoth[Z<:Unit]:zio.prelude.IdentityBoth[[+a]zio.prelude.ParSeq[Z,a]]", "kind" : "implicit def"}, {"label" : "parSeqDebug", "tail" : "(arg0: Debug[A]): Debug[ParSeq[Z, A]]", "member" : "zio.prelude.ParSeq.parSeqDebug", "link" : "zio\/prelude\/ParSeq$.html#parSeqDebug[Z<:Unit,A](implicitevidence$3:zio.prelude.Debug[A]):zio.prelude.Debug[zio.prelude.ParSeq[Z,A]]", "kind" : "implicit def"}, {"label" : "parSeqCovariant", "tail" : "(): Covariant[[+a]ParSeq[Z, a]]", "member" : "zio.prelude.ParSeq.parSeqCovariant", "link" : "zio\/prelude\/ParSeq$.html#parSeqCovariant[Z<:Unit]:zio.prelude.Covariant[[+a]zio.prelude.ParSeq[Z,a]]", "kind" : "implicit def"}, {"label" : "unit", "tail" : ": ParSeq[Nothing, Unit]", "member" : "zio.prelude.ParSeq.unit", "link" : "zio\/prelude\/ParSeq$.html#unit:zio.prelude.ParSeq[Nothing,Unit]", "kind" : "val"}, {"label" : "single", "tail" : "(a: A): ParSeq[Nothing, A]", "member" : "zio.prelude.ParSeq.single", "link" : "zio\/prelude\/ParSeq$.html#single[A](a:A):zio.prelude.ParSeq[Nothing,A]", "kind" : "def"}, {"label" : "empty", "tail" : ": ParSeq[Unit, Nothing]", "member" : "zio.prelude.ParSeq.empty", "link" : "zio\/prelude\/ParSeq$.html#empty:zio.prelude.ParSeq[Unit,Nothing]", "kind" : "val"}, {"label" : "apply", "tail" : "(a: A): ParSeq[Nothing, A]", "member" : "zio.prelude.ParSeq.apply", "link" : "zio\/prelude\/ParSeq$.html#apply[A](a:A):zio.prelude.ParSeq[Nothing,A]", "kind" : "def"}, {"label" : "Then", "tail" : "", "member" : "zio.prelude.ParSeq.Then", "link" : "zio\/prelude\/ParSeq$.html#Then[+Z<:Unit,+A]extendsParSeq[Z,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Single", "tail" : "", "member" : "zio.prelude.ParSeq.Single", "link" : "zio\/prelude\/ParSeq$.html#Single[+A]extendsParSeq[Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Empty", "tail" : "", "member" : "zio.prelude.ParSeq.Empty", "link" : "zio\/prelude\/ParSeq$.html#Empty", "kind" : "case object"}, {"label" : "Both", "tail" : "", "member" : "zio.prelude.ParSeq.Both", "link" : "zio\/prelude\/ParSeq$.html#Both[+Z<:Unit,+A]extendsParSeq[Z,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ParSeq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ParSeq$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ParSeq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ParSeq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ParSeq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ParSeq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ParSeq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ParSeq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ParSeq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ParSeq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ParSeq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ParSeq$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ParSeq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ParSeq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ParSeq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ParSeq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/ParSeq.html", "kind" : "trait", "members_trait" : [{"label" : "zipWith", "tail" : "(that: ParSeq[Z1, B])(f: (A, B) => C): ParSeq[Z1, C]", "member" : "zio.prelude.ParSeq.zipWith", "link" : "zio\/prelude\/ParSeq.html#zipWith[Z1>:Z<:Unit,B,C](that:zio.prelude.ParSeq[Z1,B])(f:(A,B)=>C):zio.prelude.ParSeq[Z1,C]", "kind" : "final def"}, {"label" : "zipRight", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, B]", "member" : "zio.prelude.ParSeq.zipRight", "link" : "zio\/prelude\/ParSeq.html#zipRight[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,B]", "kind" : "final def"}, {"label" : "zipLeft", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, A]", "member" : "zio.prelude.ParSeq.zipLeft", "link" : "zio\/prelude\/ParSeq.html#zipLeft[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,A]", "kind" : "final def"}, {"label" : "zip", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, (A, B)]", "member" : "zio.prelude.ParSeq.zip", "link" : "zio\/prelude\/ParSeq.html#zip[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,(A,B)]", "kind" : "final def"}, {"label" : "toNonEmptyMultiSet", "tail" : "(ev: <:<[Z, Nothing]): NonEmptyMultiSet[A]", "member" : "zio.prelude.ParSeq.toNonEmptyMultiSet", "link" : "zio\/prelude\/ParSeq.html#toNonEmptyMultiSet(implicitev:Z<:<Nothing):zio.prelude.NonEmptyMultiSet[A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): ParSeq[Z, B]", "member" : "zio.prelude.ParSeq.map", "link" : "zio\/prelude\/ParSeq.html#map[B](f:A=>B):zio.prelude.ParSeq[Z,B]", "kind" : "final def"}, {"label" : "toCause", "tail" : "(): Cause[A]", "member" : "zio.prelude.ParSeq.toCause", "link" : "zio\/prelude\/ParSeq.html#toCause:zio.Cause[A]", "kind" : "final def"}, {"label" : "forEach", "tail" : "(f: (A) => F[B])(arg0: IdentityBoth[F], arg1: Covariant[F]): F[ParSeq[Z, B]]", "member" : "zio.prelude.ParSeq.forEach", "link" : "zio\/prelude\/ParSeq.html#forEach[F[+_],B](f:A=>F[B])(implicitevidence$1:zio.prelude.IdentityBoth[F],implicitevidence$2:zio.prelude.Covariant[F]):F[zio.prelude.ParSeq[Z,B]]", "kind" : "final def"}, {"label" : "fold", "tail" : "(emptyCase: B, singleCase: (A) => B)(thenCase: (B, B) => B, bothCase: (B, B) => B): B", "member" : "zio.prelude.ParSeq.fold", "link" : "zio\/prelude\/ParSeq.html#fold[B](emptyCase:B,singleCase:A=>B)(thenCase:(B,B)=>B,bothCase:(B,B)=>B):B", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, ParSeq[Z1, B]]): ParSeq[Z1, B]", "member" : "zio.prelude.ParSeq.flatten", "link" : "zio\/prelude\/ParSeq.html#flatten[Z1>:Z<:Unit,B](implicitev:A<:<zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => ParSeq[Z1, B]): ParSeq[Z1, B]", "member" : "zio.prelude.ParSeq.flatMap", "link" : "zio\/prelude\/ParSeq.html#flatMap[Z1>:Z<:Unit,B](f:A=>zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,B]", "kind" : "final def"}, {"label" : "first", "tail" : "(ev: <:<[Z, Nothing]): A", "member" : "zio.prelude.ParSeq.first", "link" : "zio\/prelude\/ParSeq.html#first(implicitev:Z<:<Nothing):A", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): ParSeq[Z, B]", "member" : "zio.prelude.ParSeq.as", "link" : "zio\/prelude\/ParSeq.html#as[B](b:B):zio.prelude.ParSeq[Z,B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, (A, B)]", "member" : "zio.prelude.ParSeq.<*>", "link" : "zio\/prelude\/ParSeq.html#<*>[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,(A,B)]", "kind" : "final def"}, {"label" : "<*", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, A]", "member" : "zio.prelude.ParSeq.<*", "link" : "zio\/prelude\/ParSeq.html#<*[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,A]", "kind" : "final def"}, {"label" : "++", "tail" : "(that: ParSeq[Z1, A1]): ParSeq[Z1, A1]", "member" : "zio.prelude.ParSeq.++", "link" : "zio\/prelude\/ParSeq.html#++[Z1>:Z<:Unit,A1>:A](that:zio.prelude.ParSeq[Z1,A1]):zio.prelude.ParSeq[Z1,A1]", "kind" : "final def"}, {"label" : "*>", "tail" : "(that: ParSeq[Z1, B]): ParSeq[Z1, B]", "member" : "zio.prelude.ParSeq.*>", "link" : "zio\/prelude\/ParSeq.html#*>[Z1>:Z<:Unit,B](that:zio.prelude.ParSeq[Z1,B]):zio.prelude.ParSeq[Z1,B]", "kind" : "final def"}, {"label" : "&&", "tail" : "(that: ParSeq[Z1, A1]): ParSeq[Z1, A1]", "member" : "zio.prelude.ParSeq.&&", "link" : "zio\/prelude\/ParSeq.html#&&[Z1>:Z<:Unit,A1>:A](that:zio.prelude.ParSeq[Z1,A1]):zio.prelude.ParSeq[Z1,A1]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ParSeq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ParSeq.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ParSeq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ParSeq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ParSeq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ParSeq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ParSeq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ParSeq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ParSeq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ParSeq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ParSeq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ParSeq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ParSeq.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ParSeq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ParSeq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ParSeq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ParSeq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "ParSeq is a data type that represents some notion of \"events\" that cantake place in parallel or in sequence."}, {"name" : "zio.prelude.PartialEquivalence", "shortDescription" : "", "object" : "zio\/prelude\/PartialEquivalence$.html", "members_object" : [{"label" : "identity", "tail" : "(): PartialEquivalence[A, A, Nothing, Nothing]", "member" : "zio.prelude.PartialEquivalence.identity", "link" : "zio\/prelude\/PartialEquivalence$.html#identity[A]:zio.prelude.PartialEquivalence[A,A,Nothing,Nothing]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialEquivalence$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialEquivalence$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialEquivalence$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialEquivalence$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialEquivalence$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialEquivalence$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialEquivalence$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialEquivalence$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialEquivalence$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialEquivalence$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialEquivalence$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialEquivalence$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialEquivalence$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialEquivalence$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialEquivalence$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialEquivalence$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toEquivalence", "tail" : "(ev1: <:<[E1, Nothing], ev2: <:<[E2, Nothing]): Equivalence[A, B]", "member" : "zio.prelude.PartialEquivalence.toEquivalence", "link" : "zio\/prelude\/PartialEquivalence.html#toEquivalence(implicitev1:E1<:<Nothing,implicitev2:E2<:<Nothing):zio.prelude.Equivalence[A,B]", "kind" : "def"}, {"label" : "flip", "tail" : "(): PartialEquivalence[B, A, E2, E1]", "member" : "zio.prelude.PartialEquivalence.flip", "link" : "zio\/prelude\/PartialEquivalence.html#flip:zio.prelude.PartialEquivalence[B,A,E2,E1]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: PartialEquivalence[C, A, E3, E4]): PartialEquivalence[C, B, E3, E4]", "member" : "zio.prelude.PartialEquivalence.compose", "link" : "zio\/prelude\/PartialEquivalence.html#compose[C,E3>:E1,E4>:E2](that:zio.prelude.PartialEquivalence[C,A,E3,E4]):zio.prelude.PartialEquivalence[C,B,E3,E4]", "kind" : "def"}, {"label" : "canonicalRightOrError", "tail" : "(b: B)(ev1: <:<[E1, E], ev2: <:<[E2, E]): Either[E, B]", "member" : "zio.prelude.PartialEquivalence.canonicalRightOrError", "link" : "zio\/prelude\/PartialEquivalence.html#canonicalRightOrError[E](b:B)(implicitev1:E1<:<E,implicitev2:E2<:<E):Either[E,B]", "kind" : "def"}, {"label" : "canonicalRight", "tail" : "(b: B): Option[B]", "member" : "zio.prelude.PartialEquivalence.canonicalRight", "link" : "zio\/prelude\/PartialEquivalence.html#canonicalRight(b:B):Option[B]", "kind" : "def"}, {"label" : "canonicalLeftOrError", "tail" : "(a: A)(ev1: <:<[E1, E], ev2: <:<[E2, E]): Either[E, A]", "member" : "zio.prelude.PartialEquivalence.canonicalLeftOrError", "link" : "zio\/prelude\/PartialEquivalence.html#canonicalLeftOrError[E](a:A)(implicitev1:E1<:<E,implicitev2:E2<:<E):Either[E,A]", "kind" : "def"}, {"label" : "canonicalLeft", "tail" : "(a: A): Option[A]", "member" : "zio.prelude.PartialEquivalence.canonicalLeft", "link" : "zio\/prelude\/PartialEquivalence.html#canonicalLeft(a:A):Option[A]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: PartialEquivalence[B, C, E3, E4]): PartialEquivalence[A, C, E3, E4]", "member" : "zio.prelude.PartialEquivalence.andThen", "link" : "zio\/prelude\/PartialEquivalence.html#andThen[C,E3>:E1,E4>:E2](that:zio.prelude.PartialEquivalence[B,C,E3,E4]):zio.prelude.PartialEquivalence[A,C,E3,E4]", "kind" : "def"}, {"label" : ">>>", "tail" : "(that: PartialEquivalence[B, C, E3, E4]): PartialEquivalence[A, C, E3, E4]", "member" : "zio.prelude.PartialEquivalence.>>>", "link" : "zio\/prelude\/PartialEquivalence.html#>>>[C,E3>:E1,E4>:E2](that:zio.prelude.PartialEquivalence[B,C,E3,E4]):zio.prelude.PartialEquivalence[A,C,E3,E4]", "kind" : "def"}, {"member" : "zio.prelude.PartialEquivalence#<init>", "error" : "unsupported entity"}, {"label" : "from", "tail" : ": (B) => Either[E2, A]", "member" : "zio.prelude.PartialEquivalence.from", "link" : "zio\/prelude\/PartialEquivalence.html#from:B=>Either[E2,A]", "kind" : "val"}, {"label" : "to", "tail" : ": (A) => Either[E1, B]", "member" : "zio.prelude.PartialEquivalence.to", "link" : "zio\/prelude\/PartialEquivalence.html#to:A=>Either[E1,B]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/PartialEquivalence.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialEquivalence.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialEquivalence.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialEquivalence.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialEquivalence.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialEquivalence.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialEquivalence.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialEquivalence.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialEquivalence.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialEquivalence.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialEquivalence.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialEquivalence.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialEquivalence.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialEquivalence.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialEquivalence.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/prelude\/PartialEquivalence.html", "kind" : "case class"}, {"name" : "zio.prelude.PartialOrd", "object" : "zio\/prelude\/PartialOrd$.html", "members_object" : [{"label" : "VectorPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[Vector[A]]", "member" : "zio.prelude.PartialOrd.VectorPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#VectorPartialOrd[A](implicitevidence$259:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[Vector[A]]", "kind" : "implicit def"}, {"label" : "Tuple22PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q], arg17: PartialOrd[R], arg18: PartialOrd[S], arg19: PartialOrd[T], arg20: PartialOrd[U], arg21: PartialOrd[V]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V)]", "member" : "zio.prelude.PartialOrd.Tuple22PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple22PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V](implicitevidence$237:zio.prelude.PartialOrd[A],implicitevidence$238:zio.prelude.PartialOrd[B],implicitevidence$239:zio.prelude.PartialOrd[C],implicitevidence$240:zio.prelude.PartialOrd[D],implicitevidence$241:zio.prelude.PartialOrd[E],implicitevidence$242:zio.prelude.PartialOrd[F],implicitevidence$243:zio.prelude.PartialOrd[G],implicitevidence$244:zio.prelude.PartialOrd[H],implicitevidence$245:zio.prelude.PartialOrd[I],implicitevidence$246:zio.prelude.PartialOrd[J],implicitevidence$247:zio.prelude.PartialOrd[K],implicitevidence$248:zio.prelude.PartialOrd[L],implicitevidence$249:zio.prelude.PartialOrd[M],implicitevidence$250:zio.prelude.PartialOrd[N],implicitevidence$251:zio.prelude.PartialOrd[O],implicitevidence$252:zio.prelude.PartialOrd[P],implicitevidence$253:zio.prelude.PartialOrd[Q],implicitevidence$254:zio.prelude.PartialOrd[R],implicitevidence$255:zio.prelude.PartialOrd[S],implicitevidence$256:zio.prelude.PartialOrd[T],implicitevidence$257:zio.prelude.PartialOrd[U],implicitevidence$258:zio.prelude.PartialOrd[V]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V)]", "kind" : "implicit def"}, {"label" : "Tuple21PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q], arg17: PartialOrd[R], arg18: PartialOrd[S], arg19: PartialOrd[T], arg20: PartialOrd[U]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U)]", "member" : "zio.prelude.PartialOrd.Tuple21PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple21PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U](implicitevidence$216:zio.prelude.PartialOrd[A],implicitevidence$217:zio.prelude.PartialOrd[B],implicitevidence$218:zio.prelude.PartialOrd[C],implicitevidence$219:zio.prelude.PartialOrd[D],implicitevidence$220:zio.prelude.PartialOrd[E],implicitevidence$221:zio.prelude.PartialOrd[F],implicitevidence$222:zio.prelude.PartialOrd[G],implicitevidence$223:zio.prelude.PartialOrd[H],implicitevidence$224:zio.prelude.PartialOrd[I],implicitevidence$225:zio.prelude.PartialOrd[J],implicitevidence$226:zio.prelude.PartialOrd[K],implicitevidence$227:zio.prelude.PartialOrd[L],implicitevidence$228:zio.prelude.PartialOrd[M],implicitevidence$229:zio.prelude.PartialOrd[N],implicitevidence$230:zio.prelude.PartialOrd[O],implicitevidence$231:zio.prelude.PartialOrd[P],implicitevidence$232:zio.prelude.PartialOrd[Q],implicitevidence$233:zio.prelude.PartialOrd[R],implicitevidence$234:zio.prelude.PartialOrd[S],implicitevidence$235:zio.prelude.PartialOrd[T],implicitevidence$236:zio.prelude.PartialOrd[U]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)]", "kind" : "implicit def"}, {"label" : "Tuple20PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q], arg17: PartialOrd[R], arg18: PartialOrd[S], arg19: PartialOrd[T]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T)]", "member" : "zio.prelude.PartialOrd.Tuple20PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple20PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T](implicitevidence$196:zio.prelude.PartialOrd[A],implicitevidence$197:zio.prelude.PartialOrd[B],implicitevidence$198:zio.prelude.PartialOrd[C],implicitevidence$199:zio.prelude.PartialOrd[D],implicitevidence$200:zio.prelude.PartialOrd[E],implicitevidence$201:zio.prelude.PartialOrd[F],implicitevidence$202:zio.prelude.PartialOrd[G],implicitevidence$203:zio.prelude.PartialOrd[H],implicitevidence$204:zio.prelude.PartialOrd[I],implicitevidence$205:zio.prelude.PartialOrd[J],implicitevidence$206:zio.prelude.PartialOrd[K],implicitevidence$207:zio.prelude.PartialOrd[L],implicitevidence$208:zio.prelude.PartialOrd[M],implicitevidence$209:zio.prelude.PartialOrd[N],implicitevidence$210:zio.prelude.PartialOrd[O],implicitevidence$211:zio.prelude.PartialOrd[P],implicitevidence$212:zio.prelude.PartialOrd[Q],implicitevidence$213:zio.prelude.PartialOrd[R],implicitevidence$214:zio.prelude.PartialOrd[S],implicitevidence$215:zio.prelude.PartialOrd[T]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T)]", "kind" : "implicit def"}, {"label" : "Tuple19PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q], arg17: PartialOrd[R], arg18: PartialOrd[S]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S)]", "member" : "zio.prelude.PartialOrd.Tuple19PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple19PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S](implicitevidence$177:zio.prelude.PartialOrd[A],implicitevidence$178:zio.prelude.PartialOrd[B],implicitevidence$179:zio.prelude.PartialOrd[C],implicitevidence$180:zio.prelude.PartialOrd[D],implicitevidence$181:zio.prelude.PartialOrd[E],implicitevidence$182:zio.prelude.PartialOrd[F],implicitevidence$183:zio.prelude.PartialOrd[G],implicitevidence$184:zio.prelude.PartialOrd[H],implicitevidence$185:zio.prelude.PartialOrd[I],implicitevidence$186:zio.prelude.PartialOrd[J],implicitevidence$187:zio.prelude.PartialOrd[K],implicitevidence$188:zio.prelude.PartialOrd[L],implicitevidence$189:zio.prelude.PartialOrd[M],implicitevidence$190:zio.prelude.PartialOrd[N],implicitevidence$191:zio.prelude.PartialOrd[O],implicitevidence$192:zio.prelude.PartialOrd[P],implicitevidence$193:zio.prelude.PartialOrd[Q],implicitevidence$194:zio.prelude.PartialOrd[R],implicitevidence$195:zio.prelude.PartialOrd[S]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S)]", "kind" : "implicit def"}, {"label" : "Tuple18PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q], arg17: PartialOrd[R]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R)]", "member" : "zio.prelude.PartialOrd.Tuple18PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple18PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R](implicitevidence$159:zio.prelude.PartialOrd[A],implicitevidence$160:zio.prelude.PartialOrd[B],implicitevidence$161:zio.prelude.PartialOrd[C],implicitevidence$162:zio.prelude.PartialOrd[D],implicitevidence$163:zio.prelude.PartialOrd[E],implicitevidence$164:zio.prelude.PartialOrd[F],implicitevidence$165:zio.prelude.PartialOrd[G],implicitevidence$166:zio.prelude.PartialOrd[H],implicitevidence$167:zio.prelude.PartialOrd[I],implicitevidence$168:zio.prelude.PartialOrd[J],implicitevidence$169:zio.prelude.PartialOrd[K],implicitevidence$170:zio.prelude.PartialOrd[L],implicitevidence$171:zio.prelude.PartialOrd[M],implicitevidence$172:zio.prelude.PartialOrd[N],implicitevidence$173:zio.prelude.PartialOrd[O],implicitevidence$174:zio.prelude.PartialOrd[P],implicitevidence$175:zio.prelude.PartialOrd[Q],implicitevidence$176:zio.prelude.PartialOrd[R]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R)]", "kind" : "implicit def"}, {"label" : "Tuple17PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P], arg16: PartialOrd[Q]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q)]", "member" : "zio.prelude.PartialOrd.Tuple17PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple17PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q](implicitevidence$142:zio.prelude.PartialOrd[A],implicitevidence$143:zio.prelude.PartialOrd[B],implicitevidence$144:zio.prelude.PartialOrd[C],implicitevidence$145:zio.prelude.PartialOrd[D],implicitevidence$146:zio.prelude.PartialOrd[E],implicitevidence$147:zio.prelude.PartialOrd[F],implicitevidence$148:zio.prelude.PartialOrd[G],implicitevidence$149:zio.prelude.PartialOrd[H],implicitevidence$150:zio.prelude.PartialOrd[I],implicitevidence$151:zio.prelude.PartialOrd[J],implicitevidence$152:zio.prelude.PartialOrd[K],implicitevidence$153:zio.prelude.PartialOrd[L],implicitevidence$154:zio.prelude.PartialOrd[M],implicitevidence$155:zio.prelude.PartialOrd[N],implicitevidence$156:zio.prelude.PartialOrd[O],implicitevidence$157:zio.prelude.PartialOrd[P],implicitevidence$158:zio.prelude.PartialOrd[Q]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q)]", "kind" : "implicit def"}, {"label" : "Tuple16PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O], arg15: PartialOrd[P]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P)]", "member" : "zio.prelude.PartialOrd.Tuple16PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple16PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P](implicitevidence$126:zio.prelude.PartialOrd[A],implicitevidence$127:zio.prelude.PartialOrd[B],implicitevidence$128:zio.prelude.PartialOrd[C],implicitevidence$129:zio.prelude.PartialOrd[D],implicitevidence$130:zio.prelude.PartialOrd[E],implicitevidence$131:zio.prelude.PartialOrd[F],implicitevidence$132:zio.prelude.PartialOrd[G],implicitevidence$133:zio.prelude.PartialOrd[H],implicitevidence$134:zio.prelude.PartialOrd[I],implicitevidence$135:zio.prelude.PartialOrd[J],implicitevidence$136:zio.prelude.PartialOrd[K],implicitevidence$137:zio.prelude.PartialOrd[L],implicitevidence$138:zio.prelude.PartialOrd[M],implicitevidence$139:zio.prelude.PartialOrd[N],implicitevidence$140:zio.prelude.PartialOrd[O],implicitevidence$141:zio.prelude.PartialOrd[P]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P)]", "kind" : "implicit def"}, {"label" : "Tuple15PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N], arg14: PartialOrd[O]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N, O)]", "member" : "zio.prelude.PartialOrd.Tuple15PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple15PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O](implicitevidence$111:zio.prelude.PartialOrd[A],implicitevidence$112:zio.prelude.PartialOrd[B],implicitevidence$113:zio.prelude.PartialOrd[C],implicitevidence$114:zio.prelude.PartialOrd[D],implicitevidence$115:zio.prelude.PartialOrd[E],implicitevidence$116:zio.prelude.PartialOrd[F],implicitevidence$117:zio.prelude.PartialOrd[G],implicitevidence$118:zio.prelude.PartialOrd[H],implicitevidence$119:zio.prelude.PartialOrd[I],implicitevidence$120:zio.prelude.PartialOrd[J],implicitevidence$121:zio.prelude.PartialOrd[K],implicitevidence$122:zio.prelude.PartialOrd[L],implicitevidence$123:zio.prelude.PartialOrd[M],implicitevidence$124:zio.prelude.PartialOrd[N],implicitevidence$125:zio.prelude.PartialOrd[O]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)]", "kind" : "implicit def"}, {"label" : "Tuple14PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M], arg13: PartialOrd[N]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M, N)]", "member" : "zio.prelude.PartialOrd.Tuple14PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple14PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M,N](implicitevidence$97:zio.prelude.PartialOrd[A],implicitevidence$98:zio.prelude.PartialOrd[B],implicitevidence$99:zio.prelude.PartialOrd[C],implicitevidence$100:zio.prelude.PartialOrd[D],implicitevidence$101:zio.prelude.PartialOrd[E],implicitevidence$102:zio.prelude.PartialOrd[F],implicitevidence$103:zio.prelude.PartialOrd[G],implicitevidence$104:zio.prelude.PartialOrd[H],implicitevidence$105:zio.prelude.PartialOrd[I],implicitevidence$106:zio.prelude.PartialOrd[J],implicitevidence$107:zio.prelude.PartialOrd[K],implicitevidence$108:zio.prelude.PartialOrd[L],implicitevidence$109:zio.prelude.PartialOrd[M],implicitevidence$110:zio.prelude.PartialOrd[N]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M,N)]", "kind" : "implicit def"}, {"label" : "Tuple13PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L], arg12: PartialOrd[M]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L, M)]", "member" : "zio.prelude.PartialOrd.Tuple13PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple13PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L,M](implicitevidence$84:zio.prelude.PartialOrd[A],implicitevidence$85:zio.prelude.PartialOrd[B],implicitevidence$86:zio.prelude.PartialOrd[C],implicitevidence$87:zio.prelude.PartialOrd[D],implicitevidence$88:zio.prelude.PartialOrd[E],implicitevidence$89:zio.prelude.PartialOrd[F],implicitevidence$90:zio.prelude.PartialOrd[G],implicitevidence$91:zio.prelude.PartialOrd[H],implicitevidence$92:zio.prelude.PartialOrd[I],implicitevidence$93:zio.prelude.PartialOrd[J],implicitevidence$94:zio.prelude.PartialOrd[K],implicitevidence$95:zio.prelude.PartialOrd[L],implicitevidence$96:zio.prelude.PartialOrd[M]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L,M)]", "kind" : "implicit def"}, {"label" : "Tuple12PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K], arg11: PartialOrd[L]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K, L)]", "member" : "zio.prelude.PartialOrd.Tuple12PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple12PartialOrd[A,B,C,D,E,F,G,H,I,J,K,L](implicitevidence$72:zio.prelude.PartialOrd[A],implicitevidence$73:zio.prelude.PartialOrd[B],implicitevidence$74:zio.prelude.PartialOrd[C],implicitevidence$75:zio.prelude.PartialOrd[D],implicitevidence$76:zio.prelude.PartialOrd[E],implicitevidence$77:zio.prelude.PartialOrd[F],implicitevidence$78:zio.prelude.PartialOrd[G],implicitevidence$79:zio.prelude.PartialOrd[H],implicitevidence$80:zio.prelude.PartialOrd[I],implicitevidence$81:zio.prelude.PartialOrd[J],implicitevidence$82:zio.prelude.PartialOrd[K],implicitevidence$83:zio.prelude.PartialOrd[L]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K,L)]", "kind" : "implicit def"}, {"label" : "Tuple11PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J], arg10: PartialOrd[K]): PartialOrd[(A, B, C, D, E, F, G, H, I, J, K)]", "member" : "zio.prelude.PartialOrd.Tuple11PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple11PartialOrd[A,B,C,D,E,F,G,H,I,J,K](implicitevidence$61:zio.prelude.PartialOrd[A],implicitevidence$62:zio.prelude.PartialOrd[B],implicitevidence$63:zio.prelude.PartialOrd[C],implicitevidence$64:zio.prelude.PartialOrd[D],implicitevidence$65:zio.prelude.PartialOrd[E],implicitevidence$66:zio.prelude.PartialOrd[F],implicitevidence$67:zio.prelude.PartialOrd[G],implicitevidence$68:zio.prelude.PartialOrd[H],implicitevidence$69:zio.prelude.PartialOrd[I],implicitevidence$70:zio.prelude.PartialOrd[J],implicitevidence$71:zio.prelude.PartialOrd[K]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J,K)]", "kind" : "implicit def"}, {"label" : "Tuple10PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I], arg9: PartialOrd[J]): PartialOrd[(A, B, C, D, E, F, G, H, I, J)]", "member" : "zio.prelude.PartialOrd.Tuple10PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple10PartialOrd[A,B,C,D,E,F,G,H,I,J](implicitevidence$51:zio.prelude.PartialOrd[A],implicitevidence$52:zio.prelude.PartialOrd[B],implicitevidence$53:zio.prelude.PartialOrd[C],implicitevidence$54:zio.prelude.PartialOrd[D],implicitevidence$55:zio.prelude.PartialOrd[E],implicitevidence$56:zio.prelude.PartialOrd[F],implicitevidence$57:zio.prelude.PartialOrd[G],implicitevidence$58:zio.prelude.PartialOrd[H],implicitevidence$59:zio.prelude.PartialOrd[I],implicitevidence$60:zio.prelude.PartialOrd[J]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I,J)]", "kind" : "implicit def"}, {"label" : "Tuple9PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H], arg8: PartialOrd[I]): PartialOrd[(A, B, C, D, E, F, G, H, I)]", "member" : "zio.prelude.PartialOrd.Tuple9PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple9PartialOrd[A,B,C,D,E,F,G,H,I](implicitevidence$42:zio.prelude.PartialOrd[A],implicitevidence$43:zio.prelude.PartialOrd[B],implicitevidence$44:zio.prelude.PartialOrd[C],implicitevidence$45:zio.prelude.PartialOrd[D],implicitevidence$46:zio.prelude.PartialOrd[E],implicitevidence$47:zio.prelude.PartialOrd[F],implicitevidence$48:zio.prelude.PartialOrd[G],implicitevidence$49:zio.prelude.PartialOrd[H],implicitevidence$50:zio.prelude.PartialOrd[I]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H,I)]", "kind" : "implicit def"}, {"label" : "Tuple8PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G], arg7: PartialOrd[H]): PartialOrd[(A, B, C, D, E, F, G, H)]", "member" : "zio.prelude.PartialOrd.Tuple8PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple8PartialOrd[A,B,C,D,E,F,G,H](implicitevidence$34:zio.prelude.PartialOrd[A],implicitevidence$35:zio.prelude.PartialOrd[B],implicitevidence$36:zio.prelude.PartialOrd[C],implicitevidence$37:zio.prelude.PartialOrd[D],implicitevidence$38:zio.prelude.PartialOrd[E],implicitevidence$39:zio.prelude.PartialOrd[F],implicitevidence$40:zio.prelude.PartialOrd[G],implicitevidence$41:zio.prelude.PartialOrd[H]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G,H)]", "kind" : "implicit def"}, {"label" : "Tuple7PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F], arg6: PartialOrd[G]): PartialOrd[(A, B, C, D, E, F, G)]", "member" : "zio.prelude.PartialOrd.Tuple7PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple7PartialOrd[A,B,C,D,E,F,G](implicitevidence$27:zio.prelude.PartialOrd[A],implicitevidence$28:zio.prelude.PartialOrd[B],implicitevidence$29:zio.prelude.PartialOrd[C],implicitevidence$30:zio.prelude.PartialOrd[D],implicitevidence$31:zio.prelude.PartialOrd[E],implicitevidence$32:zio.prelude.PartialOrd[F],implicitevidence$33:zio.prelude.PartialOrd[G]):zio.prelude.PartialOrd[(A,B,C,D,E,F,G)]", "kind" : "implicit def"}, {"label" : "Tuple6PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E], arg5: PartialOrd[F]): PartialOrd[(A, B, C, D, E, F)]", "member" : "zio.prelude.PartialOrd.Tuple6PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple6PartialOrd[A,B,C,D,E,F](implicitevidence$21:zio.prelude.PartialOrd[A],implicitevidence$22:zio.prelude.PartialOrd[B],implicitevidence$23:zio.prelude.PartialOrd[C],implicitevidence$24:zio.prelude.PartialOrd[D],implicitevidence$25:zio.prelude.PartialOrd[E],implicitevidence$26:zio.prelude.PartialOrd[F]):zio.prelude.PartialOrd[(A,B,C,D,E,F)]", "kind" : "implicit def"}, {"label" : "Tuple5PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D], arg4: PartialOrd[E]): PartialOrd[(A, B, C, D, E)]", "member" : "zio.prelude.PartialOrd.Tuple5PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple5PartialOrd[A,B,C,D,E](implicitevidence$16:zio.prelude.PartialOrd[A],implicitevidence$17:zio.prelude.PartialOrd[B],implicitevidence$18:zio.prelude.PartialOrd[C],implicitevidence$19:zio.prelude.PartialOrd[D],implicitevidence$20:zio.prelude.PartialOrd[E]):zio.prelude.PartialOrd[(A,B,C,D,E)]", "kind" : "implicit def"}, {"label" : "Tuple4PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C], arg3: PartialOrd[D]): PartialOrd[(A, B, C, D)]", "member" : "zio.prelude.PartialOrd.Tuple4PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple4PartialOrd[A,B,C,D](implicitevidence$12:zio.prelude.PartialOrd[A],implicitevidence$13:zio.prelude.PartialOrd[B],implicitevidence$14:zio.prelude.PartialOrd[C],implicitevidence$15:zio.prelude.PartialOrd[D]):zio.prelude.PartialOrd[(A,B,C,D)]", "kind" : "implicit def"}, {"label" : "Tuple3PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B], arg2: PartialOrd[C]): PartialOrd[(A, B, C)]", "member" : "zio.prelude.PartialOrd.Tuple3PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple3PartialOrd[A,B,C](implicitevidence$9:zio.prelude.PartialOrd[A],implicitevidence$10:zio.prelude.PartialOrd[B],implicitevidence$11:zio.prelude.PartialOrd[C]):zio.prelude.PartialOrd[(A,B,C)]", "kind" : "implicit def"}, {"label" : "Tuple2PartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B]): PartialOrd[(A, B)]", "member" : "zio.prelude.PartialOrd.Tuple2PartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#Tuple2PartialOrd[A,B](implicitevidence$7:zio.prelude.PartialOrd[A],implicitevidence$8:zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[(A,B)]", "kind" : "implicit def"}, {"label" : "OptionPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[Option[A]]", "member" : "zio.prelude.PartialOrd.OptionPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#OptionPartialOrd[A](implicitevidence$6:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[Option[A]]", "kind" : "implicit def"}, {"label" : "NonEmptyChunkPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[NonEmptyChunk[A]]", "member" : "zio.prelude.PartialOrd.NonEmptyChunkPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#NonEmptyChunkPartialOrd[A](implicitevidence$5:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[zio.NonEmptyChunk[A]]", "kind" : "implicit def"}, {"label" : "ListPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[List[A]]", "member" : "zio.prelude.PartialOrd.ListPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#ListPartialOrd[A](implicitevidence$4:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[List[A]]", "kind" : "implicit def"}, {"label" : "EitherPartialOrd", "tail" : "(arg0: PartialOrd[A], arg1: PartialOrd[B]): PartialOrd[Either[A, B]]", "member" : "zio.prelude.PartialOrd.EitherPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#EitherPartialOrd[A,B](implicitevidence$2:zio.prelude.PartialOrd[A],implicitevidence$3:zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[Either[A,B]]", "kind" : "implicit def"}, {"label" : "DerivePartialOrd", "tail" : "(derive: Derive[F, PartialOrd], ord: PartialOrd[A]): PartialOrd[F[A]]", "member" : "zio.prelude.PartialOrd.DerivePartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#DerivePartialOrd[F[_],A](implicitderive:zio.prelude.Derive[F,zio.prelude.PartialOrd],implicitord:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[F[A]]", "kind" : "implicit def"}, {"label" : "ChunkPartialOrd", "tail" : "(arg0: PartialOrd[A]): PartialOrd[Chunk[A]]", "member" : "zio.prelude.PartialOrd.ChunkPartialOrd", "link" : "zio\/prelude\/PartialOrd$.html#ChunkPartialOrd[A](implicitevidence$1:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[zio.Chunk[A]]", "kind" : "implicit def"}, {"label" : "makeFrom", "tail" : "(ord: (A, A) => PartialOrdering, equal0: Equal[A]): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.makeFrom", "link" : "zio\/prelude\/PartialOrd$.html#makeFrom[A](ord:(A,A)=>zio.prelude.PartialOrdering,equal0:zio.prelude.Equal[A]):zio.prelude.PartialOrd[A]", "kind" : "def"}, {"label" : "make", "tail" : "(ord: (A, A) => PartialOrdering): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.make", "link" : "zio\/prelude\/PartialOrd$.html#make[A](ord:(A,A)=>zio.prelude.PartialOrdering):zio.prelude.PartialOrd[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(ord: PartialOrd[A]): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.apply", "link" : "zio\/prelude\/PartialOrd$.html#apply[A](implicitord:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[A]", "kind" : "def"}, {"label" : "PartialOrdIdentityEither", "tail" : ": IdentityEither[PartialOrd]", "member" : "zio.prelude.PartialOrd.PartialOrdIdentityEither", "link" : "zio\/prelude\/PartialOrd$.html#PartialOrdIdentityEither:zio.prelude.IdentityEither[zio.prelude.PartialOrd]", "kind" : "implicit val"}, {"label" : "PartialOrdIdentityBoth", "tail" : ": IdentityBoth[PartialOrd]", "member" : "zio.prelude.PartialOrd.PartialOrdIdentityBoth", "link" : "zio\/prelude\/PartialOrd$.html#PartialOrdIdentityBoth:zio.prelude.IdentityBoth[zio.prelude.PartialOrd]", "kind" : "implicit val"}, {"label" : "PartialOrdContravariant", "tail" : ": Contravariant[PartialOrd]", "member" : "zio.prelude.PartialOrd.PartialOrdContravariant", "link" : "zio\/prelude\/PartialOrd$.html#PartialOrdContravariant:zio.prelude.Contravariant[zio.prelude.PartialOrd]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrd$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrd$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/PartialOrd.html", "kind" : "trait", "members_trait" : [{"label" : "mapPartialOrdering", "tail" : "(f: (PartialOrdering) => PartialOrdering): PartialOrd[A]", "member" : "zio.prelude.PartialOrd.mapPartialOrdering", "link" : "zio\/prelude\/PartialOrd.html#mapPartialOrdering(f:zio.prelude.PartialOrdering=>zio.prelude.PartialOrdering):zio.prelude.PartialOrd[A]", "kind" : "final def"}, {"label" : "lessOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.lessOrEqual", "link" : "zio\/prelude\/PartialOrd.html#lessOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "less", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.less", "link" : "zio\/prelude\/PartialOrd.html#less(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greaterOrEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greaterOrEqual", "link" : "zio\/prelude\/PartialOrd.html#greaterOrEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "greater", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.greater", "link" : "zio\/prelude\/PartialOrd.html#greater(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "eitherWith", "tail" : "(that: => PartialOrd[B])(f: (C) => Either[A, B]): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.eitherWith", "link" : "zio\/prelude\/PartialOrd.html#eitherWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>Either[A,B]):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => PartialOrd[B]): PartialOrd[Either[A, B]]", "member" : "zio.prelude.PartialOrd.either", "link" : "zio\/prelude\/PartialOrd.html#either[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[Either[A,B]]", "kind" : "final def"}, {"label" : "contramap", "tail" : "(f: (B) => A): PartialOrd[B]", "member" : "zio.prelude.PartialOrd.contramap", "link" : "zio\/prelude\/PartialOrd.html#contramap[B](f:B=>A):zio.prelude.PartialOrd[B]", "kind" : "def"}, {"label" : "bothWith", "tail" : "(that: => PartialOrd[B])(f: (C) => (A, B)): PartialOrd[C]", "member" : "zio.prelude.PartialOrd.bothWith", "link" : "zio\/prelude\/PartialOrd.html#bothWith[B,C](that:=>zio.prelude.PartialOrd[B])(f:C=>(A,B)):zio.prelude.PartialOrd[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => PartialOrd[B]): PartialOrd[(A, B)]", "member" : "zio.prelude.PartialOrd.both", "link" : "zio\/prelude\/PartialOrd.html#both[B](that:=>zio.prelude.PartialOrd[B]):zio.prelude.PartialOrd[(A,B)]", "kind" : "final def"}, {"label" : "checkEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.PartialOrd.checkEqual", "link" : "zio\/prelude\/PartialOrd.html#checkEqual(l:A,r:A):Boolean", "kind" : "def"}, {"label" : "compare", "tail" : "(l: A, r: A): PartialOrdering", "member" : "zio.prelude.PartialOrd.compare", "link" : "zio\/prelude\/PartialOrd.html#compare(l:A,r:A):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "toScala", "tail" : "(): Equiv[A1]", "member" : "zio.prelude.Equal.toScala", "link" : "zio\/prelude\/PartialOrd.html#toScala[A1<:A]:scala.math.Equiv[A1]", "kind" : "def"}, {"label" : "notEqual", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.notEqual", "link" : "zio\/prelude\/PartialOrd.html#notEqual(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "eitherWith", "tail" : "(that: => Equal[B])(f: (C) => Either[A, B]): Equal[C]", "member" : "zio.prelude.Equal.eitherWith", "link" : "zio\/prelude\/PartialOrd.html#eitherWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>Either[A,B]):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "either", "tail" : "(that: => Equal[B]): Equal[Either[A, B]]", "member" : "zio.prelude.Equal.either", "link" : "zio\/prelude\/PartialOrd.html#either[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[Either[A,B]]", "kind" : "final def"}, {"label" : "bothWith", "tail" : "(that: => Equal[B])(f: (C) => (A, B)): Equal[C]", "member" : "zio.prelude.Equal.bothWith", "link" : "zio\/prelude\/PartialOrd.html#bothWith[B,C](that:=>zio.prelude.Equal[B])(f:C=>(A,B)):zio.prelude.Equal[C]", "kind" : "final def"}, {"label" : "both", "tail" : "(that: => Equal[B]): Equal[(A, B)]", "member" : "zio.prelude.Equal.both", "link" : "zio\/prelude\/PartialOrd.html#both[B](that:=>zio.prelude.Equal[B]):zio.prelude.Equal[(A,B)]", "kind" : "final def"}, {"label" : "equal", "tail" : "(l: A, r: A): Boolean", "member" : "zio.prelude.Equal.equal", "link" : "zio\/prelude\/PartialOrd.html#equal(l:A,r:A):Boolean", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrd.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrd.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrd.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrd.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrd.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "checkCompare", "tail" : "(l: A, r: A): PartialOrdering", "member" : "zio.prelude.PartialOrd.checkCompare", "link" : "zio\/prelude\/PartialOrd.html#checkCompare(l:A,r:A):zio.prelude.PartialOrdering", "kind" : "abstract def"}], "shortDescription" : "PartialOrd[A] provides implicit evidence that values of type A have a partialordering."}, {"name" : "zio.prelude.PartialOrdering", "object" : "zio\/prelude\/PartialOrdering$.html", "members_object" : [{"label" : "PartialOrderingNonlexicographicCommutativeIdempotentIdentity", "tail" : ": Commutative[PartialOrdering] with Idempotent[PartialOrdering] with Identity[PartialOrdering]", "member" : "zio.prelude.PartialOrdering.PartialOrderingNonlexicographicCommutativeIdempotentIdentity", "link" : "zio\/prelude\/PartialOrdering$.html#PartialOrderingNonlexicographicCommutativeIdempotentIdentity:zio.prelude.Commutative[zio.prelude.PartialOrdering]withzio.prelude.Idempotent[zio.prelude.PartialOrdering]withzio.prelude.Identity[zio.prelude.PartialOrdering]", "kind" : "val"}, {"label" : "PartialOrderingIdempotentIdentity", "tail" : ": Idempotent[PartialOrdering] with Identity[PartialOrdering]", "member" : "zio.prelude.PartialOrdering.PartialOrderingIdempotentIdentity", "link" : "zio\/prelude\/PartialOrdering$.html#PartialOrderingIdempotentIdentity:zio.prelude.Idempotent[zio.prelude.PartialOrdering]withzio.prelude.Identity[zio.prelude.PartialOrdering]", "kind" : "implicit val"}, {"label" : "PartialOrderingHashPartialOrd", "tail" : ": Hash[PartialOrdering] with PartialOrd[PartialOrdering]", "member" : "zio.prelude.PartialOrdering.PartialOrderingHashPartialOrd", "link" : "zio\/prelude\/PartialOrdering$.html#PartialOrderingHashPartialOrd:zio.prelude.Hash[zio.prelude.PartialOrdering]withzio.prelude.PartialOrd[zio.prelude.PartialOrdering]", "kind" : "implicit val"}, {"label" : "Incomparable", "tail" : "", "member" : "zio.prelude.PartialOrdering.Incomparable", "link" : "zio\/prelude\/PartialOrdering$.html#Incomparable", "kind" : "case object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrdering$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrdering$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrdering$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrdering$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrdering$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrdering$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrdering$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrdering$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrdering$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrdering$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrdering$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrdering$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrdering$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrdering$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrdering$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrdering$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/PartialOrdering.html", "kind" : "trait", "members_trait" : [{"label" : "unify", "tail" : "(that: PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.unify", "link" : "zio\/prelude\/PartialOrdering.html#unify(that:zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: => PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.orElse", "link" : "zio\/prelude\/PartialOrdering.html#orElse(that:=>zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "final def"}, {"label" : "isLessThan", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isLessThan", "link" : "zio\/prelude\/PartialOrdering.html#isLessThan:Boolean", "kind" : "final def"}, {"label" : "isGreaterThan", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isGreaterThan", "link" : "zio\/prelude\/PartialOrdering.html#isGreaterThan:Boolean", "kind" : "final def"}, {"label" : "isEqual", "tail" : "(): Boolean", "member" : "zio.prelude.PartialOrdering.isEqual", "link" : "zio\/prelude\/PartialOrdering.html#isEqual:Boolean", "kind" : "final def"}, {"label" : "<>", "tail" : "(that: => PartialOrdering): PartialOrdering", "member" : "zio.prelude.PartialOrdering.<>", "link" : "zio\/prelude\/PartialOrdering.html#<>(that:=>zio.prelude.PartialOrdering):zio.prelude.PartialOrdering", "kind" : "final def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/PartialOrdering.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "zio\/prelude\/PartialOrdering.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "zio\/prelude\/PartialOrdering.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "zio\/prelude\/PartialOrdering.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrdering.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrdering.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrdering.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrdering.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrdering.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrdering.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrdering.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdering.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrdering.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrdering.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrdering.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrdering.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrdering.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrdering.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrdering.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrdering.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrdering.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "zio\/prelude\/PartialOrdering.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "zio\/prelude\/PartialOrdering.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "zio\/prelude\/PartialOrdering.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.PartialOrdSyntax", "trait" : "zio\/prelude\/PartialOrdSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "PartialOrdOps", "tail" : "", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps", "link" : "zio\/prelude\/PartialOrdSyntax.html#PartialOrdOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrdSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrdSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrdSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrdSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrdSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrdSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrdSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrdSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrdSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrdSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrdSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrdSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrdSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrdSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrdSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrdSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.PartialOrdSyntax.PartialOrdOps", "shortDescription" : "Provides infix syntax for comparing two values with a total ordering.", "members_class" : [{"label" : "=??=", "tail" : "(r: A1)(ord: PartialOrd[A1]): PartialOrdering", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.=??=", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#=??=[A1>:A](r:A1)(implicitord:zio.prelude.PartialOrd[A1]):zio.prelude.PartialOrdering", "kind" : "def"}, {"label" : "<=", "tail" : "(r: A1)(ord: PartialOrd[A1]): Boolean", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.<=", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#<=[A1>:A](r:A1)(implicitord:zio.prelude.PartialOrd[A1]):Boolean", "kind" : "def"}, {"label" : "<", "tail" : "(r: A1)(ord: PartialOrd[A1]): Boolean", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.<", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#<[A1>:A](r:A1)(implicitord:zio.prelude.PartialOrd[A1]):Boolean", "kind" : "def"}, {"label" : ">=", "tail" : "(r: A1)(ord: PartialOrd[A1]): Boolean", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.>=", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#>=[A1>:A](r:A1)(implicitord:zio.prelude.PartialOrd[A1]):Boolean", "kind" : "def"}, {"label" : ">", "tail" : "(r: A1)(ord: PartialOrd[A1]): Boolean", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.>", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#>[A1>:A](r:A1)(implicitord:zio.prelude.PartialOrd[A1]):Boolean", "kind" : "def"}, {"member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": A", "member" : "zio.prelude.PartialOrdSyntax.PartialOrdOps.l", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#l:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/PartialOrdSyntax$PartialOrdOps.html", "kind" : "class"}, {"name" : "zio.prelude.RightCovariant", "trait" : "zio\/prelude\/RightCovariant.html", "kind" : "trait", "members_trait" : [{"label" : "rightMapIdentity", "tail" : "(ab: <=>[A, B])(eq: Equal[<=>[A, B]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapIdentity", "link" : "zio\/prelude\/RightCovariant.html#rightMapIdentity[A,B](ab:A<=>B)(impliciteq:zio.prelude.Equal[A<=>B]):Boolean", "kind" : "def"}, {"label" : "rightMapCompose", "tail" : "(ab: <=>[A, B], f: (B) => B2, g: (B2) => B3)(eq: Equal[<=>[A, B3]]): Boolean", "member" : "zio.prelude.RightCovariant.rightMapCompose", "link" : "zio\/prelude\/RightCovariant.html#rightMapCompose[A,B,B2,B3](ab:A<=>B,f:B=>B2,g:B2=>B3)(impliciteq:zio.prelude.Equal[A<=>B3]):Boolean", "kind" : "def"}, {"label" : "deriveCovariant", "tail" : "(): Covariant[[+B]<=>[A, B]]", "member" : "zio.prelude.RightCovariant.deriveCovariant", "link" : "zio\/prelude\/RightCovariant.html#deriveCovariant[A]:zio.prelude.Covariant[[+B]A<=>B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/RightCovariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/RightCovariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/RightCovariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/RightCovariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/RightCovariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/RightCovariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/RightCovariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/RightCovariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/RightCovariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/RightCovariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/RightCovariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/RightCovariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/RightCovariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/RightCovariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/RightCovariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/RightCovariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/RightCovariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/RightCovariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/RightCovariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rightMap", "tail" : "(f: (B) => C): (<=>[A, B]) => <=>[A, C]", "member" : "zio.prelude.RightCovariant.rightMap", "link" : "zio\/prelude\/RightCovariant.html#rightMap[A,B,C](f:B=>C):A<=>B=>A<=>C", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.SafeFunction", "shortDescription" : "A SafeFunction is a function that can be freely composed with theguarantee that functions of arbitrary size can be evaluated in constantstack space.", "object" : "zio\/prelude\/SafeFunction$.html", "members_class" : [{"label" : "compose", "tail" : "(that: SafeFunction[In2, In]): SafeFunction[In2, Out]", "member" : "zio.prelude.SafeFunction.compose", "link" : "zio\/prelude\/SafeFunction.html#compose[In2](that:zio.prelude.SafeFunction[In2,In]):zio.prelude.SafeFunction[In2,Out]", "kind" : "def"}, {"label" : "andThen", "tail" : "(that: SafeFunction[Out, Out2]): SafeFunction[In, Out2]", "member" : "zio.prelude.SafeFunction.andThen", "link" : "zio\/prelude\/SafeFunction.html#andThen[Out2](that:zio.prelude.SafeFunction[Out,Out2]):zio.prelude.SafeFunction[In,Out2]", "kind" : "def"}, {"label" : "apply", "tail" : "(in: In): Out", "member" : "zio.prelude.SafeFunction.apply", "link" : "zio\/prelude\/SafeFunction.html#apply(in:In):Out", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/prelude\/SafeFunction.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Out) => A): (In) => A", "member" : "scala.Function1.andThen", "link" : "zio\/prelude\/SafeFunction.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => In): (A) => Out", "member" : "scala.Function1.compose", "link" : "zio\/prelude\/SafeFunction.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/SafeFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/SafeFunction.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/SafeFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/SafeFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/SafeFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/SafeFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/SafeFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/SafeFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/SafeFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/SafeFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/SafeFunction.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/SafeFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/SafeFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/SafeFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/SafeFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(f: (In) => Out): SafeFunction[In, Out]", "member" : "zio.prelude.SafeFunction.apply", "link" : "zio\/prelude\/SafeFunction$.html#apply[In,Out](f:In=>Out):zio.prelude.SafeFunction[In,Out]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/SafeFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/SafeFunction$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/SafeFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/SafeFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/SafeFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/SafeFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/SafeFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/SafeFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/SafeFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/SafeFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/SafeFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/SafeFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/SafeFunction$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/SafeFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/SafeFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/SafeFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/SafeFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/SafeFunction.html", "kind" : "class"}, {"name" : "zio.prelude.These", "object" : "zio\/prelude\/These$.html", "members_object" : [{"label" : "TheseIdempotent", "tail" : "(arg0: Idempotent[A], arg1: Idempotent[B]): Idempotent[These[A, B]]", "member" : "zio.prelude.These.TheseIdempotent", "link" : "zio\/prelude\/These$.html#TheseIdempotent[A,B](implicitevidence$9:zio.prelude.Idempotent[A],implicitevidence$10:zio.prelude.Idempotent[B]):zio.prelude.Idempotent[zio.prelude.These[A,B]]", "kind" : "implicit def"}, {"label" : "TheseHash", "tail" : "(arg0: Hash[A], arg1: Hash[B]): Hash[These[A, B]]", "member" : "zio.prelude.These.TheseHash", "link" : "zio\/prelude\/These$.html#TheseHash[A,B](implicitevidence$7:zio.prelude.Hash[A],implicitevidence$8:zio.prelude.Hash[B]):zio.prelude.Hash[zio.prelude.These[A,B]]", "kind" : "implicit def"}, {"label" : "TheseEqual", "tail" : "(arg0: Equal[A], arg1: Equal[B]): Equal[These[A, B]]", "member" : "zio.prelude.These.TheseEqual", "link" : "zio\/prelude\/These$.html#TheseEqual[A,B](implicitevidence$5:zio.prelude.Equal[A],implicitevidence$6:zio.prelude.Equal[B]):zio.prelude.Equal[zio.prelude.These[A,B]]", "kind" : "implicit def"}, {"label" : "TheseCommutative", "tail" : "(arg0: Commutative[A], arg1: Commutative[B]): Commutative[These[A, B]]", "member" : "zio.prelude.These.TheseCommutative", "link" : "zio\/prelude\/These$.html#TheseCommutative[A,B](implicitevidence$3:zio.prelude.Commutative[A],implicitevidence$4:zio.prelude.Commutative[B]):zio.prelude.Commutative[zio.prelude.These[A,B]]", "kind" : "implicit def"}, {"label" : "TheseBicovariant", "tail" : ": Bicovariant[These]", "member" : "zio.prelude.These.TheseBicovariant", "link" : "zio\/prelude\/These$.html#TheseBicovariant:zio.prelude.Bicovariant[zio.prelude.These]", "kind" : "implicit val"}, {"label" : "TheseAssociative", "tail" : "(arg0: Associative[A], arg1: Associative[B]): Associative[These[A, B]]", "member" : "zio.prelude.These.TheseAssociative", "link" : "zio\/prelude\/These$.html#TheseAssociative[A,B](implicitevidence$1:zio.prelude.Associative[A],implicitevidence$2:zio.prelude.Associative[B]):zio.prelude.Associative[zio.prelude.These[A,B]]", "kind" : "implicit def"}, {"label" : "Both", "tail" : "", "member" : "zio.prelude.These.Both", "link" : "zio\/prelude\/These$.html#Both[+A,+B]extendsThese[A,B]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Right", "tail" : "", "member" : "zio.prelude.These.Right", "link" : "zio\/prelude\/These$.html#Right[+B]extendsThese[Nothing,B]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Left", "tail" : "", "member" : "zio.prelude.These.Left", "link" : "zio\/prelude\/These$.html#Left[+A]extendsThese[A,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/These$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/These$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/These$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/These$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/These$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/These$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/These$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/These$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/These$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/These$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/These$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/These$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/These$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/These$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/These$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/These$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/These.html", "kind" : "trait", "members_trait" : [{"label" : "combine", "tail" : "(that: These[A1, B1])(A1: Associative[A1], B1: Associative[B1]): These[A1, B1]", "member" : "zio.prelude.These.combine", "link" : "zio\/prelude\/These.html#combine[A1>:A,B1>:B](that:zio.prelude.These[A1,B1])(implicitA1:zio.prelude.Associative[A1],implicitB1:zio.prelude.Associative[B1]):zio.prelude.These[A1,B1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/These.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/These.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/These.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/These.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/These.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/These.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/These.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/These.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/These.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/These.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/These.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/These.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/These.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/These.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/These.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/These.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/These.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.Zivariant", "object" : "zio\/prelude\/Zivariant$.html", "members_object" : [{"label" : "ZSTMZivariant", "tail" : ": Zivariant[ZSTM]", "member" : "zio.prelude.Zivariant.ZSTMZivariant", "link" : "zio\/prelude\/Zivariant$.html#ZSTMZivariant:zio.prelude.Zivariant[zio.stm.ZSTM]", "kind" : "implicit val"}, {"label" : "ZStreamZivariant", "tail" : ": Zivariant[ZStream]", "member" : "zio.prelude.Zivariant.ZStreamZivariant", "link" : "zio\/prelude\/Zivariant$.html#ZStreamZivariant:zio.prelude.Zivariant[zio.stream.ZStream]", "kind" : "implicit val"}, {"label" : "ZManagedZivariant", "tail" : ": Zivariant[ZManaged]", "member" : "zio.prelude.Zivariant.ZManagedZivariant", "link" : "zio\/prelude\/Zivariant$.html#ZManagedZivariant:zio.prelude.Zivariant[zio.ZManaged]", "kind" : "implicit val"}, {"label" : "ZLayerZivariant", "tail" : ": Zivariant[ZLayer]", "member" : "zio.prelude.Zivariant.ZLayerZivariant", "link" : "zio\/prelude\/Zivariant$.html#ZLayerZivariant:zio.prelude.Zivariant[zio.ZLayer]", "kind" : "implicit val"}, {"label" : "ZioZivariant", "tail" : ": Zivariant[ZIO]", "member" : "zio.prelude.Zivariant.ZioZivariant", "link" : "zio\/prelude\/Zivariant$.html#ZioZivariant:zio.prelude.Zivariant[zio.ZIO]", "kind" : "implicit val"}, {"label" : "FunctionTupleZivariant", "tail" : ": Zivariant[[-R, +E, +A](R) => (E, A)]", "member" : "zio.prelude.Zivariant.FunctionTupleZivariant", "link" : "zio\/prelude\/Zivariant$.html#FunctionTupleZivariant:zio.prelude.Zivariant[[-R,+E,+A]R=>(E,A)]", "kind" : "implicit val"}, {"label" : "FunctionEitherZivariant", "tail" : ": Zivariant[[-R, +E, +A](R) => Either[E, A]]", "member" : "zio.prelude.Zivariant.FunctionEitherZivariant", "link" : "zio\/prelude\/Zivariant$.html#FunctionEitherZivariant:zio.prelude.Zivariant[[-R,+E,+A]R=>scala.util.Either[E,A]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Zivariant$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Zivariant$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Zivariant$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Zivariant$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Zivariant$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Zivariant$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Zivariant$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Zivariant$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Zivariant$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Zivariant$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Zivariant$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Zivariant$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Zivariant$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Zivariant$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Zivariant$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Zivariant$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/Zivariant.html", "kind" : "trait", "members_trait" : [{"label" : "zimapCoherentWithMapAndContramap", "tail" : "(rea: Z[R, E, A], r: (R1) => R, e: (E) => E1, a: (A) => A1)(eq: Equal[Z[R1, E1, A1]]): Boolean", "member" : "zio.prelude.Zivariant.zimapCoherentWithMapAndContramap", "link" : "zio\/prelude\/Zivariant.html#zimapCoherentWithMapAndContramap[R,E,A,R1,E1,A1](rea:Z[R,E,A],r:R1=>R,e:E=>E1,a:A=>A1)(impliciteq:zio.prelude.Equal[Z[R1,E1,A1]]):Boolean", "kind" : "def"}, {"label" : "zimapComposition", "tail" : "(rea: Z[R, E, A], r2: (R2) => R1, r1: (R1) => R, e1: (E) => E1, e2: (E1) => E2, a1: (A) => A1, a2: (A1) => A2)(eq: Equal[Z[R2, E2, A2]]): Boolean", "member" : "zio.prelude.Zivariant.zimapComposition", "link" : "zio\/prelude\/Zivariant.html#zimapComposition[R,E,A,R1,R2,E1,E2,A1,A2](rea:Z[R,E,A],r2:R2=>R1,r1:R1=>R,e1:E=>E1,e2:E1=>E2,a1:A=>A1,a2:A1=>A2)(impliciteq:zio.prelude.Equal[Z[R2,E2,A2]]):Boolean", "kind" : "def"}, {"label" : "zimapIdentity", "tail" : "(rea: Z[R, E, A])(eq: Equal[Z[R, E, A]]): Boolean", "member" : "zio.prelude.Zivariant.zimapIdentity", "link" : "zio\/prelude\/Zivariant.html#zimapIdentity[R,E,A](rea:Z[R,E,A])(impliciteq:zio.prelude.Equal[Z[R,E,A]]):Boolean", "kind" : "def"}, {"label" : "dimap", "tail" : "(r: (RR) => R, a: (A) => AA): (Z[R, E, A]) => Z[RR, E, AA]", "member" : "zio.prelude.Zivariant.dimap", "link" : "zio\/prelude\/Zivariant.html#dimap[R,E,A,RR,AA](r:RR=>R,a:A=>AA):Z[R,E,A]=>Z[RR,E,AA]", "kind" : "def"}, {"label" : "bimap", "tail" : "(e: (E) => E1, a: (A) => A1): (Z[R, E, A]) => Z[R, E1, A1]", "member" : "zio.prelude.Zivariant.bimap", "link" : "zio\/prelude\/Zivariant.html#bimap[R,E,A,E1,A1](e:E=>E1,a:A=>A1):Z[R,E,A]=>Z[R,E1,A1]", "kind" : "def"}, {"label" : "map", "tail" : "(a: (A) => A1): (Z[R, E, A]) => Z[R, E, A1]", "member" : "zio.prelude.Zivariant.map", "link" : "zio\/prelude\/Zivariant.html#map[R,E,A,A1](a:A=>A1):Z[R,E,A]=>Z[R,E,A1]", "kind" : "def"}, {"label" : "mapLeft", "tail" : "(e: (E) => E1): (Z[R, E, A]) => Z[R, E1, A]", "member" : "zio.prelude.Zivariant.mapLeft", "link" : "zio\/prelude\/Zivariant.html#mapLeft[R,E,A,E1](e:E=>E1):Z[R,E,A]=>Z[R,E1,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(r: (R1) => R): (Z[R, E, A]) => Z[R1, E, A]", "member" : "zio.prelude.Zivariant.contramap", "link" : "zio\/prelude\/Zivariant.html#contramap[R,E,A,R1](r:R1=>R):Z[R,E,A]=>Z[R1,E,A]", "kind" : "def"}, {"label" : "deriveDivariant", "tail" : "(): Divariant[[-R, +A]Z[R, E, A]]", "member" : "zio.prelude.Zivariant.deriveDivariant", "link" : "zio\/prelude\/Zivariant.html#deriveDivariant[E]:zio.prelude.Divariant[[-R,+A]Z[R,E,A]]", "kind" : "def"}, {"label" : "deriveContravariant", "tail" : "(): Contravariant[[-R]Z[R, E, A]]", "member" : "zio.prelude.Zivariant.deriveContravariant", "link" : "zio\/prelude\/Zivariant.html#deriveContravariant[E,A]:zio.prelude.Contravariant[[-R]Z[R,E,A]]", "kind" : "def"}, {"label" : "deriveFailureCovariant", "tail" : "(): Covariant[[+E]Type[Z[R, E, A]]]", "member" : "zio.prelude.Zivariant.deriveFailureCovariant", "link" : "zio\/prelude\/Zivariant.html#deriveFailureCovariant[R,A]:zio.prelude.Covariant[[+E]zio.prelude.newtypes.Failure.newtypeF.Type[Z[R,E,A]]]", "kind" : "def"}, {"label" : "deriveCovariant", "tail" : "(): Covariant[[+A]Z[R, E, A]]", "member" : "zio.prelude.Zivariant.deriveCovariant", "link" : "zio\/prelude\/Zivariant.html#deriveCovariant[R,E]:zio.prelude.Covariant[[+A]Z[R,E,A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/Zivariant.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/Zivariant.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/Zivariant.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/Zivariant.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/Zivariant.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/Zivariant.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/Zivariant.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/Zivariant.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/Zivariant.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/Zivariant.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/Zivariant.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/Zivariant.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/Zivariant.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/Zivariant.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/Zivariant.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/Zivariant.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/Zivariant.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "zimap", "tail" : "(r: (R1) => R, e: (E) => E1, a: (A) => A1): (Z[R, E, A]) => Z[R1, E1, A1]", "member" : "zio.prelude.Zivariant.zimap", "link" : "zio\/prelude\/Zivariant.html#zimap[R,E,A,R1,E1,A1](r:R1=>R,e:E=>E1,a:A=>A1):Z[R,E,A]=>Z[R1,E1,A1]", "kind" : "abstract def"}], "shortDescription" : "Abstract over type constructor with 3 parameters: on first as contravariantand on second and third as covariant."}, {"name" : "zio.prelude.ZivariantSyntax", "trait" : "zio\/prelude\/ZivariantSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "ZivariantOps", "tail" : "", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps", "link" : "zio\/prelude\/ZivariantSyntax.html#ZivariantOps[Z[-_,+_,+_],R,E,A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZivariantSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZivariantSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZivariantSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZivariantSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZivariantSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZivariantSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZivariantSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZivariantSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZivariantSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZivariantSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZivariantSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZivariantSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZivariantSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZivariantSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZivariantSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZivariantSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ZivariantSyntax.ZivariantOps", "shortDescription" : "", "members_class" : [{"label" : "dimap", "tail" : "(r: (RR) => R, a: (A) => AA)(zivariant: Zivariant[Z]): Z[RR, E, AA]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.dimap", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#dimap[RR,AA](r:RR=>R,a:A=>AA)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[RR,E,AA]", "kind" : "def"}, {"label" : "bimap", "tail" : "(e: (E) => E1, a: (A) => A1)(zivariant: Zivariant[Z]): Z[R, E1, A1]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.bimap", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#bimap[E1,A1](e:E=>E1,a:A=>A1)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[R,E1,A1]", "kind" : "def"}, {"label" : "map", "tail" : "(a: (A) => A1)(zivariant: Zivariant[Z]): Z[R, E, A1]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.map", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#map[A1](a:A=>A1)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[R,E,A1]", "kind" : "def"}, {"label" : "mapLeft", "tail" : "(e: (E) => E1)(zivariant: Zivariant[Z]): Z[R, E1, A]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.mapLeft", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#mapLeft[E1](e:E=>E1)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[R,E1,A]", "kind" : "def"}, {"label" : "contramap", "tail" : "(r: (R1) => R)(zivariant: Zivariant[Z]): Z[R1, E, A]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.contramap", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#contramap[R1](r:R1=>R)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[R1,E,A]", "kind" : "def"}, {"label" : "zimap", "tail" : "(r: (R1) => R, e: (E) => E1, a: (A) => A1)(zivariant: Zivariant[Z]): Z[R1, E1, A1]", "member" : "zio.prelude.ZivariantSyntax.ZivariantOps.zimap", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#zimap[R1,E1,A1](r:R1=>R,e:E=>E1,a:A=>A1)(implicitzivariant:zio.prelude.Zivariant[Z]):Z[R1,E1,A1]", "kind" : "def"}, {"member" : "zio.prelude.ZivariantSyntax.ZivariantOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZivariantSyntax$ZivariantOps.html", "kind" : "class"}, {"name" : "zio.prelude.ZNonEmptySet", "shortDescription" : "Similar to ZSet, a ZNonEmptySet[A, B] is a guaranteed non-empty set of A values where B represents some notion of\"how many\" A values are included in the set.", "object" : "zio\/prelude\/ZNonEmptySet$.html", "members_class" : [{"label" : "zipWith", "tail" : "(that: ZNonEmptySet[C, B1])(f: (A, C) => D)(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZNonEmptySet[D, B1]", "member" : "zio.prelude.ZNonEmptySet.zipWith", "link" : "zio\/prelude\/ZNonEmptySet.html#zipWith[B1>:B,C,D](that:zio.prelude.ZNonEmptySet[C,B1])(f:(A,C)=>D)(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZNonEmptySet[D,B1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: ZNonEmptySet[C, B1])(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZNonEmptySet[(A, C), B1]", "member" : "zio.prelude.ZNonEmptySet.zip", "link" : "zio\/prelude\/ZNonEmptySet.html#zip[B1>:B,C](that:zio.prelude.ZNonEmptySet[C,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZNonEmptySet[(A,C),B1]", "kind" : "def"}, {"label" : "union", "tail" : "(that: ZSet[A1, B1])(ev1: Commutative[Max[B1]], ev2: Identity[Sum[B1]]): ZNonEmptySet[A1, B1]", "member" : "zio.prelude.ZNonEmptySet.union", "link" : "zio\/prelude\/ZNonEmptySet.html#union[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Max[B1]],implicitev2:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZNonEmptySet[A1,B1]", "kind" : "def"}, {"label" : "toZSet", "tail" : "(): ZSet[A, B]", "member" : "zio.prelude.ZNonEmptySet.toZSet", "link" : "zio\/prelude\/ZNonEmptySet.html#toZSet:zio.prelude.ZSet[A,B]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.prelude.ZNonEmptySet.toString", "link" : "zio\/prelude\/ZNonEmptySet.html#toString():String", "kind" : "def"}, {"label" : "toNonEmptySet", "tail" : "(ev1: Equal[B1], ev2: Identity[Sum[B1]]): NonEmptySet[A1]", "member" : "zio.prelude.ZNonEmptySet.toNonEmptySet", "link" : "zio\/prelude\/ZNonEmptySet.html#toNonEmptySet[A1>:A,B1>:B](implicitev1:zio.prelude.Equal[B1],implicitev2:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):zio.prelude.NonEmptySet[A1]", "kind" : "def"}, {"label" : "toMap", "tail" : "(): Map[A1, B]", "member" : "zio.prelude.ZNonEmptySet.toMap", "link" : "zio\/prelude\/ZNonEmptySet.html#toMap[A1>:A]:Map[A1,B]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (B) => C): ZNonEmptySet[A, C]", "member" : "zio.prelude.ZNonEmptySet.transform", "link" : "zio\/prelude\/ZNonEmptySet.html#transform[C](f:B=>C):zio.prelude.ZNonEmptySet[A,C]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => C)(ev: Commutative[Sum[B1]]): ZNonEmptySet[C, B1]", "member" : "zio.prelude.ZNonEmptySet.map", "link" : "zio\/prelude\/ZNonEmptySet.html#map[B1>:B,C](f:A=>C)(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZNonEmptySet[C,B1]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.prelude.ZNonEmptySet.hashCode", "link" : "zio\/prelude\/ZNonEmptySet.html#hashCode():Int", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZNonEmptySet[C, B1])(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZNonEmptySet[C, B1]", "member" : "zio.prelude.ZNonEmptySet.flatMap", "link" : "zio\/prelude\/ZNonEmptySet.html#flatMap[B1>:B,C](f:A=>zio.prelude.ZNonEmptySet[C,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZNonEmptySet[C,B1]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.prelude.ZNonEmptySet.equals", "link" : "zio\/prelude\/ZNonEmptySet.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Sum[B1]]): ZNonEmptySet[A1, B1]", "member" : "zio.prelude.ZNonEmptySet.combine", "link" : "zio\/prelude\/ZNonEmptySet.html#combine[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZNonEmptySet[A1,B1]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A1)(ev: Identity[Sum[B1]]): B1", "member" : "zio.prelude.ZNonEmptySet.apply", "link" : "zio\/prelude\/ZNonEmptySet.html#apply[A1>:A,B1>:B](a:A1)(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):B1", "kind" : "def"}, {"label" : "|", "tail" : "(that: ZSet[A1, B1])(ev1: Commutative[Max[B1]], ev2: Identity[Sum[B1]]): ZNonEmptySet[A1, B1]", "member" : "zio.prelude.ZNonEmptySet.|", "link" : "zio\/prelude\/ZNonEmptySet.html#|[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Max[B1]],implicitev2:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZNonEmptySet[A1,B1]", "kind" : "def"}, {"label" : "<>", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Sum[B1]]): ZNonEmptySet[A1, B1]", "member" : "zio.prelude.ZNonEmptySet.<>", "link" : "zio\/prelude\/ZNonEmptySet.html#<>[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZNonEmptySet[A1,B1]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: ZNonEmptySet[C, B1])(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZNonEmptySet[(A, C), B1]", "member" : "zio.prelude.ZNonEmptySet.<*>", "link" : "zio\/prelude\/ZNonEmptySet.html#<*>[B1>:B,C](that:zio.prelude.ZNonEmptySet[C,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZNonEmptySet[(A,C),B1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZNonEmptySet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZNonEmptySet.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZNonEmptySet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZNonEmptySet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZNonEmptySet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZNonEmptySet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZNonEmptySet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZNonEmptySet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZNonEmptySet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZNonEmptySet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZNonEmptySet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZNonEmptySet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZNonEmptySet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "toZSet", "tail" : "(zNonEmptySet: ZNonEmptySet[A, B]): ZSet[A, B]", "member" : "zio.prelude.ZNonEmptySet.toZSet", "link" : "zio\/prelude\/ZNonEmptySet$.html#toZSet[A,B](zNonEmptySet:zio.prelude.ZNonEmptySet[A,B]):zio.prelude.ZSet[A,B]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetHash", "tail" : "(arg0: Hash[B], ev: Identity[Sum[B]]): Hash[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetHash", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetHash[A,B](implicitevidence$6:zio.prelude.Hash[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.Hash[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetIdempotent", "tail" : "(ev: Idempotent[B]): Idempotent[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetIdempotent", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetIdempotent[A,B](implicitev:zio.prelude.Idempotent[B]):zio.prelude.Idempotent[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetFlatten", "tail" : "(ev1: Commutative[Sum[B]], ev2: Commutative[Prod[B]]): AssociativeFlatten[[+x]ZNonEmptySet[x, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetFlatten", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetFlatten[B](implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B]]):zio.prelude.AssociativeFlatten[[+x]zio.prelude.ZNonEmptySet[x,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetCovariant", "tail" : "(ev: Commutative[Sum[B]]): Covariant[[+x]ZNonEmptySet[x, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetCovariant", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetCovariant[B](implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B]]):zio.prelude.Covariant[[+x]zio.prelude.ZNonEmptySet[x,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetDeriveEqual", "tail" : "(arg0: Equal[B], ev: Identity[Sum[B]]): DeriveEqual[[+x]ZNonEmptySet[x, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetDeriveEqual", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetDeriveEqual[B](implicitevidence$4:zio.prelude.Equal[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.DeriveEqual[[+x]zio.prelude.ZNonEmptySet[x,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetEqual", "tail" : "(arg0: Equal[B], ev: Identity[Sum[B]]): Equal[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetEqual", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetEqual[A,B](implicitevidence$3:zio.prelude.Equal[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.Equal[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetDebug", "tail" : "(arg0: Debug[A], arg1: Debug[B]): Debug[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetDebug", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetDebug[A,B](implicitevidence$1:zio.prelude.Debug[A],implicitevidence$2:zio.prelude.Debug[B]):zio.prelude.Debug[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetCommutative", "tail" : "(ev: Commutative[B]): Commutative[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetCommutative", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetCommutative[A,B](implicitev:zio.prelude.Commutative[B]):zio.prelude.Commutative[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "ZNonEmptySetAssociative", "tail" : "(ev: Associative[B]): Associative[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.ZNonEmptySetAssociative", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetAssociative[A,B](implicitev:zio.prelude.Associative[B]):zio.prelude.Associative[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "fromSetOption", "tail" : "(set: Set[A]): Option[ZNonEmptySet[A, Boolean]]", "member" : "zio.prelude.ZNonEmptySet.fromSetOption", "link" : "zio\/prelude\/ZNonEmptySet$.html#fromSetOption[A](set:Set[A]):Option[zio.prelude.ZNonEmptySet[A,Boolean]]", "kind" : "def"}, {"label" : "fromMapOption", "tail" : "(map: Map[A, B]): Option[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZNonEmptySet.fromMapOption", "link" : "zio\/prelude\/ZNonEmptySet$.html#fromMapOption[A,B](map:Map[A,B]):Option[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "def"}, {"label" : "fromNonEmptySet", "tail" : "(set: NonEmptySet[A]): ZNonEmptySet[A, Boolean]", "member" : "zio.prelude.ZNonEmptySet.fromNonEmptySet", "link" : "zio\/prelude\/ZNonEmptySet$.html#fromNonEmptySet[A](set:zio.prelude.NonEmptySet[A]):zio.prelude.ZNonEmptySet[A,Boolean]", "kind" : "def"}, {"label" : "fromIterableOption", "tail" : "(elems: Iterable[A]): Option[NonEmptyMultiSet[A]]", "member" : "zio.prelude.ZNonEmptySet.fromIterableOption", "link" : "zio\/prelude\/ZNonEmptySet$.html#fromIterableOption[A](elems:Iterable[A]):Option[zio.prelude.NonEmptyMultiSet[A]]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(head: A, tail: Iterable[A]): NonEmptyMultiSet[A]", "member" : "zio.prelude.ZNonEmptySet.fromIterable", "link" : "zio\/prelude\/ZNonEmptySet$.html#fromIterable[A](head:A,tail:Iterable[A]):zio.prelude.NonEmptyMultiSet[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A, as: A*): NonEmptyMultiSet[A]", "member" : "zio.prelude.ZNonEmptySet.apply", "link" : "zio\/prelude\/ZNonEmptySet$.html#apply[A](a:A,as:A*):zio.prelude.NonEmptyMultiSet[A]", "kind" : "def"}, {"label" : "ZNonEmptySetPartialOrd", "tail" : "(arg0: PartialOrd[B], ev: Identity[Sum[B]]): PartialOrd[ZNonEmptySet[A, B]]", "member" : "zio.prelude.LowPriorityZNonEmptySetImplicits.ZNonEmptySetPartialOrd", "link" : "zio\/prelude\/ZNonEmptySet$.html#ZNonEmptySetPartialOrd[A,B](implicitevidence$7:zio.prelude.PartialOrd[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.PartialOrd[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZNonEmptySet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZNonEmptySet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZNonEmptySet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZNonEmptySet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZNonEmptySet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZNonEmptySet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZNonEmptySet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZNonEmptySet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZNonEmptySet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZNonEmptySet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZNonEmptySet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZNonEmptySet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZNonEmptySet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZNonEmptySet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZNonEmptySet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZNonEmptySet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZNonEmptySet.html", "kind" : "class"}, {"name" : "zio.prelude.ZNonEmptySetSyntax", "trait" : "zio\/prelude\/ZNonEmptySetSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "ZNonEmptySetNonEmptyMultiSetOps", "tail" : "", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#ZNonEmptySetNonEmptyMultiSetOps[+A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "ZNonEmptySetMapOps", "tail" : "", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetMapOps", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#ZNonEmptySetMapOps[+A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetMapOps", "shortDescription" : "", "members_class" : [{"label" : "toNonEmptyMultiSetOption", "tail" : "(): Option[NonEmptyMultiSet[A]]", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetMapOps.toNonEmptyMultiSetOption", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#toNonEmptyMultiSetOption:Option[zio.prelude.NonEmptyMultiSet[A]]", "kind" : "def"}, {"member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetMapOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetMapOps.html", "kind" : "class"}, {"name" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps", "shortDescription" : "", "members_class" : [{"label" : "tailNonEmpty", "tail" : "(): Option[NonEmptyMultiSet[A]]", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps.tailNonEmpty", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#tailNonEmpty:Option[zio.prelude.NonEmptyMultiSet[A]]", "kind" : "def"}, {"label" : "tail", "tail" : "(): MultiSet[A]", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps.tail", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#tail:zio.prelude.MultiSet[A]", "kind" : "def"}, {"label" : "peelNonEmpty", "tail" : "(): (A, Option[NonEmptyMultiSet[A]])", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps.peelNonEmpty", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#peelNonEmpty:(A,Option[zio.prelude.NonEmptyMultiSet[A]])", "kind" : "def"}, {"label" : "peel", "tail" : "(): (A, MultiSet[A])", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps.peel", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#peel:(A,zio.prelude.MultiSet[A])", "kind" : "def"}, {"label" : "head", "tail" : "(): A", "member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps.head", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#head:A", "kind" : "def"}, {"member" : "zio.prelude.ZNonEmptySetSyntax.ZNonEmptySetNonEmptyMultiSetOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZNonEmptySetSyntax$ZNonEmptySetNonEmptyMultiSetOps.html", "kind" : "class"}, {"name" : "zio.prelude.ZSet", "shortDescription" : "A ZSet[A, B] is a set of A values where B represents some notion of\"how many\" A values are included in the set.", "object" : "zio\/prelude\/ZSet$.html", "members_class" : [{"label" : "zipWith", "tail" : "(that: ZSet[C, B1])(f: (A, C) => D)(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZSet[D, B1]", "member" : "zio.prelude.ZSet.zipWith", "link" : "zio\/prelude\/ZSet.html#zipWith[B1>:B,C,D](that:zio.prelude.ZSet[C,B1])(f:(A,C)=>D)(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZSet[D,B1]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: ZSet[C, B1])(ev: Commutative[Prod[B1]]): ZSet[(A, C), B1]", "member" : "zio.prelude.ZSet.zip", "link" : "zio\/prelude\/ZSet.html#zip[B1>:B,C](that:zio.prelude.ZSet[C,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZSet[(A,C),B1]", "kind" : "def"}, {"label" : "union", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Max[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.union", "link" : "zio\/prelude\/ZSet.html#union[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Max[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "zio.prelude.ZSet.toString", "link" : "zio\/prelude\/ZSet.html#toString():String", "kind" : "def"}, {"label" : "toSet", "tail" : "(ev1: Equal[B1], ev2: Identity[Sum[B1]]): Set[A1]", "member" : "zio.prelude.ZSet.toSet", "link" : "zio\/prelude\/ZSet.html#toSet[A1>:A,B1>:B](implicitev1:zio.prelude.Equal[B1],implicitev2:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):Set[A1]", "kind" : "def"}, {"label" : "toNonEmptyZSet", "tail" : "(): Option[ZNonEmptySet[A, B]]", "member" : "zio.prelude.ZSet.toNonEmptyZSet", "link" : "zio\/prelude\/ZSet.html#toNonEmptyZSet:Option[zio.prelude.ZNonEmptySet[A,B]]", "kind" : "def"}, {"label" : "toMap", "tail" : "(): Map[A1, B]", "member" : "zio.prelude.ZSet.toMap", "link" : "zio\/prelude\/ZSet.html#toMap[A1>:A]:Map[A1,B]", "kind" : "def"}, {"label" : "transform", "tail" : "(f: (B) => C): ZSet[A, C]", "member" : "zio.prelude.ZSet.transform", "link" : "zio\/prelude\/ZSet.html#transform[C](f:B=>C):zio.prelude.ZSet[A,C]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) => C)(ev: Commutative[Sum[B1]]): ZSet[C, B1]", "member" : "zio.prelude.ZSet.map", "link" : "zio\/prelude\/ZSet.html#map[B1>:B,C](f:A=>C)(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZSet[C,B1]", "kind" : "def"}, {"label" : "intersect", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Min[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.intersect", "link" : "zio\/prelude\/ZSet.html#intersect[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Min[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.prelude.ZSet.hashCode", "link" : "zio\/prelude\/ZSet.html#hashCode():Int", "kind" : "def"}, {"label" : "forEach", "tail" : "(f: (A) => G[C])(arg0: IdentityBoth[G], arg1: Covariant[G], ev: <:<[B, Natural]): G[MultiSet[C]]", "member" : "zio.prelude.ZSet.forEach", "link" : "zio\/prelude\/ZSet.html#forEach[G[+_],C](f:A=>G[C])(implicitevidence$1:zio.prelude.IdentityBoth[G],implicitevidence$2:zio.prelude.Covariant[G],implicitev:B<:<zio.prelude.newtypes.Natural):G[zio.prelude.MultiSet[C]]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZSet[C, B1])(ev1: Commutative[Sum[B1]], ev2: Commutative[Prod[B1]]): ZSet[C, B1]", "member" : "zio.prelude.ZSet.flatMap", "link" : "zio\/prelude\/ZSet.html#flatMap[B1>:B,C](f:A=>zio.prelude.ZSet[C,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZSet[C,B1]", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.prelude.ZSet.equals", "link" : "zio\/prelude\/ZSet.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "diff", "tail" : "(that: ZSet[A1, B1])(ev: Inverse[Sum[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.diff", "link" : "zio\/prelude\/ZSet.html#diff[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Inverse[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "combine", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Sum[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.combine", "link" : "zio\/prelude\/ZSet.html#combine[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A1)(ev: Identity[Sum[B1]]): B1", "member" : "zio.prelude.ZSet.apply", "link" : "zio\/prelude\/ZSet.html#apply[A1>:A,B1>:B](a:A1)(implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B1]]):B1", "kind" : "def"}, {"label" : "|", "tail" : "(that: ZSet[A1, B1])(ev1: Commutative[Max[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.|", "link" : "zio\/prelude\/ZSet.html#|[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Max[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "<>", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Sum[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.<>", "link" : "zio\/prelude\/ZSet.html#<>[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "<*>", "tail" : "(that: ZSet[C, B1])(ev: Commutative[Prod[B1]]): ZSet[(A, C), B1]", "member" : "zio.prelude.ZSet.<*>", "link" : "zio\/prelude\/ZSet.html#<*>[B1>:B,C](that:zio.prelude.ZSet[C,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B1]]):zio.prelude.ZSet[(A,C),B1]", "kind" : "def"}, {"label" : "&~", "tail" : "(that: ZSet[A1, B1])(ev: Inverse[Sum[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.&~", "link" : "zio\/prelude\/ZSet.html#&~[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Inverse[zio.prelude.newtypes.Sum[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "&", "tail" : "(that: ZSet[A1, B1])(ev: Commutative[Min[B1]]): ZSet[A1, B1]", "member" : "zio.prelude.ZSet.&", "link" : "zio\/prelude\/ZSet.html#&[A1>:A,B1>:B](that:zio.prelude.ZSet[A1,B1])(implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Min[B1]]):zio.prelude.ZSet[A1,B1]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZSet.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "ZSetHash", "tail" : "(arg0: Hash[B], ev: Identity[Sum[B]]): Hash[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetHash", "link" : "zio\/prelude\/ZSet$.html#ZSetHash[A,B](implicitevidence$9:zio.prelude.Hash[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.Hash[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "ZSetIdentityFlatten", "tail" : "(ev1: Commutative[Sum[B]], ev2: Commutative[Prod[B]]): IdentityFlatten[[+x]ZSet[x, B]]", "member" : "zio.prelude.ZSet.ZSetIdentityFlatten", "link" : "zio\/prelude\/ZSet$.html#ZSetIdentityFlatten[B](implicitev1:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B]],implicitev2:zio.prelude.Commutative[zio.prelude.newtypes.Prod[B]]):zio.prelude.IdentityFlatten[[+x]zio.prelude.ZSet[x,B]]", "kind" : "implicit def"}, {"label" : "ZSetIdentity", "tail" : "(ev: Associative[B]): Identity[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetIdentity", "link" : "zio\/prelude\/ZSet$.html#ZSetIdentity[A,B](implicitev:zio.prelude.Associative[B]):zio.prelude.Identity[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "ZSetIdempotent", "tail" : "(ev: Idempotent[B]): Idempotent[ZSet[A, B]] with Identity[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetIdempotent", "link" : "zio\/prelude\/ZSet$.html#ZSetIdempotent[A,B](implicitev:zio.prelude.Idempotent[B]):zio.prelude.Idempotent[zio.prelude.ZSet[A,B]]withzio.prelude.Identity[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "ZSetCovariant", "tail" : "(ev: Commutative[Sum[B]]): Covariant[[+x]ZSet[x, B]]", "member" : "zio.prelude.ZSet.ZSetCovariant", "link" : "zio\/prelude\/ZSet$.html#ZSetCovariant[B](implicitev:zio.prelude.Commutative[zio.prelude.newtypes.Sum[B]]):zio.prelude.Covariant[[+x]zio.prelude.ZSet[x,B]]", "kind" : "implicit def"}, {"label" : "ZSetDeriveEqual", "tail" : "(arg0: Equal[B], ev: Identity[Sum[B]]): DeriveEqual[[+x]ZSet[x, B]]", "member" : "zio.prelude.ZSet.ZSetDeriveEqual", "link" : "zio\/prelude\/ZSet$.html#ZSetDeriveEqual[B](implicitevidence$7:zio.prelude.Equal[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.DeriveEqual[[+x]zio.prelude.ZSet[x,B]]", "kind" : "implicit def"}, {"label" : "ZSetEqual", "tail" : "(ev1: Equal[B], ev: Identity[Sum[B]]): Equal[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetEqual", "link" : "zio\/prelude\/ZSet$.html#ZSetEqual[A,B](implicitev1:zio.prelude.Equal[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.Equal[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "ZSetDebug", "tail" : "(arg0: Debug[A], arg1: Debug[B]): Debug[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetDebug", "link" : "zio\/prelude\/ZSet$.html#ZSetDebug[A,B](implicitevidence$5:zio.prelude.Debug[A],implicitevidence$6:zio.prelude.Debug[B]):zio.prelude.Debug[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "ZSetCommutative", "tail" : "(ev: Commutative[B]): Commutative[ZSet[A, B]] with Identity[ZSet[A, B]]", "member" : "zio.prelude.ZSet.ZSetCommutative", "link" : "zio\/prelude\/ZSet$.html#ZSetCommutative[A,B](implicitev:zio.prelude.Commutative[B]):zio.prelude.Commutative[zio.prelude.ZSet[A,B]]withzio.prelude.Identity[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "MultiSetForEach", "tail" : ": ForEach[MultiSet]", "member" : "zio.prelude.ZSet.MultiSetForEach", "link" : "zio\/prelude\/ZSet$.html#MultiSetForEach:zio.prelude.ForEach[zio.prelude.MultiSet]", "kind" : "implicit lazy val"}, {"label" : "fromMap", "tail" : "(map: Map[A, B]): ZSet[A, B]", "member" : "zio.prelude.ZSet.fromMap", "link" : "zio\/prelude\/ZSet$.html#fromMap[A,B](map:Map[A,B]):zio.prelude.ZSet[A,B]", "kind" : "def"}, {"label" : "fromSet", "tail" : "(set: Set[A]): ZSet[A, Boolean]", "member" : "zio.prelude.ZSet.fromSet", "link" : "zio\/prelude\/ZSet$.html#fromSet[A](set:Set[A]):zio.prelude.ZSet[A,Boolean]", "kind" : "def"}, {"label" : "fromIterable", "tail" : "(iterable: Iterable[A]): MultiSet[A]", "member" : "zio.prelude.ZSet.fromIterable", "link" : "zio\/prelude\/ZSet$.html#fromIterable[A](iterable:Iterable[A]):zio.prelude.MultiSet[A]", "kind" : "def"}, {"label" : "empty", "tail" : ": ZSet[Nothing, Nothing]", "member" : "zio.prelude.ZSet.empty", "link" : "zio\/prelude\/ZSet$.html#empty:zio.prelude.ZSet[Nothing,Nothing]", "kind" : "val"}, {"label" : "apply", "tail" : "(as: A*): ZSet[A, Int]", "member" : "zio.prelude.ZSet.apply", "link" : "zio\/prelude\/ZSet$.html#apply[A](as:A*):zio.prelude.ZSet[A,Int]", "kind" : "def"}, {"label" : "ZSetPartialOrd", "tail" : "(arg0: PartialOrd[B], ev: Identity[Sum[B]]): PartialOrd[ZSet[A, B]]", "member" : "zio.prelude.LowPriorityZSetImplicits.ZSetPartialOrd", "link" : "zio\/prelude\/ZSet$.html#ZSetPartialOrd[A,B](implicitevidence$10:zio.prelude.PartialOrd[B],implicitev:zio.prelude.Identity[zio.prelude.newtypes.Sum[B]]):zio.prelude.PartialOrd[zio.prelude.ZSet[A,B]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZSet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZSet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZSet.html", "kind" : "class"}, {"name" : "zio.prelude.ZSetSyntax", "trait" : "zio\/prelude\/ZSetSyntax.html", "kind" : "trait", "members_trait" : [{"label" : "ZSetMultiSetOps", "tail" : "", "member" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps", "link" : "zio\/prelude\/ZSetSyntax.html#ZSetMultiSetOps[+A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "ZSetMapOps", "tail" : "", "member" : "zio.prelude.ZSetSyntax.ZSetMapOps", "link" : "zio\/prelude\/ZSetSyntax.html#ZSetMapOps[+A]extendsAnyRef", "kind" : "implicit final class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZSetSyntax.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZSetSyntax.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZSetSyntax.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZSetSyntax.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZSetSyntax.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZSetSyntax.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZSetSyntax.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZSetSyntax.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZSetSyntax.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZSetSyntax.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZSetSyntax.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZSetSyntax.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZSetSyntax.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZSetSyntax.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZSetSyntax.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZSetSyntax.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "zio.prelude.ZSetSyntax.ZSetMapOps", "shortDescription" : "", "members_class" : [{"label" : "toMultiSet", "tail" : "(): MultiSet[A]", "member" : "zio.prelude.ZSetSyntax.ZSetMapOps.toMultiSet", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#toMultiSet:zio.prelude.MultiSet[A]", "kind" : "def"}, {"member" : "zio.prelude.ZSetSyntax.ZSetMapOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZSetSyntax$ZSetMapOps.html", "kind" : "class"}, {"name" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps", "shortDescription" : "", "members_class" : [{"label" : "tail", "tail" : "(): Option[MultiSet[A]]", "member" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps.tail", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#tail:Option[zio.prelude.MultiSet[A]]", "kind" : "def"}, {"label" : "peel", "tail" : "(): Option[(A, MultiSet[A])]", "member" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps.peel", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#peel:Option[(A,zio.prelude.MultiSet[A])]", "kind" : "def"}, {"label" : "head", "tail" : "(): Option[A]", "member" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps.head", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#head:Option[A]", "kind" : "def"}, {"member" : "zio.prelude.ZSetSyntax.ZSetMultiSetOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "zio\/prelude\/ZSetSyntax$ZSetMultiSetOps.html", "kind" : "class"}, {"name" : "zio.prelude.ZValidation", "object" : "zio\/prelude\/ZValidation$.html", "members_object" : [{"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19], a20: ZValidation[W, E, A20], a21: ZValidation[W, E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19],a20:zio.prelude.ZValidation[W,E,A20],a21:zio.prelude.ZValidation[W,E,A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19], a20: ZValidation[W, E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19],a20:zio.prelude.ZValidation[W,E,A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,A7,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,A6,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5])(f: (A0, A1, A2, A3, A4, A5) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,A5,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5])(f:(A0,A1,A2,A3,A4,A5)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4])(f: (A0, A1, A2, A3, A4) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,A4,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4])(f:(A0,A1,A2,A3,A4)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3])(f: (A0, A1, A2, A3) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,A3,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3])(f:(A0,A1,A2,A3)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2])(f: (A0, A1, A2) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,A2,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2])(f:(A0,A1,A2)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validateWith", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1])(f: (A0, A1) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.validateWith", "link" : "zio\/prelude\/ZValidation$.html#validateWith[W,E,A0,A1,B](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1])(f:(A0,A1)=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19], a20: ZValidation[W, E, A20], a21: ZValidation[W, E, A21]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19],a20:zio.prelude.ZValidation[W,E,A20],a21:zio.prelude.ZValidation[W,E,A21]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19], a20: ZValidation[W, E, A20]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19],a20:zio.prelude.ZValidation[W,E,A20]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18], a19: ZValidation[W, E, A19]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18],a19:zio.prelude.ZValidation[W,E,A19]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17], a18: ZValidation[W, E, A18]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17],a18:zio.prelude.ZValidation[W,E,A18]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16], a17: ZValidation[W, E, A17]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16],a17:zio.prelude.ZValidation[W,E,A17]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15], a16: ZValidation[W, E, A16]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15],a16:zio.prelude.ZValidation[W,E,A16]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14], a15: ZValidation[W, E, A15]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14],a15:zio.prelude.ZValidation[W,E,A15]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13], a14: ZValidation[W, E, A14]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13],a14:zio.prelude.ZValidation[W,E,A14]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12], a13: ZValidation[W, E, A13]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12],a13:zio.prelude.ZValidation[W,E,A13]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11], a12: ZValidation[W, E, A12]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11],a12:zio.prelude.ZValidation[W,E,A12]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10], a11: ZValidation[W, E, A11]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10],a11:zio.prelude.ZValidation[W,E,A11]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9], a10: ZValidation[W, E, A10]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9],a10:zio.prelude.ZValidation[W,E,A10]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8], a9: ZValidation[W, E, A9]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8,A9](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8],a9:zio.prelude.ZValidation[W,E,A9]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7], a8: ZValidation[W, E, A8]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7,A8](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7],a8:zio.prelude.ZValidation[W,E,A8]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6], a7: ZValidation[W, E, A7]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6,A7](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6],a7:zio.prelude.ZValidation[W,E,A7]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5], a6: ZValidation[W, E, A6]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5,A6](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5],a6:zio.prelude.ZValidation[W,E,A6]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4], a5: ZValidation[W, E, A5]): ZValidation[W, E, (A0, A1, A2, A3, A4, A5)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4,A5](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4],a5:zio.prelude.ZValidation[W,E,A5]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3], a4: ZValidation[W, E, A4]): ZValidation[W, E, (A0, A1, A2, A3, A4)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3,A4](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3],a4:zio.prelude.ZValidation[W,E,A4]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2], a3: ZValidation[W, E, A3]): ZValidation[W, E, (A0, A1, A2, A3)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2,A3](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2],a3:zio.prelude.ZValidation[W,E,A3]):zio.prelude.ZValidation[W,E,(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1], a2: ZValidation[W, E, A2]): ZValidation[W, E, (A0, A1, A2)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1,A2](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1],a2:zio.prelude.ZValidation[W,E,A2]):zio.prelude.ZValidation[W,E,(A0,A1,A2)]", "kind" : "def"}, {"label" : "validate", "tail" : "(a0: ZValidation[W, E, A0], a1: ZValidation[W, E, A1]): ZValidation[W, E, (A0, A1)]", "member" : "zio.prelude.ZValidation.validate", "link" : "zio\/prelude\/ZValidation$.html#validate[W,E,A0,A1](a0:zio.prelude.ZValidation[W,E,A0],a1:zio.prelude.ZValidation[W,E,A1]):zio.prelude.ZValidation[W,E,(A0,A1)]", "kind" : "def"}, {"label" : "unit", "tail" : ": Validation[Nothing, Unit]", "member" : "zio.prelude.ZValidation.unit", "link" : "zio\/prelude\/ZValidation$.html#unit:zio.prelude.Validation[Nothing,Unit]", "kind" : "val"}, {"label" : "succeed", "tail" : "(value: A): Validation[Nothing, A]", "member" : "zio.prelude.ZValidation.succeed", "link" : "zio\/prelude\/ZValidation$.html#succeed[A](value:A):zio.prelude.Validation[Nothing,A]", "kind" : "def"}, {"label" : "log", "tail" : "(w: W): ZValidation[W, Nothing, Unit]", "member" : "zio.prelude.ZValidation.log", "link" : "zio\/prelude\/ZValidation$.html#log[W](w:W):zio.prelude.ZValidation[W,Nothing,Unit]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(value: => Try[A]): Validation[Throwable, A]", "member" : "zio.prelude.ZValidation.fromTry", "link" : "zio\/prelude\/ZValidation$.html#fromTry[A](value:=>scala.util.Try[A]):zio.prelude.Validation[Throwable,A]", "kind" : "def"}, {"label" : "fromPredicateWith", "tail" : "(error: => E)(value: A)(f: (A) => Boolean): Validation[E, A]", "member" : "zio.prelude.ZValidation.fromPredicateWith", "link" : "zio\/prelude\/ZValidation$.html#fromPredicateWith[E,A](error:=>E)(value:A)(f:A=>Boolean):zio.prelude.Validation[E,A]", "kind" : "def"}, {"label" : "fromPredicate", "tail" : "(value: A)(f: (A) => Boolean): Validation[None.type, A]", "member" : "zio.prelude.ZValidation.fromPredicate", "link" : "zio\/prelude\/ZValidation$.html#fromPredicate[A](value:A)(f:A=>Boolean):zio.prelude.Validation[None.type,A]", "kind" : "def"}, {"label" : "fromOptionWith", "tail" : "(error: => E)(value: Option[A]): Validation[E, A]", "member" : "zio.prelude.ZValidation.fromOptionWith", "link" : "zio\/prelude\/ZValidation$.html#fromOptionWith[E,A](error:=>E)(value:Option[A]):zio.prelude.Validation[E,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(value: Option[A]): Validation[Unit, A]", "member" : "zio.prelude.ZValidation.fromOption", "link" : "zio\/prelude\/ZValidation$.html#fromOption[A](value:Option[A]):zio.prelude.Validation[Unit,A]", "kind" : "def"}, {"label" : "fromEitherNonEmptyChunk", "tail" : "(value: Either[NonEmptyChunk[E], A]): Validation[E, A]", "member" : "zio.prelude.ZValidation.fromEitherNonEmptyChunk", "link" : "zio\/prelude\/ZValidation$.html#fromEitherNonEmptyChunk[E,A](value:Either[zio.NonEmptyChunk[E],A]):zio.prelude.Validation[E,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(value: Either[E, A]): Validation[E, A]", "member" : "zio.prelude.ZValidation.fromEither", "link" : "zio\/prelude\/ZValidation$.html#fromEither[E,A](value:Either[E,A]):zio.prelude.Validation[E,A]", "kind" : "def"}, {"label" : "failNonEmptyChunk", "tail" : "(errors: NonEmptyChunk[E]): Validation[E, Nothing]", "member" : "zio.prelude.ZValidation.failNonEmptyChunk", "link" : "zio\/prelude\/ZValidation$.html#failNonEmptyChunk[E](errors:zio.NonEmptyChunk[E]):zio.prelude.Validation[E,Nothing]", "kind" : "def"}, {"label" : "fail", "tail" : "(error: E): Validation[E, Nothing]", "member" : "zio.prelude.ZValidation.fail", "link" : "zio\/prelude\/ZValidation$.html#fail[E](error:E):zio.prelude.Validation[E,Nothing]", "kind" : "def"}, {"label" : "validateAll", "tail" : "(validations: F[ZValidation[W, E, A]])(arg0: ForEach[F]): ZValidation[W, E, F[A]]", "member" : "zio.prelude.ZValidation.validateAll", "link" : "zio\/prelude\/ZValidation$.html#validateAll[F[+_],W,E,A](validations:F[zio.prelude.ZValidation[W,E,A]])(implicitevidence$16:zio.prelude.ForEach[F]):zio.prelude.ZValidation[W,E,F[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Validation[Throwable, A]", "member" : "zio.prelude.ZValidation.apply", "link" : "zio\/prelude\/ZValidation$.html#apply[A](a:=>A):zio.prelude.Validation[Throwable,A]", "kind" : "def"}, {"label" : "ZValidationPartialOrd", "tail" : "(arg0: PartialOrd[E], arg1: PartialOrd[A]): PartialOrd[ZValidation[W, E, A]]", "member" : "zio.prelude.ZValidation.ZValidationPartialOrd", "link" : "zio\/prelude\/ZValidation$.html#ZValidationPartialOrd[W,E,A](implicitevidence$14:zio.prelude.PartialOrd[E],implicitevidence$15:zio.prelude.PartialOrd[A]):zio.prelude.PartialOrd[zio.prelude.ZValidation[W,E,A]]", "kind" : "implicit def"}, {"label" : "ZValidationIdentityBoth", "tail" : "(): IdentityBoth[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.ZValidation.ZValidationIdentityBoth", "link" : "zio\/prelude\/ZValidation$.html#ZValidationIdentityBoth[W,E]:zio.prelude.IdentityBoth[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "ZValidationForEach", "tail" : "(): ForEach[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.ZValidation.ZValidationForEach", "link" : "zio\/prelude\/ZValidation$.html#ZValidationForEach[W,E]:zio.prelude.ForEach[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "ZValidationFailureDeriveEqual", "tail" : "(arg0: Equal[W], arg1: Equal[A]): DeriveEqual[[+e]Type[ZValidation[W, e, A]]]", "member" : "zio.prelude.ZValidation.ZValidationFailureDeriveEqual", "link" : "zio\/prelude\/ZValidation$.html#ZValidationFailureDeriveEqual[W,A](implicitevidence$9:zio.prelude.Equal[W],implicitevidence$10:zio.prelude.Equal[A]):zio.prelude.DeriveEqual[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.prelude.ZValidation[W,e,A]]]", "kind" : "implicit def"}, {"label" : "ZValidationFailureCovariant", "tail" : "(): Covariant[[+e]Type[ZValidation[W, e, A]]]", "member" : "zio.prelude.ZValidation.ZValidationFailureCovariant", "link" : "zio\/prelude\/ZValidation$.html#ZValidationFailureCovariant[W,A]:zio.prelude.Covariant[[+e]zio.prelude.newtypes.Failure.newtypeF.Type[zio.prelude.ZValidation[W,e,A]]]", "kind" : "implicit def"}, {"label" : "ZValidationDeriveEqual", "tail" : "(arg0: Equal[E]): DeriveEqual[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.ZValidation.ZValidationDeriveEqual", "link" : "zio\/prelude\/ZValidation$.html#ZValidationDeriveEqual[W,E](implicitevidence$7:zio.prelude.Equal[E]):zio.prelude.DeriveEqual[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "ZValidationEqual", "tail" : "(arg0: Equal[A]): Equal[ZValidation[W, E, A]]", "member" : "zio.prelude.ZValidation.ZValidationEqual", "link" : "zio\/prelude\/ZValidation$.html#ZValidationEqual[W,E,A](implicitevidence$6:zio.prelude.Equal[A]):zio.prelude.Equal[zio.prelude.ZValidation[W,E,A]]", "kind" : "implicit def"}, {"label" : "ZValidationDebug", "tail" : "(arg0: Debug[W], arg1: Debug[E], arg2: Debug[A]): Debug[ZValidation[W, E, A]]", "member" : "zio.prelude.ZValidation.ZValidationDebug", "link" : "zio\/prelude\/ZValidation$.html#ZValidationDebug[W,E,A](implicitevidence$3:zio.prelude.Debug[W],implicitevidence$4:zio.prelude.Debug[E],implicitevidence$5:zio.prelude.Debug[A]):zio.prelude.Debug[zio.prelude.ZValidation[W,E,A]]", "kind" : "implicit def"}, {"label" : "ZValidationCovariant", "tail" : "(): Covariant[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.ZValidation.ZValidationCovariant", "link" : "zio\/prelude\/ZValidation$.html#ZValidationCovariant[W,E]:zio.prelude.Covariant[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "Success", "tail" : "", "member" : "zio.prelude.ZValidation.Success", "link" : "zio\/prelude\/ZValidation$.html#Success[+W,+A]extendsZValidation[W,Nothing,A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Failure", "tail" : "", "member" : "zio.prelude.ZValidation.Failure", "link" : "zio\/prelude\/ZValidation$.html#Failure[+W,+E]extendsZValidation[W,E,Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ZValidationHash", "tail" : "(arg0: Hash[A]): Hash[ZValidation[W, E, A]]", "member" : "zio.prelude.LowPriorityValidationImplicits.ZValidationHash", "link" : "zio\/prelude\/ZValidation$.html#ZValidationHash[W,E,A](implicitevidence$17:zio.prelude.Hash[A]):zio.prelude.Hash[zio.prelude.ZValidation[W,E,A]]", "kind" : "implicit def"}, {"label" : "ZValidationCommutativeBoth", "tail" : "(): CommutativeBoth[[+a]ZValidation[W, E, a]]", "member" : "zio.prelude.LowPriorityValidationImplicits.ZValidationCommutativeBoth", "link" : "zio\/prelude\/ZValidation$.html#ZValidationCommutativeBoth[W,E]:zio.prelude.CommutativeBoth[[+a]zio.prelude.ZValidation[W,E,a]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZValidation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZValidation$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZValidation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZValidation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZValidation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZValidation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZValidation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZValidation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZValidation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZValidation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZValidation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/ZValidation$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/ZValidation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZValidation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZValidation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZValidation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/ZValidation.html", "kind" : "trait", "members_trait" : [{"label" : "zipWithPar", "tail" : "(that: ZValidation[W1, E1, B])(f: (A, B) => C): ZValidation[W1, E1, C]", "member" : "zio.prelude.ZValidation.zipWithPar", "link" : "zio\/prelude\/ZValidation.html#zipWithPar[W1>:W,E1>:E,B,C](that:zio.prelude.ZValidation[W1,E1,B])(f:(A,B)=>C):zio.prelude.ZValidation[W1,E1,C]", "kind" : "final def"}, {"label" : "zipPar", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, (A, B)]", "member" : "zio.prelude.ZValidation.zipPar", "link" : "zio\/prelude\/ZValidation.html#zipPar[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,(A,B)]", "kind" : "final def"}, {"label" : "zipParRight", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, B]", "member" : "zio.prelude.ZValidation.zipParRight", "link" : "zio\/prelude\/ZValidation.html#zipParRight[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,B]", "kind" : "final def"}, {"label" : "zipParLeft", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, A]", "member" : "zio.prelude.ZValidation.zipParLeft", "link" : "zio\/prelude\/ZValidation.html#zipParLeft[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,A]", "kind" : "final def"}, {"label" : "toZIO", "tail" : "(): IO[E, A]", "member" : "zio.prelude.ZValidation.toZIO", "link" : "zio\/prelude\/ZValidation.html#toZIO:zio.IO[E,A]", "kind" : "final def"}, {"label" : "toTry", "tail" : "(ev: <:<[E, Throwable]): Try[A]", "member" : "zio.prelude.ZValidation.toTry", "link" : "zio\/prelude\/ZValidation.html#toTry(implicitev:E<:<Throwable):scala.util.Try[A]", "kind" : "final def"}, {"label" : "toOption", "tail" : "(): Option[A]", "member" : "zio.prelude.ZValidation.toOption", "link" : "zio\/prelude\/ZValidation.html#toOption:Option[A]", "kind" : "final def"}, {"label" : "toEitherWith", "tail" : "(f: (NonEmptyChunk[E]) => E2): Either[E2, A]", "member" : "zio.prelude.ZValidation.toEitherWith", "link" : "zio\/prelude\/ZValidation.html#toEitherWith[E2](f:zio.NonEmptyChunk[E]=>E2):Either[E2,A]", "kind" : "final def"}, {"label" : "toEitherMultiSet", "tail" : "(): Either[NonEmptyMultiSet[E], A]", "member" : "zio.prelude.ZValidation.toEitherMultiSet", "link" : "zio\/prelude\/ZValidation.html#toEitherMultiSet:Either[zio.prelude.NonEmptyMultiSet[E],A]", "kind" : "final def"}, {"label" : "toEither", "tail" : "(): Either[NonEmptyChunk[E], A]", "member" : "zio.prelude.ZValidation.toEither", "link" : "zio\/prelude\/ZValidation.html#toEither:Either[zio.NonEmptyChunk[E],A]", "kind" : "final def"}, {"label" : "orElseLog", "tail" : "(that: ZValidation[W1, E1, A1])(ev: <:<[E, W1]): ZValidation[W1, E1, A1]", "member" : "zio.prelude.ZValidation.orElseLog", "link" : "zio\/prelude\/ZValidation.html#orElseLog[W1>:W,E1,A1>:A](that:zio.prelude.ZValidation[W1,E1,A1])(implicitev:E<:<W1):zio.prelude.ZValidation[W1,E1,A1]", "kind" : "final def"}, {"label" : "orElse", "tail" : "(that: ZValidation[W1, E1, A1]): ZValidation[W1, E1, A1]", "member" : "zio.prelude.ZValidation.orElse", "link" : "zio\/prelude\/ZValidation.html#orElse[W1>:W,E1,A1>:A](that:zio.prelude.ZValidation[W1,E1,A1]):zio.prelude.ZValidation[W1,E1,A1]", "kind" : "final def"}, {"label" : "runLog", "tail" : "(): (Chunk[W], Either[NonEmptyChunk[E], A])", "member" : "zio.prelude.ZValidation.runLog", "link" : "zio\/prelude\/ZValidation.html#runLog[B]:(zio.Chunk[W],Either[zio.NonEmptyChunk[E],A])", "kind" : "final def"}, {"label" : "mapLogAll", "tail" : "(f: (Chunk[W]) => Chunk[W2]): ZValidation[W2, E, A]", "member" : "zio.prelude.ZValidation.mapLogAll", "link" : "zio\/prelude\/ZValidation.html#mapLogAll[W2](f:zio.Chunk[W]=>zio.Chunk[W2]):zio.prelude.ZValidation[W2,E,A]", "kind" : "final def"}, {"label" : "mapLog", "tail" : "(f: (W) => W2): ZValidation[W2, E, A]", "member" : "zio.prelude.ZValidation.mapLog", "link" : "zio\/prelude\/ZValidation.html#mapLog[W2](f:W=>W2):zio.prelude.ZValidation[W2,E,A]", "kind" : "final def"}, {"label" : "mapErrorAll", "tail" : "(f: (NonEmptyChunk[E]) => NonEmptyChunk[E2]): ZValidation[W, E2, A]", "member" : "zio.prelude.ZValidation.mapErrorAll", "link" : "zio\/prelude\/ZValidation.html#mapErrorAll[E2](f:zio.NonEmptyChunk[E]=>zio.NonEmptyChunk[E2]):zio.prelude.ZValidation[W,E2,A]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E2): ZValidation[W, E2, A]", "member" : "zio.prelude.ZValidation.mapError", "link" : "zio\/prelude\/ZValidation.html#mapError[E2](f:E=>E2):zio.prelude.ZValidation[W,E2,A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.map", "link" : "zio\/prelude\/ZValidation.html#map[B](f:A=>B):zio.prelude.ZValidation[W,E,B]", "kind" : "final def"}, {"label" : "log", "tail" : "(w1: W1): ZValidation[W1, E, A]", "member" : "zio.prelude.ZValidation.log", "link" : "zio\/prelude\/ZValidation.html#log[W1>:W](w1:W1):zio.prelude.ZValidation[W1,E,A]", "kind" : "final def"}, {"label" : "getLog", "tail" : "(): Chunk[W]", "member" : "zio.prelude.ZValidation.getLog", "link" : "zio\/prelude\/ZValidation.html#getLog:zio.Chunk[W]", "kind" : "final def"}, {"label" : "fold", "tail" : "(failure: (NonEmptyChunk[E]) => B, success: (A) => B): B", "member" : "zio.prelude.ZValidation.fold", "link" : "zio\/prelude\/ZValidation.html#fold[B](failure:zio.NonEmptyChunk[E]=>B,success:A=>B):B", "kind" : "final def"}, {"label" : "forEach", "tail" : "(f: (A) => F[B])(arg0: IdentityBoth[F], arg1: Covariant[F]): F[ZValidation[W, E, B]]", "member" : "zio.prelude.ZValidation.forEach", "link" : "zio\/prelude\/ZValidation.html#forEach[F[+_],B](f:A=>F[B])(implicitevidence$1:zio.prelude.IdentityBoth[F],implicitevidence$2:zio.prelude.Covariant[F]):F[zio.prelude.ZValidation[W,E,B]]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev1: <:<[A, ZValidation[W1, E1, B]]): ZValidation[W1, E1, B]", "member" : "zio.prelude.ZValidation.flatten", "link" : "zio\/prelude\/ZValidation.html#flatten[W1>:W,E1>:E,B](implicitev1:A<:<zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,B]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => ZValidation[W1, E1, B]): ZValidation[W1, E1, B]", "member" : "zio.prelude.ZValidation.flatMap", "link" : "zio\/prelude\/ZValidation.html#flatMap[W1>:W,E1>:E,B](f:A=>zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,B]", "kind" : "final def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "zio.prelude.ZValidation.hashCode", "link" : "zio\/prelude\/ZValidation.html#hashCode():Int", "kind" : "final def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "zio.prelude.ZValidation.equals", "link" : "zio\/prelude\/ZValidation.html#equals(that:Any):Boolean", "kind" : "final def"}, {"label" : "asError", "tail" : "(e: E2): ZValidation[W, E2, A]", "member" : "zio.prelude.ZValidation.asError", "link" : "zio\/prelude\/ZValidation.html#asError[E2](e:E2):zio.prelude.ZValidation[W,E2,A]", "kind" : "final def"}, {"label" : "as", "tail" : "(b: B): ZValidation[W, E, B]", "member" : "zio.prelude.ZValidation.as", "link" : "zio\/prelude\/ZValidation.html#as[B](b:B):zio.prelude.ZValidation[W,E,B]", "kind" : "final def"}, {"label" : "??", "tail" : "(w1: W1): ZValidation[W1, E, A]", "member" : "zio.prelude.ZValidation.??", "link" : "zio\/prelude\/ZValidation.html#??[W1>:W](w1:W1):zio.prelude.ZValidation[W1,E,A]", "kind" : "final def"}, {"label" : "<&>", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, (A, B)]", "member" : "zio.prelude.ZValidation.<&>", "link" : "zio\/prelude\/ZValidation.html#<&>[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,(A,B)]", "kind" : "final def"}, {"label" : "&>", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, B]", "member" : "zio.prelude.ZValidation.&>", "link" : "zio\/prelude\/ZValidation.html#&>[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,B]", "kind" : "final def"}, {"label" : "<&", "tail" : "(that: ZValidation[W1, E1, B]): ZValidation[W1, E1, A]", "member" : "zio.prelude.ZValidation.<&", "link" : "zio\/prelude\/ZValidation.html#<&[W1>:W,E1>:E,B](that:zio.prelude.ZValidation[W1,E1,B]):zio.prelude.ZValidation[W1,E1,A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/ZValidation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/ZValidation.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/ZValidation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/ZValidation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/ZValidation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/ZValidation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/ZValidation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/ZValidation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/ZValidation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/ZValidation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/ZValidation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/ZValidation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/ZValidation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/ZValidation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/ZValidation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "ZValidation represents either a success of type A or a collection of oneor more errors of type E along with in either case a log with entries oftype W."}], "zio.prelude.recursive" : [{"name" : "zio.prelude.recursive.Folder", "object" : "zio\/prelude\/recursive\/Folder$.html", "members_object" : [{"label" : "FolderInvariant", "tail" : "(arg0: Covariant[Case]): Invariant[[x]Folder[Case, x]]", "member" : "zio.prelude.recursive.Folder.FolderInvariant", "link" : "zio\/prelude\/recursive\/Folder$.html#FolderInvariant[Case[+_]](implicitevidence$1:zio.prelude.Covariant[Case]):zio.prelude.Invariant[[x]zio.prelude.recursive.Folder[Case,x]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(f: (Case[A]) => A): Folder[Case, A]", "member" : "zio.prelude.recursive.Folder.apply", "link" : "zio\/prelude\/recursive\/Folder$.html#apply[Case[+_],A](f:Case[A]=>A):zio.prelude.recursive.Folder[Case,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Folder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Folder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Folder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Folder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Folder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Folder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Folder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Folder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Folder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/recursive\/Folder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Folder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/recursive\/Folder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/recursive\/Folder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Folder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Folder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Folder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/recursive\/Folder.html", "kind" : "trait", "members_trait" : [{"label" : "zip", "tail" : "(that: Folder[Case, B])(covariant: Covariant[Case]): Folder[Case, (A, B)]", "member" : "zio.prelude.recursive.Folder.zip", "link" : "zio\/prelude\/recursive\/Folder.html#zip[B](that:zio.prelude.recursive.Folder[Case,B])(implicitcovariant:zio.prelude.Covariant[Case]):zio.prelude.recursive.Folder[Case,(A,B)]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/prelude\/recursive\/Folder.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (A) => A): (Case[A]) => A", "member" : "scala.Function1.andThen", "link" : "zio\/prelude\/recursive\/Folder.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Case[A]): (A) => A", "member" : "scala.Function1.compose", "link" : "zio\/prelude\/recursive\/Folder.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Folder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Folder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Folder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Folder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Folder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Folder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Folder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Folder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Folder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Folder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Folder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/recursive\/Folder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/recursive\/Folder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Folder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Folder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Folder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(v1: Case[A]): A", "member" : "scala.Function1.apply", "link" : "zio\/prelude\/recursive\/Folder.html#apply(v1:T1):R", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "zio.prelude.recursive.Recursive", "shortDescription" : "", "object" : "zio\/prelude\/recursive\/Recursive$.html", "members_object" : [{"label" : "unfoldRecursive", "tail" : "(z: Z)(f: (Either[Recursive[Case], Z]) => Case[Either[Recursive[Case], Z]])(covariant: Covariant[Case]): Recursive[Case]", "member" : "zio.prelude.recursive.Recursive.unfoldRecursive", "link" : "zio\/prelude\/recursive\/Recursive$.html#unfoldRecursive[Case[+_],Z](z:Z)(f:Either[zio.prelude.recursive.Recursive[Case],Z]=>Case[Either[zio.prelude.recursive.Recursive[Case],Z]])(implicitcovariant:zio.prelude.Covariant[Case]):zio.prelude.recursive.Recursive[Case]", "kind" : "def"}, {"label" : "unfold", "tail" : "(z: Z)(f: (Z) => Case[Z])(covariant: Covariant[Case]): Recursive[Case]", "member" : "zio.prelude.recursive.Recursive.unfold", "link" : "zio\/prelude\/recursive\/Recursive$.html#unfold[Case[+_],Z](z:Z)(f:Z=>Case[Z])(implicitcovariant:zio.prelude.Covariant[Case]):zio.prelude.recursive.Recursive[Case]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Recursive$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Recursive$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Recursive$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Recursive$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Recursive$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Recursive$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Recursive$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Recursive$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Recursive$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/recursive\/Recursive$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Recursive$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/recursive\/Recursive$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/recursive\/Recursive$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Recursive$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Recursive$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Recursive$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "foldRecursive", "tail" : "(f: (Case[(Recursive[Case], Z)]) => Z)(covariant: Covariant[Case]): Z", "member" : "zio.prelude.recursive.Recursive.foldRecursive", "link" : "zio\/prelude\/recursive\/Recursive.html#foldRecursive[Z](f:Case[(zio.prelude.recursive.Recursive[Case],Z)]=>Z)(implicitcovariant:zio.prelude.Covariant[Case]):Z", "kind" : "def"}, {"label" : "foldM", "tail" : "(f: (Case[Z]) => F[Z])(arg0: AssociativeFlatten[F], arg1: Covariant[F], arg2: IdentityBoth[F], foreach: ForEach[Case]): F[Z]", "member" : "zio.prelude.recursive.Recursive.foldM", "link" : "zio\/prelude\/recursive\/Recursive.html#foldM[F[+_],Z](f:Case[Z]=>F[Z])(implicitevidence$1:zio.prelude.AssociativeFlatten[F],implicitevidence$2:zio.prelude.Covariant[F],implicitevidence$3:zio.prelude.IdentityBoth[F],implicitforeach:zio.prelude.ForEach[Case]):F[Z]", "kind" : "def"}, {"label" : "fold", "tail" : "(f: (Case[Z]) => Z)(covariant: Covariant[Case]): Z", "member" : "zio.prelude.recursive.Recursive.fold", "link" : "zio\/prelude\/recursive\/Recursive.html#fold[Z](f:Case[Z]=>Z)(implicitcovariant:zio.prelude.Covariant[Case]):Z", "kind" : "def"}, {"member" : "zio.prelude.recursive.Recursive#<init>", "error" : "unsupported entity"}, {"label" : "caseValue", "tail" : ": Case[Recursive[Case]]", "member" : "zio.prelude.recursive.Recursive.caseValue", "link" : "zio\/prelude\/recursive\/Recursive.html#caseValue:Case[zio.prelude.recursive.Recursive[Case]]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "zio\/prelude\/recursive\/Recursive.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Recursive.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Recursive.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Recursive.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Recursive.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Recursive.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Recursive.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Recursive.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Recursive.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Recursive.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Recursive.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Recursive.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Recursive.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Recursive.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Recursive.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "zio\/prelude\/recursive\/Recursive.html", "kind" : "case class"}, {"name" : "zio.prelude.recursive.Unfolder", "object" : "zio\/prelude\/recursive\/Unfolder$.html", "members_object" : [{"label" : "Unfoldernvariant", "tail" : "(arg0: Covariant[Case]): Invariant[[x]Unfolder[Case, x]]", "member" : "zio.prelude.recursive.Unfolder.Unfoldernvariant", "link" : "zio\/prelude\/recursive\/Unfolder$.html#Unfoldernvariant[Case[+_]](implicitevidence$1:zio.prelude.Covariant[Case]):zio.prelude.Invariant[[x]zio.prelude.recursive.Unfolder[Case,x]]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(f: (A) => Case[A]): Unfolder[Case, A]", "member" : "zio.prelude.recursive.Unfolder.apply", "link" : "zio\/prelude\/recursive\/Unfolder$.html#apply[Case[+_],A](f:A=>Case[A]):zio.prelude.recursive.Unfolder[Case,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Unfolder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Unfolder$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Unfolder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Unfolder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Unfolder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Unfolder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Unfolder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Unfolder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Unfolder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "zio\/prelude\/recursive\/Unfolder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Unfolder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/recursive\/Unfolder$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/recursive\/Unfolder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Unfolder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Unfolder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Unfolder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "zio\/prelude\/recursive\/Unfolder.html", "kind" : "trait", "members_trait" : [{"label" : "zip", "tail" : "(that: Unfolder[Case, B])(both: AssociativeBoth[Case]): Unfolder[Case, (A, B)]", "member" : "zio.prelude.recursive.Unfolder.zip", "link" : "zio\/prelude\/recursive\/Unfolder.html#zip[B](that:zio.prelude.recursive.Unfolder[Case,B])(implicitboth:zio.prelude.AssociativeBoth[Case]):zio.prelude.recursive.Unfolder[Case,(A,B)]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "zio\/prelude\/recursive\/Unfolder.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Case[A]) => A): (A) => A", "member" : "scala.Function1.andThen", "link" : "zio\/prelude\/recursive\/Unfolder.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => A): (A) => Case[A]", "member" : "scala.Function1.compose", "link" : "zio\/prelude\/recursive\/Unfolder.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "zio\/prelude\/recursive\/Unfolder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "zio\/prelude\/recursive\/Unfolder.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "zio\/prelude\/recursive\/Unfolder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "zio\/prelude\/recursive\/Unfolder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "zio\/prelude\/recursive\/Unfolder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "zio\/prelude\/recursive\/Unfolder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "zio\/prelude\/recursive\/Unfolder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "zio\/prelude\/recursive\/Unfolder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "zio\/prelude\/recursive\/Unfolder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "zio\/prelude\/recursive\/Unfolder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "zio\/prelude\/recursive\/Unfolder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "zio\/prelude\/recursive\/Unfolder.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "zio\/prelude\/recursive\/Unfolder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "zio\/prelude\/recursive\/Unfolder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "zio\/prelude\/recursive\/Unfolder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "zio\/prelude\/recursive\/Unfolder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(v1: A): Case[A]", "member" : "scala.Function1.apply", "link" : "zio\/prelude\/recursive\/Unfolder.html#apply(v1:T1):R", "kind" : "abstract def"}], "shortDescription" : ""}]};